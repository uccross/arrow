" turn on the ftplugin mechanism
filetype plugin on

" no vi (vi improved yes)
set nocompatible

" yeah!
syntax on

" change the map leader
let mapleader=","
let maplocalleader=","

""""""""""""""""""""""""""""""""""""""
" common baseline configs that filetype plugins should override as desired
set ruler

" enable the mouse butons to have an effect on vim:
set mouse=a

" replace the soundbell for a flashing visual bell:
set visualbell

" Influences the working of <BS>, <Del>, CTRL-W and CTRL-U in Insert
" mode.  If set to 0 Vi compatible backspacing is used.  When 1 allow
" backspacing over newlines.  When larger than 1 allow backspacing over
" the start of insert.  In the last case CTRL-W and CTRL-U stop once at
" the start of insert.
set backspace=2

" When a bracket is inserted, briefly jump to the matching one.  The
" jump is only done if the match can be seen on the screen.  The time to
" show the match can be set with 'matchtime'.
" A Beep is given if there is no match (no matter if the match can be
" seen or not).  This option is reset when the 'paste' option is set.
" When the 'm' flag is not included in 'cpoptions', typing a character
" will immediately move the cursor back to where it belongs.
" See the 'sm' field in 'guicursor' for setting the cursor shape and
" blinking when showing the match.
set showmatch

" show (partial) command in status line
set showcmd

" do not wrap text (very useful when reading logs)
set nowrap

" automatically save when going from any mode to command-mode
set autowrite

" text width
set textwidth=80

" automatic formatting for text and comments
" vim understands the difference between commands and code. It can be configured
" to wrap comments and leave the code alone. This is done by putting the
" following lines. The formatoptions tells Vim that we want to automatically
" wrap comments but don't want code wrapped
set fo=
set fo+=t  " autoformat all text
set fo+=c  " also, and most usefully, autoformat comments
set fo+=r  " insert comment leader after pressing <Enter> in Insert mode
set fo+=o  " the same but after pressing 'o' or 'O' in Normal mode
set fo+=n  " to automatically indent bullet and numbered lists
set fo+=q  " allow the formatting of comments by using 'gq'
set fo+=a  " reformat the text on each keyboard input (slow on older CPUs)
set fo+=w  " trailing white space indicates a paragraph continues in the next
           " line. A line that ends in a non-white character ends a paragraph

" Don't insert two spaces after a '.', '?' and '!' with a join command (implied by fo+=w)
set nojoinspaces

" Enables automatic C program indenting  See 'cinkeys' to set the keys
" that trigger reindenting in insert mode and 'cinoptions' to set your
" preferred indent style.  If 'lisp' is not on and 'equalprg' is empty,
" the '=' operator indents using this algorithm rather than calling an
" external program.  See |C_indenting|.  This option is switched off
" when 'paste' is set.
set cindent

" Copy indent from current line when starting a new line (typing <CR> in
" insert mode or when using the "o" or "O" command). When 'smartindent' or
" 'cindent' is on the indent is changed in a different way. The 'autoindent'
" option is reset when the 'paste' option is set.
set autoindent

" remember 99999 commands instead of the default ()
set history=9999

" spell on
set spell

" spell file
set spellfile=~/.vim/dict.add

" For a clear explanation of how tabbing works in Vim:
"    http://vim.wikia.com/wiki/Indenting_source_code
" To insert space characters whenever the tab key is pressed, set the 'expandtab' option expandtab.
" With this option set, if you want to enter a real tab character use Ctrl-V<Tab> key sequence.
set expandtab

" To change the number of space characters inserted for indentation, use the 'shiftwidth' option.
set shiftwidth=4

" Number of spaces that a <Tab> counts for while performing editing operations, like inserting a
" <Tab> or using <BS>.  It "feels" like <Tab>s are being inserted, while in fact a mix of spaces and
" <Tab>s is used.  This is useful to keep the 'ts' setting at its standard value of 8, while being
" able to edit like it is set to 'sts'.
" However, commands like "x" still work on the actual characters.
" "When 'sts' is zero, this feature is off.
set softtabstop=4

" Ignore case in search patterns. Also used when searching in the tags file.
set ignorecase

" autowrite the file when jumping through tags
set autowrite

" override the 'ignorecase' option if the search pattern contains upper case characters. Only used
" when the search pattern is typed and 'ignorecase' option is on.
set smartcase

" a comma separated list of options for Insert mode completion
set completeopt=menu,menuone,noinsert,noselect

" make vimdiff ignore whitespace
set diffopt+=iwhite

if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

"#################
" Plug
call plug#begin('~/.vim/plugged')
Plug 'reedes/vim-colors-pencil'
Plug 'tpope/vim-unimpaired'
Plug 'bitc/vim-bad-whitespace'
Plug 'kien/ctrlp.vim'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
call plug#end()

" ###################################
" configuration for each plugin
" ###################################


" ## ctrlp
let g:ctrlp_working_path_mode = 0
let g:ctrlp_show_hidden = 1
let g:ctrlp_user_command = {
    \ 'types': {
        \ 1: ['.git', 'cd %s && git ls-files . --cached --exclude-standard --others'],
        \ 2: ['.hg', 'hg --cwd %s locate -I .'],
    \ },
    \ 'fallback': 'find %s -type f'
\ }


""""""""""""""""""""""""""""""""""
" coc.nvim config
""""""""""""""""""""""""""""""""""

" TextEdit might fail if hidden is not set.
set hidden

" Some servers have issues with backup files, see #649.
set nobackup
set nowritebackup

" Give more space for displaying messages.
set cmdheight=2

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=300

" Don't pass messages to |ins-completion-menu|.
set shortmess+=c

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
if has("patch-8.1.1564")
  " Recently vim can merge signcolumn and number column into one
  set signcolumn=number
else
  set signcolumn=yes
endif

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current
" position. Coc only does snippet and additional edit on confirm.
" <cr> could be remapped by other vim plugin, try `:verbose imap <CR>`.
if exists('*complete_info')
  inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
else
  inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
endif

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current buffer.
nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

" Use CTRL-S for selections ranges.
" Requires 'textDocument/selectionRange' support of LS, ex: coc-tsserver
nmap <silent> <C-s> <Plug>(coc-range-select)
xmap <silent> <C-s> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocAction('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add (Neo)Vim's native statusline support.
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline.
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Mappings for CoCList
" Show all diagnostics.
nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions.
nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
" Show commands.
nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document.
nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols.
nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list.
nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>
