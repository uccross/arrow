//+build !noasm !appengine
// AUTO-GENERATED BY C2GOASM -- DO NOT EDIT

DATA LCDATA1<>+0x000(SB)/8, $0x0000001900000018
DATA LCDATA1<>+0x008(SB)/8, $0x0000001b0000001a
DATA LCDATA1<>+0x010(SB)/8, $0x0000001d0000001c
DATA LCDATA1<>+0x018(SB)/8, $0x0000001f0000001e
DATA LCDATA1<>+0x020(SB)/8, $0x0000001100000010
DATA LCDATA1<>+0x028(SB)/8, $0x0000001300000012
DATA LCDATA1<>+0x030(SB)/8, $0x0000001500000014
DATA LCDATA1<>+0x038(SB)/8, $0x0000001700000016
DATA LCDATA1<>+0x040(SB)/8, $0x0000000900000008
DATA LCDATA1<>+0x048(SB)/8, $0x0000000b0000000a
DATA LCDATA1<>+0x050(SB)/8, $0x0000000d0000000c
DATA LCDATA1<>+0x058(SB)/8, $0x0000000f0000000e
DATA LCDATA1<>+0x060(SB)/8, $0x0000000100000000
DATA LCDATA1<>+0x068(SB)/8, $0x0000000300000002
DATA LCDATA1<>+0x070(SB)/8, $0x0000000500000004
DATA LCDATA1<>+0x078(SB)/8, $0x0000000700000006
DATA LCDATA1<>+0x080(SB)/8, $0x0101010101010101
DATA LCDATA1<>+0x088(SB)/8, $0x0101010101010101
DATA LCDATA1<>+0x090(SB)/8, $0x0101010101010101
DATA LCDATA1<>+0x098(SB)/8, $0x0101010101010101
DATA LCDATA1<>+0x0a0(SB)/8, $0x0000000000000001
DATA LCDATA1<>+0x0a8(SB)/8, $0x0000000000000002
DATA LCDATA1<>+0x0b0(SB)/8, $0x0000000000000003
DATA LCDATA1<>+0x0b8(SB)/8, $0x0000000000000004
DATA LCDATA1<>+0x0c0(SB)/8, $0x0000000000000005
DATA LCDATA1<>+0x0c8(SB)/8, $0x0000000000000006
DATA LCDATA1<>+0x0d0(SB)/8, $0x0000000000000007
DATA LCDATA1<>+0x0d8(SB)/8, $0x0000000000000020
GLOBL LCDATA1<>(SB), 8, $224

TEXT Â·_bytes_to_bools_avx2(SB), $1000-32

	MOVQ in+0(FP), DI
	MOVQ len+8(FP), SI
	MOVQ out+16(FP), DX
	MOVQ outlen+24(FP), CX
	MOVQ SP, BP
	ADDQ $32, SP
	ANDQ $-32, SP
	MOVQ BP, 960(SP)
	LEAQ LCDATA1<>(SB), BP

	WORD $0xf685             // test    esi, esi
	JLE  LBB0_1051
	WORD $0x8941; BYTE $0xc9 // mov    r9d, ecx
	WORD $0x8949; BYTE $0xd0 // mov    r8, rdx
	WORD $0x8941; BYTE $0xf2 // mov    r10d, esi
	WORD $0xfe83; BYTE $0x20 // cmp    esi, 32
	JAE  LBB0_3

LBB0_2:
	WORD $0x3145; BYTE $0xe4 // xor    r12d, r12d

LBB0_1055:
	QUAD $0x00000000e50c8d42 // lea    ecx, [8*r12]
	JMP  LBB0_1057

LBB0_1056:
	LONG $0x01c48349         // add    r12, 1
	WORD $0xc183; BYTE $0x08 // add    ecx, 8
	WORD $0x394d; BYTE $0xe2 // cmp    r10, r12
	JE   LBB0_1051

LBB0_1057:
	WORD $0xca89                 // mov    edx, ecx
	WORD $0xc989                 // mov    ecx, ecx
	WORD $0x3944; BYTE $0xca     // cmp    edx, r9d
	JGE  LBB0_1056
	LONG $0x14b60f42; BYTE $0x27 // movzx    edx, byte [rdi + r12]
	WORD $0xe280; BYTE $0x01     // and    dl, 1
	LONG $0x08148841             // mov    byte [r8 + rcx], dl
	WORD $0x8948; BYTE $0xca     // mov    rdx, rcx
	LONG $0x01ca8348             // or    rdx, 1
	WORD $0x3944; BYTE $0xca     // cmp    edx, r9d
	JGE  LBB0_1056
	LONG $0x1cb60f42; BYTE $0x27 // movzx    ebx, byte [rdi + r12]
	WORD $0xebd0                 // shr    bl, 1
	WORD $0xe380; BYTE $0x01     // and    bl, 1
	LONG $0x101c8841             // mov    byte [r8 + rdx], bl
	WORD $0x8948; BYTE $0xca     // mov    rdx, rcx
	LONG $0x02ca8348             // or    rdx, 2
	WORD $0x3944; BYTE $0xca     // cmp    edx, r9d
	JGE  LBB0_1056
	LONG $0x1cb60f42; BYTE $0x27 // movzx    ebx, byte [rdi + r12]
	WORD $0xebc0; BYTE $0x02     // shr    bl, 2
	WORD $0xe380; BYTE $0x01     // and    bl, 1
	LONG $0x101c8841             // mov    byte [r8 + rdx], bl
	WORD $0x8948; BYTE $0xca     // mov    rdx, rcx
	LONG $0x03ca8348             // or    rdx, 3
	WORD $0x3944; BYTE $0xca     // cmp    edx, r9d
	JGE  LBB0_1056
	LONG $0x1cb60f42; BYTE $0x27 // movzx    ebx, byte [rdi + r12]
	WORD $0xebc0; BYTE $0x03     // shr    bl, 3
	WORD $0xe380; BYTE $0x01     // and    bl, 1
	LONG $0x101c8841             // mov    byte [r8 + rdx], bl
	WORD $0x8948; BYTE $0xca     // mov    rdx, rcx
	LONG $0x04ca8348             // or    rdx, 4
	WORD $0x3944; BYTE $0xca     // cmp    edx, r9d
	JGE  LBB0_1056
	LONG $0x1cb60f42; BYTE $0x27 // movzx    ebx, byte [rdi + r12]
	WORD $0xebc0; BYTE $0x04     // shr    bl, 4
	WORD $0xe380; BYTE $0x01     // and    bl, 1
	LONG $0x101c8841             // mov    byte [r8 + rdx], bl
	WORD $0x8948; BYTE $0xca     // mov    rdx, rcx
	LONG $0x05ca8348             // or    rdx, 5
	WORD $0x3944; BYTE $0xca     // cmp    edx, r9d
	JGE  LBB0_1056
	LONG $0x1cb60f42; BYTE $0x27 // movzx    ebx, byte [rdi + r12]
	WORD $0xebc0; BYTE $0x05     // shr    bl, 5
	WORD $0xe380; BYTE $0x01     // and    bl, 1
	LONG $0x101c8841             // mov    byte [r8 + rdx], bl
	WORD $0x8948; BYTE $0xca     // mov    rdx, rcx
	LONG $0x06ca8348             // or    rdx, 6
	WORD $0x3944; BYTE $0xca     // cmp    edx, r9d
	JGE  LBB0_1056
	LONG $0x1cb60f42; BYTE $0x27 // movzx    ebx, byte [rdi + r12]
	WORD $0xebc0; BYTE $0x06     // shr    bl, 6
	WORD $0xe380; BYTE $0x01     // and    bl, 1
	LONG $0x101c8841             // mov    byte [r8 + rdx], bl
	WORD $0x8948; BYTE $0xca     // mov    rdx, rcx
	LONG $0x07ca8348             // or    rdx, 7
	WORD $0x3944; BYTE $0xca     // cmp    edx, r9d
	JGE  LBB0_1056
	LONG $0x1cb60f42; BYTE $0x27 // movzx    ebx, byte [rdi + r12]
	WORD $0xebc0; BYTE $0x07     // shr    bl, 7
	LONG $0x101c8841             // mov    byte [r8 + rdx], bl
	JMP  LBB0_1056

LBB0_3:
	LONG $0x244c8944; BYTE $0x10 // mov    dword [rsp + 16], r9d
	LONG $0x2454894c; BYTE $0x30 // mov    qword [rsp + 48], r10
	LONG $0xff728d49             // lea    rsi, [r10 - 1]
	LONG $0x000008b9; BYTE $0x00 // mov    ecx, 8
	WORD $0xf089                 // mov    eax, esi
	WORD $0xe1f7                 // mul    ecx
	LONG $0xd6900f41             // seto    r14b
	WORD $0x8948; BYTE $0xf3     // mov    rbx, rsi
	LONG $0x20ebc148             // shr    rbx, 32
	LONG $0x06488d49             // lea    rcx, [r8 + 6]
	LONG $0x000008ba; BYTE $0x00 // mov    edx, 8
	WORD $0x8948; BYTE $0xf0     // mov    rax, rsi
	WORD $0xf748; BYTE $0xe2     // mul    rdx
	LONG $0xd6900f40             // seto    sil
	WORD $0x0148; BYTE $0xc1     // add    rcx, rax
	WORD $0x920f; BYTE $0xd2     // setb    dl
	LONG $0x07488d49             // lea    rcx, [r8 + 7]
	WORD $0x0148; BYTE $0xc1     // add    rcx, rax
	LONG $0xd5920f41             // setb    r13b
	LONG $0x05488d49             // lea    rcx, [r8 + 5]
	WORD $0x0148; BYTE $0xc1     // add    rcx, rax
	LONG $0xd1920f41             // setb    r9b
	LONG $0x04488d49             // lea    rcx, [r8 + 4]
	WORD $0x0148; BYTE $0xc1     // add    rcx, rax
	LONG $0xd7920f41             // setb    r15b
	LONG $0x03488d49             // lea    rcx, [r8 + 3]
	WORD $0x0148; BYTE $0xc1     // add    rcx, rax
	LONG $0xd3920f41             // setb    r11b
	LONG $0x02488d49             // lea    rcx, [r8 + 2]
	WORD $0x0148; BYTE $0xc1     // add    rcx, rax
	LONG $0xd2920f41             // setb    r10b
	LONG $0x01488d49             // lea    rcx, [r8 + 1]
	WORD $0x0148; BYTE $0xc1     // add    rcx, rax
	WORD $0x920f; BYTE $0xd1     // setb    cl
	WORD $0x014c; BYTE $0xc0     // add    rax, r8
	WORD $0x920f; BYTE $0xd0     // setb    al
	WORD $0x3145; BYTE $0xe4     // xor    r12d, r12d
	WORD $0x8548; BYTE $0xdb     // test    rbx, rbx
	JNE  LBB0_1052
	WORD $0x8445; BYTE $0xf6     // test    r14b, r14b
	JNE  LBB0_1052
	WORD $0xd284                 // test    dl, dl
	JNE  LBB0_1052
	WORD $0x8440; BYTE $0xf6     // test    sil, sil
	JNE  LBB0_1052
	WORD $0x8445; BYTE $0xed     // test    r13b, r13b
	JNE  LBB0_1052
	WORD $0x8440; BYTE $0xf6     // test    sil, sil
	JNE  LBB0_1052
	WORD $0x8445; BYTE $0xc9     // test    r9b, r9b
	JNE  LBB0_1052
	WORD $0x8440; BYTE $0xf6     // test    sil, sil
	JNE  LBB0_1052
	WORD $0x8445; BYTE $0xff     // test    r15b, r15b
	JNE  LBB0_1052
	WORD $0x8440; BYTE $0xf6     // test    sil, sil
	JNE  LBB0_1052
	WORD $0x8445; BYTE $0xdb     // test    r11b, r11b
	JNE  LBB0_1052
	WORD $0x8440; BYTE $0xf6     // test    sil, sil
	JNE  LBB0_1052
	WORD $0x8445; BYTE $0xd2     // test    r10b, r10b
	JNE  LBB0_1052
	WORD $0x8440; BYTE $0xf6     // test    sil, sil
	LONG $0x24548b4c; BYTE $0x30 // mov    r10, qword [rsp + 48]
	JNE  LBB0_1054
	WORD $0xc984                 // test    cl, cl
	JNE  LBB0_1054
	WORD $0x8440; BYTE $0xf6     // test    sil, sil
	LONG $0x244c8b44; BYTE $0x10 // mov    r9d, dword [rsp + 16]
	JNE  LBB0_1055
	WORD $0xc084                 // test    al, al
	JNE  LBB0_1055
	WORD $0x8440; BYTE $0xf6     // test    sil, sil
	JNE  LBB0_1055
	LONG $0xd0048d4b             // lea    rax, [r8 + 8*r10]
	WORD $0x3948; BYTE $0xf8     // cmp    rax, rdi
	JBE  LBB0_24
	LONG $0x17048d4a             // lea    rax, [rdi + r10]
	WORD $0x394c; BYTE $0xc0     // cmp    rax, r8
	JA   LBB0_2

LBB0_24:
	WORD $0x8945; BYTE $0xd4             // mov    r12d, r10d
	LONG $0xe0e48341                     // and    r12d, -32
	LONG $0x6e79c1c4; BYTE $0xc1         // vmovd    xmm0, r9d
	LONG $0x587de2c4; BYTE $0xc0         // vpbroadcastd    ymm0, xmm0
	LONG $0x4d6f7dc5; BYTE $0x00         // vmovdqa    ymm9, yword 0[rbp] /* [rip + .LCPI0_0] */
	LONG $0x456f7dc5; BYTE $0x20         // vmovdqa    ymm8, yword 32[rbp] /* [rip + .LCPI0_1] */
	LONG $0x5d6ffdc5; BYTE $0x40         // vmovdqa    ymm3, yword 64[rbp] /* [rip + .LCPI0_2] */
	LONG $0x556ffdc5; BYTE $0x60         // vmovdqa    ymm2, yword 96[rbp] /* [rip + .LCPI0_3] */
	WORD $0x3145; BYTE $0xdb             // xor    r11d, r11d
	QUAD $0x0000a08d197de2c4; BYTE $0x00 // vbroadcastsd    ymm1, qword 160[rbp] /* [rip + .LCPI0_5] */
	QUAD $0x000300248c29fcc5; BYTE $0x00 // vmovaps    yword [rsp + 768], ymm1
	QUAD $0x0000a88d197de2c4; BYTE $0x00 // vbroadcastsd    ymm1, qword 168[rbp] /* [rip + .LCPI0_6] */
	QUAD $0x0002e0248c29fcc5; BYTE $0x00 // vmovaps    yword [rsp + 736], ymm1
	QUAD $0x0000b08d197de2c4; BYTE $0x00 // vbroadcastsd    ymm1, qword 176[rbp] /* [rip + .LCPI0_7] */
	QUAD $0x0002c0248c29fcc5; BYTE $0x00 // vmovaps    yword [rsp + 704], ymm1
	QUAD $0x0000b88d197de2c4; BYTE $0x00 // vbroadcastsd    ymm1, qword 184[rbp] /* [rip + .LCPI0_8] */
	QUAD $0x0002a0248c29fcc5; BYTE $0x00 // vmovaps    yword [rsp + 672], ymm1
	QUAD $0x0000c08d197de2c4; BYTE $0x00 // vbroadcastsd    ymm1, qword 192[rbp] /* [rip + .LCPI0_9] */
	QUAD $0x000280248c29fcc5; BYTE $0x00 // vmovaps    yword [rsp + 640], ymm1
	QUAD $0x0000c88d197de2c4; BYTE $0x00 // vbroadcastsd    ymm1, qword 200[rbp] /* [rip + .LCPI0_10] */
	QUAD $0x000260248c29fcc5; BYTE $0x00 // vmovaps    yword [rsp + 608], ymm1
	QUAD $0x0000d08d197de2c4; BYTE $0x00 // vbroadcastsd    ymm1, qword 208[rbp] /* [rip + .LCPI0_11] */
	QUAD $0x000240248c29fcc5; BYTE $0x00 // vmovaps    yword [rsp + 576], ymm1
	QUAD $0x0000d88d587de2c4; BYTE $0x00 // vpbroadcastd    ymm1, dword 216[rbp] /* [rip + .LCPI0_12] */
	QUAD $0x000220248c7ffdc5; BYTE $0x00 // vmovdqa    yword [rsp + 544], ymm1
	JMP  LBB0_26

LBB0_25:
	LONG $0x20c38349                     // add    r11, 32
	QUAD $0x000220248c6ffdc5; BYTE $0x00 // vmovdqa    ymm1, yword [rsp + 544]
	LONG $0xd1feedc5                     // vpaddd    ymm2, ymm2, ymm1
	LONG $0xd9fee5c5                     // vpaddd    ymm3, ymm3, ymm1
	LONG $0xc1fe3dc5                     // vpaddd    ymm8, ymm8, ymm1
	LONG $0xc9fe35c5                     // vpaddd    ymm9, ymm9, ymm1
	WORD $0x394d; BYTE $0xe3             // cmp    r11, r12
	JE   LBB0_1050

LBB0_26:
	QUAD $0x00032024947ffdc5; BYTE $0x00 // vmovdqa    yword [rsp + 800], ymm2
	LONG $0xf272f5c5; BYTE $0x03         // vpslld    ymm1, ymm2, 3
	LONG $0xd166f9c5                     // vpcmpgtd    xmm2, xmm0, xmm1
	LONG $0xd17ef9c5                     // vmovd    ecx, xmm2
	WORD $0xc1f6; BYTE $0x01             // test    cl, 1
	JE   LBB0_28
	LONG $0x787da2c4; WORD $0x1f24       // vpbroadcastb    ymm4, byte [rdi + r11]

LBB0_28:
	WORD $0x894d; BYTE $0xda                   // mov    r10, r11
	LONG $0x01ca8349                           // or    r10, 1
	LONG $0xd166f9c5                           // vpcmpgtd    xmm2, xmm0, xmm1
	LONG $0xd26be9c5                           // vpackssdw    xmm2, xmm2, xmm2
	LONG $0xd263e9c5                           // vpacksswb    xmm2, xmm2, xmm2
	LONG $0x1479e3c4; WORD $0x01d1             // vpextrb    ecx, xmm2, 1
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JE   LBB0_30
	LONG $0x2059a3c4; WORD $0x1714; BYTE $0x01 // vpinsrb    xmm2, xmm4, byte [rdi + r10], 1
	LONG $0x025de3c4; WORD $0x0fe2             // vpblendd    ymm4, ymm4, ymm2, 15

LBB0_30:
	WORD $0x894d; BYTE $0xde                   // mov    r14, r11
	LONG $0x02ce8349                           // or    r14, 2
	LONG $0xd166f9c5                           // vpcmpgtd    xmm2, xmm0, xmm1
	LONG $0xd26be9c5                           // vpackssdw    xmm2, xmm2, xmm2
	LONG $0xd263e9c5                           // vpacksswb    xmm2, xmm2, xmm2
	LONG $0x1479e3c4; WORD $0x02d1             // vpextrb    ecx, xmm2, 2
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JE   LBB0_32
	LONG $0x2059a3c4; WORD $0x3714; BYTE $0x02 // vpinsrb    xmm2, xmm4, byte [rdi + r14], 2
	LONG $0x025de3c4; WORD $0x0fe2             // vpblendd    ymm4, ymm4, ymm2, 15

LBB0_32:
	LONG $0x397dc3c4; WORD $0x01cd             // vextracti128    xmm13, ymm1, 1
	WORD $0x894c; BYTE $0xda                   // mov    rdx, r11
	LONG $0x03ca8348                           // or    rdx, 3
	LONG $0xd166f9c5                           // vpcmpgtd    xmm2, xmm0, xmm1
	LONG $0xd26be9c5                           // vpackssdw    xmm2, xmm2, xmm2
	LONG $0xd263e9c5                           // vpacksswb    xmm2, xmm2, xmm2
	LONG $0x1479e3c4; WORD $0x03d1             // vpextrb    ecx, xmm2, 3
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JE   LBB0_34
	LONG $0x2059e3c4; WORD $0x1714; BYTE $0x03 // vpinsrb    xmm2, xmm4, byte [rdi + rdx], 3
	LONG $0x025de3c4; WORD $0x0fe2             // vpblendd    ymm4, ymm4, ymm2, 15

LBB0_34:
	WORD $0x894c; BYTE $0xd9                   // mov    rcx, r11
	LONG $0x04c98348                           // or    rcx, 4
	LONG $0x397de3c4; WORD $0x01c7             // vextracti128    xmm7, ymm0, 1
	LONG $0x6641c1c4; BYTE $0xd5               // vpcmpgtd    xmm2, xmm7, xmm13
	LONG $0x1479c3c4; WORD $0x00d1             // vpextrb    r9d, xmm2, 0
	LONG $0x01c1f641                           // test    r9b, 1
	QUAD $0x0000011024948948                   // mov    qword [rsp + 272], rdx
	QUAD $0x00000108248c8948                   // mov    qword [rsp + 264], rcx
	JE   LBB0_36
	LONG $0x2059e3c4; WORD $0x0f14; BYTE $0x04 // vpinsrb    xmm2, xmm4, byte [rdi + rcx], 4
	LONG $0x025de3c4; WORD $0x0fe2             // vpblendd    ymm4, ymm4, ymm2, 15

LBB0_36:
	WORD $0x894d; BYTE $0xdf                   // mov    r15, r11
	LONG $0x05cf8349                           // or    r15, 5
	LONG $0xf166fdc5                           // vpcmpgtd    ymm6, ymm0, ymm1
	LONG $0xd06bcdc5                           // vpackssdw    ymm2, ymm6, ymm0
	LONG $0x397de3c4; WORD $0x01d2             // vextracti128    xmm2, ymm2, 1
	LONG $0x5879e2c4; BYTE $0xd2               // vpbroadcastd    xmm2, xmm2
	LONG $0xd263e9c5                           // vpacksswb    xmm2, xmm2, xmm2
	LONG $0x1479e3c4; WORD $0x05d1             // vpextrb    ecx, xmm2, 5
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JE   LBB0_38
	LONG $0x2059a3c4; WORD $0x3f14; BYTE $0x05 // vpinsrb    xmm2, xmm4, byte [rdi + r15], 5
	LONG $0x025de3c4; WORD $0x0fe2             // vpblendd    ymm4, ymm4, ymm2, 15

LBB0_38:
	WORD $0x894c; BYTE $0xdb                   // mov    rbx, r11
	LONG $0x06cb8348                           // or    rbx, 6
	LONG $0xd06bcdc5                           // vpackssdw    ymm2, ymm6, ymm0
	LONG $0x00fde3c4; WORD $0xe8d2             // vpermq    ymm2, ymm2, 232
	LONG $0xd263e9c5                           // vpacksswb    xmm2, xmm2, xmm2
	LONG $0x1479e3c4; WORD $0x06d1             // vpextrb    ecx, xmm2, 6
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JE   LBB0_40
	LONG $0x2059e3c4; WORD $0x1f14; BYTE $0x06 // vpinsrb    xmm2, xmm4, byte [rdi + rbx], 6
	LONG $0x025de3c4; WORD $0x0fe2             // vpblendd    ymm4, ymm4, ymm2, 15

LBB0_40:
	LONG $0xf372edc5; BYTE $0x03               // vpslld    ymm2, ymm3, 3
	WORD $0x894c; BYTE $0xd8                   // mov    rax, r11
	LONG $0x07c88348                           // or    rax, 7
	LONG $0xe86bcdc5                           // vpackssdw    ymm5, ymm6, ymm0
	LONG $0x00fde3c4; WORD $0xe8ed             // vpermq    ymm5, ymm5, 232
	LONG $0xed63d1c5                           // vpacksswb    xmm5, xmm5, xmm5
	LONG $0x1479e3c4; WORD $0x07e9             // vpextrb    ecx, xmm5, 7
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JE   LBB0_42
	LONG $0x2059e3c4; WORD $0x072c; BYTE $0x07 // vpinsrb    xmm5, xmm4, byte [rdi + rax], 7
	LONG $0x025de3c4; WORD $0x0fe5             // vpblendd    ymm4, ymm4, ymm5, 15

LBB0_42:
	WORD $0x894c; BYTE $0xde                   // mov    rsi, r11
	LONG $0x08ce8348                           // or    rsi, 8
	LONG $0xea66f9c5                           // vpcmpgtd    xmm5, xmm0, xmm2
	LONG $0x1479e3c4; WORD $0x00e9             // vpextrb    ecx, xmm5, 0
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JE   LBB0_44
	LONG $0x2059e3c4; WORD $0x372c; BYTE $0x08 // vpinsrb    xmm5, xmm4, byte [rdi + rsi], 8
	LONG $0x025de3c4; WORD $0x0fe5             // vpblendd    ymm4, ymm4, ymm5, 15

LBB0_44:
	WORD $0x894c; BYTE $0xda                   // mov    rdx, r11
	LONG $0x09ca8348                           // or    rdx, 9
	LONG $0xea66f9c5                           // vpcmpgtd    xmm5, xmm0, xmm2
	LONG $0xed6bd1c5                           // vpackssdw    xmm5, xmm5, xmm5
	LONG $0xed63d1c5                           // vpacksswb    xmm5, xmm5, xmm5
	LONG $0x1479e3c4; WORD $0x09e9             // vpextrb    ecx, xmm5, 9
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	QUAD $0x000000e024948948                   // mov    qword [rsp + 224], rdx
	JE   LBB0_46
	LONG $0x2059e3c4; WORD $0x172c; BYTE $0x09 // vpinsrb    xmm5, xmm4, byte [rdi + rdx], 9
	LONG $0x025de3c4; WORD $0x0fe5             // vpblendd    ymm4, ymm4, ymm5, 15

LBB0_46:
	WORD $0x894c; BYTE $0xda                   // mov    rdx, r11
	LONG $0x0aca8348                           // or    rdx, 10
	LONG $0xea66f9c5                           // vpcmpgtd    xmm5, xmm0, xmm2
	LONG $0xed6bd1c5                           // vpackssdw    xmm5, xmm5, xmm5
	LONG $0xed63d1c5                           // vpacksswb    xmm5, xmm5, xmm5
	LONG $0x1479e3c4; WORD $0x0ae9             // vpextrb    ecx, xmm5, 10
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	QUAD $0x000340249c7ffdc5; BYTE $0x00       // vmovdqa    yword [rsp + 832], ymm3
	LONG $0x24748948; BYTE $0x60               // mov    qword [rsp + 96], rsi
	JE   LBB0_48
	LONG $0x2059e3c4; WORD $0x172c; BYTE $0x0a // vpinsrb    xmm5, xmm4, byte [rdi + rdx], 10
	LONG $0x025de3c4; WORD $0x0fe5             // vpblendd    ymm4, ymm4, ymm5, 15

LBB0_48:
	LONG $0x397de3c4; WORD $0x01d5             // vextracti128    xmm5, ymm2, 1
	WORD $0x894c; BYTE $0xde                   // mov    rsi, r11
	LONG $0x0bce8348                           // or    rsi, 11
	LONG $0xda66f9c5                           // vpcmpgtd    xmm3, xmm0, xmm2
	LONG $0xdb6be1c5                           // vpackssdw    xmm3, xmm3, xmm3
	LONG $0xdb63e1c5                           // vpacksswb    xmm3, xmm3, xmm3
	LONG $0x1479e3c4; WORD $0x0bd9             // vpextrb    ecx, xmm3, 11
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	QUAD $0x000000982494894c                   // mov    qword [rsp + 152], r10
	QUAD $0x0000012824b4894c                   // mov    qword [rsp + 296], r14
	LONG $0x247c894c; BYTE $0x68               // mov    qword [rsp + 104], r15
	QUAD $0x00000120249c8948                   // mov    qword [rsp + 288], rbx
	QUAD $0x000000e824848948                   // mov    qword [rsp + 232], rax
	JE   LBB0_50
	LONG $0x2059e3c4; WORD $0x371c; BYTE $0x0b // vpinsrb    xmm3, xmm4, byte [rdi + rsi], 11
	LONG $0x025de3c4; WORD $0x0fe3             // vpblendd    ymm4, ymm4, ymm3, 15

LBB0_50:
	WORD $0x894c; BYTE $0xd9                   // mov    rcx, r11
	LONG $0x0cc98348                           // or    rcx, 12
	LONG $0xdd66c1c5                           // vpcmpgtd    xmm3, xmm7, xmm5
	LONG $0x1479c3c4; WORD $0x00de             // vpextrb    r14d, xmm3, 0
	LONG $0x01c6f641                           // test    r14b, 1
	QUAD $0x0000010024b48948                   // mov    qword [rsp + 256], rsi
	QUAD $0x000000f8248c8948                   // mov    qword [rsp + 248], rcx
	JE   LBB0_52
	LONG $0x2059e3c4; WORD $0x0f1c; BYTE $0x0c // vpinsrb    xmm3, xmm4, byte [rdi + rcx], 12
	LONG $0x025de3c4; WORD $0x0fe3             // vpblendd    ymm4, ymm4, ymm3, 15

LBB0_52:
	WORD $0x894c; BYTE $0xd8                   // mov    rax, r11
	LONG $0x0dc88348                           // or    rax, 13
	LONG $0xfa66fdc5                           // vpcmpgtd    ymm7, ymm0, ymm2
	LONG $0xd86bc5c5                           // vpackssdw    ymm3, ymm7, ymm0
	LONG $0x397de3c4; WORD $0x01db             // vextracti128    xmm3, ymm3, 1
	LONG $0x5879e2c4; BYTE $0xdb               // vpbroadcastd    xmm3, xmm3
	LONG $0xdb63e1c5                           // vpacksswb    xmm3, xmm3, xmm3
	LONG $0x1479e3c4; WORD $0x0dd9             // vpextrb    ecx, xmm3, 13
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JE   LBB0_54
	LONG $0x2059e3c4; WORD $0x071c; BYTE $0x0d // vpinsrb    xmm3, xmm4, byte [rdi + rax], 13
	LONG $0x025de3c4; WORD $0x0fe3             // vpblendd    ymm4, ymm4, ymm3, 15

LBB0_54:
	WORD $0x894c; BYTE $0xdb                   // mov    rbx, r11
	LONG $0x0ecb8348                           // or    rbx, 14
	LONG $0xd86bc5c5                           // vpackssdw    ymm3, ymm7, ymm0
	LONG $0x00fde3c4; WORD $0xe8db             // vpermq    ymm3, ymm3, 232
	LONG $0xdb63e1c5                           // vpacksswb    xmm3, xmm3, xmm3
	LONG $0x1479e3c4; WORD $0x0ed9             // vpextrb    ecx, xmm3, 14
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	LONG $0x245c8948; BYTE $0x50               // mov    qword [rsp + 80], rbx
	JE   LBB0_56
	LONG $0x2059e3c4; WORD $0x1f1c; BYTE $0x0e // vpinsrb    xmm3, xmm4, byte [rdi + rbx], 14
	LONG $0x025de3c4; WORD $0x0fe3             // vpblendd    ymm4, ymm4, ymm3, 15

LBB0_56:
	LONG $0x722dc1c4; WORD $0x03f0             // vpslld    ymm10, ymm8, 3
	WORD $0x894c; BYTE $0xde                   // mov    rsi, r11
	LONG $0x0fce8348                           // or    rsi, 15
	LONG $0xd86bc5c5                           // vpackssdw    ymm3, ymm7, ymm0
	LONG $0x00fde3c4; WORD $0xe8db             // vpermq    ymm3, ymm3, 232
	LONG $0xdb63e1c5                           // vpacksswb    xmm3, xmm3, xmm3
	LONG $0x1479e3c4; WORD $0x0fd9             // vpextrb    ecx, xmm3, 15
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JE   LBB0_58
	LONG $0x2059e3c4; WORD $0x371c; BYTE $0x0f // vpinsrb    xmm3, xmm4, byte [rdi + rsi], 15
	LONG $0x025de3c4; WORD $0x0fe3             // vpblendd    ymm4, ymm4, ymm3, 15

LBB0_58:
	WORD $0x894d; BYTE $0xdf                   // mov    r15, r11
	LONG $0x10cf8349                           // or    r15, 16
	LONG $0x6679c1c4; BYTE $0xda               // vpcmpgtd    xmm3, xmm0, xmm10
	LONG $0xd97ef9c5                           // vmovd    ecx, xmm3
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	LONG $0x247c894c; BYTE $0x40               // mov    qword [rsp + 64], r15
	LONG $0x24748948; BYTE $0x48               // mov    qword [rsp + 72], rsi
	JE   LBB0_60
	LONG $0x397de3c4; WORD $0x01e3             // vextracti128    xmm3, ymm4, 1
	LONG $0x2061a3c4; WORD $0x3f1c; BYTE $0x00 // vpinsrb    xmm3, xmm3, byte [rdi + r15], 0
	LONG $0x385de3c4; WORD $0x01e3             // vinserti128    ymm4, ymm4, xmm3, 1

LBB0_60:
	WORD $0x894c; BYTE $0xde                   // mov    rsi, r11
	LONG $0x11ce8348                           // or    rsi, 17
	LONG $0x6679c1c4; BYTE $0xda               // vpcmpgtd    xmm3, xmm0, xmm10
	LONG $0xdb6be1c5                           // vpackssdw    xmm3, xmm3, xmm3
	LONG $0x00fde3c4; WORD $0xd4db             // vpermq    ymm3, ymm3, 212
	LONG $0xd863e5c5                           // vpacksswb    ymm3, ymm3, ymm0
	LONG $0x397de3c4; WORD $0x01db             // vextracti128    xmm3, ymm3, 1
	LONG $0x1479e3c4; WORD $0x01d9             // vpextrb    ecx, xmm3, 1
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JE   LBB0_62
	LONG $0x397de3c4; WORD $0x01e3             // vextracti128    xmm3, ymm4, 1
	LONG $0x2061e3c4; WORD $0x371c; BYTE $0x01 // vpinsrb    xmm3, xmm3, byte [rdi + rsi], 1
	LONG $0x385de3c4; WORD $0x01e3             // vinserti128    ymm4, ymm4, xmm3, 1

LBB0_62:
	WORD $0x894c; BYTE $0xdb                   // mov    rbx, r11
	LONG $0x12cb8348                           // or    rbx, 18
	LONG $0x6679c1c4; BYTE $0xda               // vpcmpgtd    xmm3, xmm0, xmm10
	LONG $0xdb6be1c5                           // vpackssdw    xmm3, xmm3, xmm3
	LONG $0x00fde3c4; WORD $0xd4db             // vpermq    ymm3, ymm3, 212
	LONG $0xd863e5c5                           // vpacksswb    ymm3, ymm3, ymm0
	LONG $0x397de3c4; WORD $0x01db             // vextracti128    xmm3, ymm3, 1
	LONG $0x1479e3c4; WORD $0x02d9             // vpextrb    ecx, xmm3, 2
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JE   LBB0_64
	LONG $0x397de3c4; WORD $0x01e3             // vextracti128    xmm3, ymm4, 1
	LONG $0x2061e3c4; WORD $0x1f1c; BYTE $0x02 // vpinsrb    xmm3, xmm3, byte [rdi + rbx], 2
	LONG $0x385de3c4; WORD $0x01e3             // vinserti128    ymm4, ymm4, xmm3, 1

LBB0_64:
	WORD $0x894d; BYTE $0xdf                   // mov    r15, r11
	LONG $0x13cf8349                           // or    r15, 19
	LONG $0x6679c1c4; BYTE $0xda               // vpcmpgtd    xmm3, xmm0, xmm10
	LONG $0xdb6be1c5                           // vpackssdw    xmm3, xmm3, xmm3
	LONG $0x00fde3c4; WORD $0xd4db             // vpermq    ymm3, ymm3, 212
	LONG $0xd863e5c5                           // vpacksswb    ymm3, ymm3, ymm0
	LONG $0x397de3c4; WORD $0x01db             // vextracti128    xmm3, ymm3, 1
	LONG $0x1479e3c4; WORD $0x03d9             // vpextrb    ecx, xmm3, 3
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	QUAD $0x00036024847f7dc5; BYTE $0x00       // vmovdqa    yword [rsp + 864], ymm8
	JE   LBB0_66
	LONG $0x397de3c4; WORD $0x01e3             // vextracti128    xmm3, ymm4, 1
	LONG $0x2061a3c4; WORD $0x3f1c; BYTE $0x03 // vpinsrb    xmm3, xmm3, byte [rdi + r15], 3
	LONG $0x385de3c4; WORD $0x01e3             // vinserti128    ymm4, ymm4, xmm3, 1

LBB0_66:
	WORD $0x894d; BYTE $0xdd                   // mov    r13, r11
	LONG $0x14cd8349                           // or    r13, 20
	LONG $0x667d41c4; BYTE $0xc2               // vpcmpgtd    ymm8, ymm0, ymm10
	LONG $0x6b7dc1c4; BYTE $0xd8               // vpackssdw    ymm3, ymm0, ymm8
	LONG $0xd863e5c5                           // vpacksswb    ymm3, ymm3, ymm0
	LONG $0x397de3c4; WORD $0x01db             // vextracti128    xmm3, ymm3, 1
	LONG $0x1479e3c4; WORD $0x04d9             // vpextrb    ecx, xmm3, 4
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	LONG $0x246c894c; BYTE $0x38               // mov    qword [rsp + 56], r13
	JE   LBB0_68
	LONG $0x397de3c4; WORD $0x01e3             // vextracti128    xmm3, ymm4, 1
	LONG $0x2061a3c4; WORD $0x2f1c; BYTE $0x04 // vpinsrb    xmm3, xmm3, byte [rdi + r13], 4
	LONG $0x385de3c4; WORD $0x01e3             // vinserti128    ymm4, ymm4, xmm3, 1

LBB0_68:
	WORD $0x894d; BYTE $0xdd                   // mov    r13, r11
	LONG $0x15cd8349                           // or    r13, 21
	LONG $0x6b7dc1c4; BYTE $0xd8               // vpackssdw    ymm3, ymm0, ymm8
	LONG $0xd863e5c5                           // vpacksswb    ymm3, ymm3, ymm0
	LONG $0x397de3c4; WORD $0x01db             // vextracti128    xmm3, ymm3, 1
	LONG $0x1479e3c4; WORD $0x05d9             // vpextrb    ecx, xmm3, 5
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	QUAD $0x00000080249c8948                   // mov    qword [rsp + 128], rbx
	JE   LBB0_70
	LONG $0x397de3c4; WORD $0x01e3             // vextracti128    xmm3, ymm4, 1
	LONG $0x2061a3c4; WORD $0x2f1c; BYTE $0x05 // vpinsrb    xmm3, xmm3, byte [rdi + r13], 5
	LONG $0x385de3c4; WORD $0x01e3             // vinserti128    ymm4, ymm4, xmm3, 1

LBB0_70:
	WORD $0x894d; BYTE $0xda                   // mov    r10, r11
	LONG $0x16ca8349                           // or    r10, 22
	LONG $0x6b7dc1c4; BYTE $0xd8               // vpackssdw    ymm3, ymm0, ymm8
	LONG $0xd863e5c5                           // vpacksswb    ymm3, ymm3, ymm0
	LONG $0x397de3c4; WORD $0x01db             // vextracti128    xmm3, ymm3, 1
	LONG $0x1479e3c4; WORD $0x06d9             // vpextrb    ecx, xmm3, 6
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JE   LBB0_72
	LONG $0x397de3c4; WORD $0x01e3             // vextracti128    xmm3, ymm4, 1
	LONG $0x2061a3c4; WORD $0x171c; BYTE $0x06 // vpinsrb    xmm3, xmm3, byte [rdi + r10], 6
	LONG $0x385de3c4; WORD $0x01e3             // vinserti128    ymm4, ymm4, xmm3, 1

LBB0_72:
	LONG $0x7225c1c4; WORD $0x03f1             // vpslld    ymm11, ymm9, 3
	WORD $0x894c; BYTE $0xdb                   // mov    rbx, r11
	LONG $0x17cb8348                           // or    rbx, 23
	LONG $0x6b7dc1c4; BYTE $0xd8               // vpackssdw    ymm3, ymm0, ymm8
	LONG $0xd863e5c5                           // vpacksswb    ymm3, ymm3, ymm0
	LONG $0x397de3c4; WORD $0x01db             // vextracti128    xmm3, ymm3, 1
	LONG $0x1479e3c4; WORD $0x07d9             // vpextrb    ecx, xmm3, 7
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	QUAD $0x000000f0249c8948                   // mov    qword [rsp + 240], rbx
	QUAD $0x000380248c7f7dc5; BYTE $0x00       // vmovdqa    yword [rsp + 896], ymm9
	JE   LBB0_74
	LONG $0x397de3c4; WORD $0x01e3             // vextracti128    xmm3, ymm4, 1
	LONG $0x2061e3c4; WORD $0x1f1c; BYTE $0x07 // vpinsrb    xmm3, xmm3, byte [rdi + rbx], 7
	LONG $0x385de3c4; WORD $0x01e3             // vinserti128    ymm4, ymm4, xmm3, 1

LBB0_74:
	WORD $0x894c; BYTE $0xdb                   // mov    rbx, r11
	LONG $0x18cb8348                           // or    rbx, 24
	LONG $0x667d41c4; BYTE $0xcb               // vpcmpgtd    ymm9, ymm0, ymm11
	LONG $0x00fd43c4; WORD $0x44e1             // vpermq    ymm12, ymm9, 68
	LONG $0x637dc1c4; BYTE $0xdc               // vpacksswb    ymm3, ymm0, ymm12
	LONG $0x397de3c4; WORD $0x01db             // vextracti128    xmm3, ymm3, 1
	LONG $0x1479e3c4; WORD $0x08d9             // vpextrb    ecx, xmm3, 8
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	QUAD $0x000000d8249c8948                   // mov    qword [rsp + 216], rbx
	JE   LBB0_76
	LONG $0x397de3c4; WORD $0x01e3             // vextracti128    xmm3, ymm4, 1
	LONG $0x2061e3c4; WORD $0x1f1c; BYTE $0x08 // vpinsrb    xmm3, xmm3, byte [rdi + rbx], 8
	LONG $0x385de3c4; WORD $0x01e3             // vinserti128    ymm4, ymm4, xmm3, 1

LBB0_76:
	WORD $0x894c; BYTE $0xdb                   // mov    rbx, r11
	LONG $0x19cb8348                           // or    rbx, 25
	LONG $0x6679c1c4; BYTE $0xdb               // vpcmpgtd    xmm3, xmm0, xmm11
	LONG $0xdb6be1c5                           // vpackssdw    xmm3, xmm3, xmm3
	LONG $0x00fde3c4; WORD $0xd4db             // vpermq    ymm3, ymm3, 212
	LONG $0xdb63fdc5                           // vpacksswb    ymm3, ymm0, ymm3
	LONG $0x397de3c4; WORD $0x01db             // vextracti128    xmm3, ymm3, 1
	LONG $0x1479e3c4; WORD $0x09d9             // vpextrb    ecx, xmm3, 9
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	QUAD $0x000000d0249c8948                   // mov    qword [rsp + 208], rbx
	JE   LBB0_78
	LONG $0x397de3c4; WORD $0x01e3             // vextracti128    xmm3, ymm4, 1
	LONG $0x2061e3c4; WORD $0x1f1c; BYTE $0x09 // vpinsrb    xmm3, xmm3, byte [rdi + rbx], 9
	LONG $0x385de3c4; WORD $0x01e3             // vinserti128    ymm4, ymm4, xmm3, 1

LBB0_78:
	WORD $0x894c; BYTE $0xdb                   // mov    rbx, r11
	LONG $0x1acb8348                           // or    rbx, 26
	LONG $0x6679c1c4; BYTE $0xdb               // vpcmpgtd    xmm3, xmm0, xmm11
	LONG $0xdb6be1c5                           // vpackssdw    xmm3, xmm3, xmm3
	LONG $0x00fde3c4; WORD $0xd4db             // vpermq    ymm3, ymm3, 212
	LONG $0xdb63fdc5                           // vpacksswb    ymm3, ymm0, ymm3
	LONG $0x397de3c4; WORD $0x01db             // vextracti128    xmm3, ymm3, 1
	LONG $0x1479e3c4; WORD $0x0ad9             // vpextrb    ecx, xmm3, 10
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	QUAD $0x000000c8249c8948                   // mov    qword [rsp + 200], rbx
	JE   LBB0_80
	LONG $0x397de3c4; WORD $0x01e3             // vextracti128    xmm3, ymm4, 1
	LONG $0x2061e3c4; WORD $0x1f1c; BYTE $0x0a // vpinsrb    xmm3, xmm3, byte [rdi + rbx], 10
	LONG $0x385de3c4; WORD $0x01e3             // vinserti128    ymm4, ymm4, xmm3, 1

LBB0_80:
	WORD $0x894c; BYTE $0xdb                   // mov    rbx, r11
	LONG $0x1bcb8348                           // or    rbx, 27
	LONG $0x6679c1c4; BYTE $0xdb               // vpcmpgtd    xmm3, xmm0, xmm11
	LONG $0xdb6be1c5                           // vpackssdw    xmm3, xmm3, xmm3
	LONG $0x00fde3c4; WORD $0xd4db             // vpermq    ymm3, ymm3, 212
	LONG $0xdb63fdc5                           // vpacksswb    ymm3, ymm0, ymm3
	LONG $0x397de3c4; WORD $0x01db             // vextracti128    xmm3, ymm3, 1
	LONG $0x1479e3c4; WORD $0x0bd9             // vpextrb    ecx, xmm3, 11
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	QUAD $0x000000c0249c8948                   // mov    qword [rsp + 192], rbx
	QUAD $0x0000009024948948                   // mov    qword [rsp + 144], rdx
	LONG $0x24448948; BYTE $0x58               // mov    qword [rsp + 88], rax
	JE   LBB0_82
	LONG $0x397de3c4; WORD $0x01e3             // vextracti128    xmm3, ymm4, 1
	LONG $0x2061e3c4; WORD $0x1f1c; BYTE $0x0b // vpinsrb    xmm3, xmm3, byte [rdi + rbx], 11
	LONG $0x385de3c4; WORD $0x01e3             // vinserti128    ymm4, ymm4, xmm3, 1

LBB0_82:
	WORD $0x894c; BYTE $0xda                   // mov    rdx, r11
	LONG $0x1cca8348                           // or    rdx, 28
	LONG $0x6b7dc1c4; BYTE $0xd9               // vpackssdw    ymm3, ymm0, ymm9
	LONG $0xdb63fdc5                           // vpacksswb    ymm3, ymm0, ymm3
	LONG $0x397de3c4; WORD $0x01db             // vextracti128    xmm3, ymm3, 1
	LONG $0x1479e3c4; WORD $0x0cd9             // vpextrb    ecx, xmm3, 12
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JE   LBB0_84
	LONG $0x397de3c4; WORD $0x01e3             // vextracti128    xmm3, ymm4, 1
	LONG $0x2061e3c4; WORD $0x171c; BYTE $0x0c // vpinsrb    xmm3, xmm3, byte [rdi + rdx], 12
	LONG $0x385de3c4; WORD $0x01e3             // vinserti128    ymm4, ymm4, xmm3, 1

LBB0_84:
	WORD $0x894c; BYTE $0xdb                   // mov    rbx, r11
	LONG $0x1dcb8348                           // or    rbx, 29
	LONG $0x6b7dc1c4; BYTE $0xd9               // vpackssdw    ymm3, ymm0, ymm9
	LONG $0xdb63fdc5                           // vpacksswb    ymm3, ymm0, ymm3
	LONG $0x397de3c4; WORD $0x01db             // vextracti128    xmm3, ymm3, 1
	LONG $0x1479e3c4; WORD $0x0dd9             // vpextrb    ecx, xmm3, 13
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	QUAD $0x000000b0249c8948                   // mov    qword [rsp + 176], rbx
	JE   LBB0_86
	LONG $0x397de3c4; WORD $0x01e3             // vextracti128    xmm3, ymm4, 1
	LONG $0x2061e3c4; WORD $0x1f1c; BYTE $0x0d // vpinsrb    xmm3, xmm3, byte [rdi + rbx], 13
	LONG $0x385de3c4; WORD $0x01e3             // vinserti128    ymm4, ymm4, xmm3, 1

LBB0_86:
	WORD $0x894c; BYTE $0xdb                   // mov    rbx, r11
	LONG $0x1ecb8348                           // or    rbx, 30
	LONG $0x6b7dc1c4; BYTE $0xd9               // vpackssdw    ymm3, ymm0, ymm9
	LONG $0xdb63fdc5                           // vpacksswb    ymm3, ymm0, ymm3
	LONG $0x397de3c4; WORD $0x01db             // vextracti128    xmm3, ymm3, 1
	LONG $0x1479e3c4; WORD $0x0ed9             // vpextrb    ecx, xmm3, 14
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	QUAD $0x000000a8249c8948                   // mov    qword [rsp + 168], rbx
	JE   LBB0_88
	LONG $0x397de3c4; WORD $0x01e3             // vextracti128    xmm3, ymm4, 1
	LONG $0x2061e3c4; WORD $0x1f1c; BYTE $0x0e // vpinsrb    xmm3, xmm3, byte [rdi + rbx], 14
	LONG $0x385de3c4; WORD $0x01e3             // vinserti128    ymm4, ymm4, xmm3, 1

LBB0_88:
	WORD $0x894c; BYTE $0xdb                   // mov    rbx, r11
	LONG $0x1fcb8348                           // or    rbx, 31
	LONG $0x6b7dc1c4; BYTE $0xd9               // vpackssdw    ymm3, ymm0, ymm9
	LONG $0xdb63fdc5                           // vpacksswb    ymm3, ymm0, ymm3
	LONG $0x397de3c4; WORD $0x01db             // vextracti128    xmm3, ymm3, 1
	LONG $0x1479e3c4; WORD $0x0fd9             // vpextrb    ecx, xmm3, 15
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	QUAD $0x000000a0249c8948                   // mov    qword [rsp + 160], rbx
	JE   LBB0_90
	LONG $0x397de3c4; WORD $0x01e3             // vextracti128    xmm3, ymm4, 1
	LONG $0x2061e3c4; WORD $0x1f1c; BYTE $0x0f // vpinsrb    xmm3, xmm3, byte [rdi + rbx], 15
	LONG $0x385de3c4; WORD $0x01e3             // vinserti128    ymm4, ymm4, xmm3, 1

LBB0_90:
	LONG $0x357de2c4; BYTE $0xd9               // vpmovzxdq    ymm3, xmm1
	QUAD $0x000200249c7ffdc5; BYTE $0x00       // vmovdqa    yword [rsp + 512], ymm3
	QUAD $0x00000080bddb5dc5                   // vpand    ymm15, ymm4, yword 128[rbp] /* [rip + .LCPI0_4] */
	LONG $0xd966f9c5                           // vpcmpgtd    xmm3, xmm0, xmm1
	LONG $0xd97ef9c5                           // vmovd    ecx, xmm3
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JE   LBB0_92
	QUAD $0x000200249c6ffdc5; BYTE $0x00       // vmovdqa    ymm3, yword [rsp + 512]
	LONG $0x7ef9e1c4; BYTE $0xd9               // vmovq    rcx, xmm3
	LONG $0x147943c4; WORD $0x083c; BYTE $0x00 // vpextrb    byte [r8 + rcx], xmm15, 0

LBB0_92:
	LONG $0xd966f9c5                           // vpcmpgtd    xmm3, xmm0, xmm1
	LONG $0xdb6be1c5                           // vpackssdw    xmm3, xmm3, xmm3
	LONG $0xdb63e1c5                           // vpacksswb    xmm3, xmm3, xmm3
	LONG $0x1479e3c4; WORD $0x01d9             // vpextrb    ecx, xmm3, 1
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JE   LBB0_94
	QUAD $0x000200249c6ffdc5; BYTE $0x00       // vmovdqa    ymm3, yword [rsp + 512]
	LONG $0x16f9e3c4; WORD $0x01d9             // vpextrq    rcx, xmm3, 1
	LONG $0x147943c4; WORD $0x083c; BYTE $0x01 // vpextrb    byte [r8 + rcx], xmm15, 1

LBB0_94:
	LONG $0xd966f9c5                           // vpcmpgtd    xmm3, xmm0, xmm1
	LONG $0xdb6be1c5                           // vpackssdw    xmm3, xmm3, xmm3
	LONG $0xdb63e1c5                           // vpacksswb    xmm3, xmm3, xmm3
	LONG $0x1479e3c4; WORD $0x02d9             // vpextrb    ecx, xmm3, 2
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JE   LBB0_96
	QUAD $0x000200249c6ffdc5; BYTE $0x00       // vmovdqa    ymm3, yword [rsp + 512]
	LONG $0x397de3c4; WORD $0x01db             // vextracti128    xmm3, ymm3, 1
	LONG $0x7ef9e1c4; BYTE $0xd9               // vmovq    rcx, xmm3
	LONG $0x147943c4; WORD $0x083c; BYTE $0x02 // vpextrb    byte [r8 + rcx], xmm15, 2

LBB0_96:
	LONG $0xc966f9c5                           // vpcmpgtd    xmm1, xmm0, xmm1
	LONG $0xc96bf1c5                           // vpackssdw    xmm1, xmm1, xmm1
	LONG $0xc963f1c5                           // vpacksswb    xmm1, xmm1, xmm1
	LONG $0x1479e3c4; WORD $0x03c9             // vpextrb    ecx, xmm1, 3
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JE   LBB0_98
	QUAD $0x000200248c6ffdc5; BYTE $0x00       // vmovdqa    ymm1, yword [rsp + 512]
	LONG $0x397de3c4; WORD $0x01c9             // vextracti128    xmm1, ymm1, 1
	LONG $0x16f9e3c4; WORD $0x01c9             // vpextrq    rcx, xmm1, 1
	LONG $0x147943c4; WORD $0x083c; BYTE $0x03 // vpextrb    byte [r8 + rcx], xmm15, 3

LBB0_98:
	LONG $0x357dc2c4; BYTE $0xcd               // vpmovzxdq    ymm1, xmm13
	QUAD $0x0001e0248c7ffdc5; BYTE $0x00       // vmovdqa    yword [rsp + 480], ymm1
	LONG $0x01c1f641                           // test    r9b, 1
	JE   LBB0_100
	QUAD $0x0001e0248c6ffdc5; BYTE $0x00       // vmovdqa    ymm1, yword [rsp + 480]
	LONG $0x7ef9e1c4; BYTE $0xc9               // vmovq    rcx, xmm1
	LONG $0x147943c4; WORD $0x083c; BYTE $0x04 // vpextrb    byte [r8 + rcx], xmm15, 4

LBB0_100:
	LONG $0xc86bcdc5                           // vpackssdw    ymm1, ymm6, ymm0
	LONG $0x397de3c4; WORD $0x01c9             // vextracti128    xmm1, ymm1, 1
	LONG $0x5879e2c4; BYTE $0xc9               // vpbroadcastd    xmm1, xmm1
	LONG $0xc963f1c5                           // vpacksswb    xmm1, xmm1, xmm1
	LONG $0x1479e3c4; WORD $0x05c9             // vpextrb    ecx, xmm1, 5
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JE   LBB0_102
	QUAD $0x0001e0248c6ffdc5; BYTE $0x00       // vmovdqa    ymm1, yword [rsp + 480]
	LONG $0x16f9e3c4; WORD $0x01c9             // vpextrq    rcx, xmm1, 1
	LONG $0x147943c4; WORD $0x083c; BYTE $0x05 // vpextrb    byte [r8 + rcx], xmm15, 5

LBB0_102:
	LONG $0xc86bcdc5                           // vpackssdw    ymm1, ymm6, ymm0
	LONG $0x00fde3c4; WORD $0xe8c9             // vpermq    ymm1, ymm1, 232
	LONG $0xc963f1c5                           // vpacksswb    xmm1, xmm1, xmm1
	LONG $0x1479e3c4; WORD $0x06c9             // vpextrb    ecx, xmm1, 6
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JE   LBB0_104
	QUAD $0x0001e0248c6ffdc5; BYTE $0x00       // vmovdqa    ymm1, yword [rsp + 480]
	LONG $0x397de3c4; WORD $0x01c9             // vextracti128    xmm1, ymm1, 1
	LONG $0x7ef9e1c4; BYTE $0xc9               // vmovq    rcx, xmm1
	LONG $0x147943c4; WORD $0x083c; BYTE $0x06 // vpextrb    byte [r8 + rcx], xmm15, 6

LBB0_104:
	LONG $0xc86bcdc5                           // vpackssdw    ymm1, ymm6, ymm0
	LONG $0x00fde3c4; WORD $0xe8c9             // vpermq    ymm1, ymm1, 232
	LONG $0xc963f1c5                           // vpacksswb    xmm1, xmm1, xmm1
	LONG $0x1479e3c4; WORD $0x07c9             // vpextrb    ecx, xmm1, 7
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JE   LBB0_106
	QUAD $0x0001e0248c6ffdc5; BYTE $0x00       // vmovdqa    ymm1, yword [rsp + 480]
	LONG $0x397de3c4; WORD $0x01c9             // vextracti128    xmm1, ymm1, 1
	LONG $0x16f9e3c4; WORD $0x01c9             // vpextrq    rcx, xmm1, 1
	LONG $0x147943c4; WORD $0x083c; BYTE $0x07 // vpextrb    byte [r8 + rcx], xmm15, 7

LBB0_106:
	LONG $0x357de2c4; BYTE $0xca               // vpmovzxdq    ymm1, xmm2
	QUAD $0x0001c0248c7ffdc5; BYTE $0x00       // vmovdqa    yword [rsp + 448], ymm1
	LONG $0xca66f9c5                           // vpcmpgtd    xmm1, xmm0, xmm2
	LONG $0x1479e3c4; WORD $0x00c9             // vpextrb    ecx, xmm1, 0
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JE   LBB0_108
	QUAD $0x0001c0248c6ffdc5; BYTE $0x00       // vmovdqa    ymm1, yword [rsp + 448]
	LONG $0x7ef9e1c4; BYTE $0xc9               // vmovq    rcx, xmm1
	LONG $0x147943c4; WORD $0x083c; BYTE $0x08 // vpextrb    byte [r8 + rcx], xmm15, 8

LBB0_108:
	LONG $0xca66f9c5                           // vpcmpgtd    xmm1, xmm0, xmm2
	LONG $0xc96bf1c5                           // vpackssdw    xmm1, xmm1, xmm1
	LONG $0xc963f1c5                           // vpacksswb    xmm1, xmm1, xmm1
	LONG $0x1479e3c4; WORD $0x09c9             // vpextrb    ecx, xmm1, 9
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JE   LBB0_110
	QUAD $0x0001c0248c6ffdc5; BYTE $0x00       // vmovdqa    ymm1, yword [rsp + 448]
	LONG $0x16f9e3c4; WORD $0x01c9             // vpextrq    rcx, xmm1, 1
	LONG $0x147943c4; WORD $0x083c; BYTE $0x09 // vpextrb    byte [r8 + rcx], xmm15, 9

LBB0_110:
	LONG $0xca66f9c5                           // vpcmpgtd    xmm1, xmm0, xmm2
	LONG $0xc96bf1c5                           // vpackssdw    xmm1, xmm1, xmm1
	LONG $0xc963f1c5                           // vpacksswb    xmm1, xmm1, xmm1
	LONG $0x1479e3c4; WORD $0x0ac9             // vpextrb    ecx, xmm1, 10
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JE   LBB0_112
	QUAD $0x0001c0248c6ffdc5; BYTE $0x00       // vmovdqa    ymm1, yword [rsp + 448]
	LONG $0x397de3c4; WORD $0x01c9             // vextracti128    xmm1, ymm1, 1
	LONG $0x7ef9e1c4; BYTE $0xc9               // vmovq    rcx, xmm1
	LONG $0x147943c4; WORD $0x083c; BYTE $0x0a // vpextrb    byte [r8 + rcx], xmm15, 10

LBB0_112:
	LONG $0xca66f9c5                           // vpcmpgtd    xmm1, xmm0, xmm2
	LONG $0xc96bf1c5                           // vpackssdw    xmm1, xmm1, xmm1
	LONG $0xc963f1c5                           // vpacksswb    xmm1, xmm1, xmm1
	LONG $0x1479e3c4; WORD $0x0bc9             // vpextrb    ecx, xmm1, 11
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JE   LBB0_114
	QUAD $0x0001c0248c6ffdc5; BYTE $0x00       // vmovdqa    ymm1, yword [rsp + 448]
	LONG $0x397de3c4; WORD $0x01c9             // vextracti128    xmm1, ymm1, 1
	LONG $0x16f9e3c4; WORD $0x01c9             // vpextrq    rcx, xmm1, 1
	LONG $0x147943c4; WORD $0x083c; BYTE $0x0b // vpextrb    byte [r8 + rcx], xmm15, 11

LBB0_114:
	QUAD $0x0000008824b48948                   // mov    qword [rsp + 136], rsi
	LONG $0x357de2c4; BYTE $0xcd               // vpmovzxdq    ymm1, xmm5
	QUAD $0x0001a0248c7ffdc5; BYTE $0x00       // vmovdqa    yword [rsp + 416], ymm1
	LONG $0x01c6f641                           // test    r14b, 1
	JE   LBB0_116
	QUAD $0x0001a0248c6ffdc5; BYTE $0x00       // vmovdqa    ymm1, yword [rsp + 416]
	LONG $0x7ef9e1c4; BYTE $0xc9               // vmovq    rcx, xmm1
	LONG $0x147943c4; WORD $0x083c; BYTE $0x0c // vpextrb    byte [r8 + rcx], xmm15, 12

LBB0_116:
	LONG $0xc86bc5c5                           // vpackssdw    ymm1, ymm7, ymm0
	LONG $0x397de3c4; WORD $0x01c9             // vextracti128    xmm1, ymm1, 1
	LONG $0x5879e2c4; BYTE $0xc9               // vpbroadcastd    xmm1, xmm1
	LONG $0xc963f1c5                           // vpacksswb    xmm1, xmm1, xmm1
	LONG $0x1479e3c4; WORD $0x0dc9             // vpextrb    ecx, xmm1, 13
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	QUAD $0x00000098248c8b4c                   // mov    r9, qword [rsp + 152]
	QUAD $0x0000012824b48b48                   // mov    rsi, qword [rsp + 296]
	LONG $0x24748b4c; BYTE $0x68               // mov    r14, qword [rsp + 104]
	QUAD $0x0000012024848b48                   // mov    rax, qword [rsp + 288]
	JE   LBB0_118
	QUAD $0x0001a0248c6ffdc5; BYTE $0x00       // vmovdqa    ymm1, yword [rsp + 416]
	LONG $0x16f9e3c4; WORD $0x01c9             // vpextrq    rcx, xmm1, 1
	LONG $0x147943c4; WORD $0x083c; BYTE $0x0d // vpextrb    byte [r8 + rcx], xmm15, 13

LBB0_118:
	LONG $0xc86bc5c5                           // vpackssdw    ymm1, ymm7, ymm0
	LONG $0x00fde3c4; WORD $0xe8c9             // vpermq    ymm1, ymm1, 232
	LONG $0xc963f1c5                           // vpacksswb    xmm1, xmm1, xmm1
	LONG $0x1479e3c4; WORD $0x0ec9             // vpextrb    ecx, xmm1, 14
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JE   LBB0_120
	QUAD $0x0001a0248c6ffdc5; BYTE $0x00       // vmovdqa    ymm1, yword [rsp + 416]
	LONG $0x397de3c4; WORD $0x01c9             // vextracti128    xmm1, ymm1, 1
	LONG $0x7ef9e1c4; BYTE $0xc9               // vmovq    rcx, xmm1
	LONG $0x147943c4; WORD $0x083c; BYTE $0x0e // vpextrb    byte [r8 + rcx], xmm15, 14

LBB0_120:
	LONG $0xc86bc5c5                           // vpackssdw    ymm1, ymm7, ymm0
	LONG $0x00fde3c4; WORD $0xe8c9             // vpermq    ymm1, ymm1, 232
	LONG $0xc963f1c5                           // vpacksswb    xmm1, xmm1, xmm1
	LONG $0x1479e3c4; WORD $0x0fc9             // vpextrb    ecx, xmm1, 15
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JE   LBB0_122
	QUAD $0x0001a0248c6ffdc5; BYTE $0x00       // vmovdqa    ymm1, yword [rsp + 416]
	LONG $0x397de3c4; WORD $0x01c9             // vextracti128    xmm1, ymm1, 1
	LONG $0x16f9e3c4; WORD $0x01c9             // vpextrq    rcx, xmm1, 1
	LONG $0x147943c4; WORD $0x083c; BYTE $0x0f // vpextrb    byte [r8 + rcx], xmm15, 15

LBB0_122:
	LONG $0x357dc2c4; BYTE $0xca               // vpmovzxdq    ymm1, xmm10
	QUAD $0x000180248c7ffdc5; BYTE $0x00       // vmovdqa    yword [rsp + 384], ymm1
	LONG $0x6679c1c4; BYTE $0xca               // vpcmpgtd    xmm1, xmm0, xmm10
	LONG $0xc97ef9c5                           // vmovd    ecx, xmm1
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JE   LBB0_124
	QUAD $0x000180248c6ffdc5; BYTE $0x00       // vmovdqa    ymm1, yword [rsp + 384]
	LONG $0x7ef9e1c4; BYTE $0xc9               // vmovq    rcx, xmm1
	LONG $0x397d63c4; WORD $0x01f9             // vextracti128    xmm1, ymm15, 1
	LONG $0x1479c3c4; WORD $0x080c; BYTE $0x00 // vpextrb    byte [r8 + rcx], xmm1, 0

LBB0_124:
	LONG $0x6679c1c4; BYTE $0xca               // vpcmpgtd    xmm1, xmm0, xmm10
	LONG $0xc96bf1c5                           // vpackssdw    xmm1, xmm1, xmm1
	LONG $0x00fde3c4; WORD $0xd4c9             // vpermq    ymm1, ymm1, 212
	LONG $0xc863f5c5                           // vpacksswb    ymm1, ymm1, ymm0
	LONG $0x397de3c4; WORD $0x01c9             // vextracti128    xmm1, ymm1, 1
	LONG $0x1479e3c4; WORD $0x01c9             // vpextrb    ecx, xmm1, 1
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JE   LBB0_126
	QUAD $0x000180248c6ffdc5; BYTE $0x00       // vmovdqa    ymm1, yword [rsp + 384]
	LONG $0x16f9e3c4; WORD $0x01c9             // vpextrq    rcx, xmm1, 1
	LONG $0x397d63c4; WORD $0x01f9             // vextracti128    xmm1, ymm15, 1
	LONG $0x1479c3c4; WORD $0x080c; BYTE $0x01 // vpextrb    byte [r8 + rcx], xmm1, 1

LBB0_126:
	LONG $0x6679c1c4; BYTE $0xca               // vpcmpgtd    xmm1, xmm0, xmm10
	LONG $0xc96bf1c5                           // vpackssdw    xmm1, xmm1, xmm1
	LONG $0x00fde3c4; WORD $0xd4c9             // vpermq    ymm1, ymm1, 212
	LONG $0xc863f5c5                           // vpacksswb    ymm1, ymm1, ymm0
	LONG $0x397de3c4; WORD $0x01c9             // vextracti128    xmm1, ymm1, 1
	LONG $0x1479e3c4; WORD $0x02c9             // vpextrb    ecx, xmm1, 2
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JE   LBB0_128
	QUAD $0x000180248c6ffdc5; BYTE $0x00       // vmovdqa    ymm1, yword [rsp + 384]
	LONG $0x397de3c4; WORD $0x01c9             // vextracti128    xmm1, ymm1, 1
	LONG $0x7ef9e1c4; BYTE $0xc9               // vmovq    rcx, xmm1
	LONG $0x397d63c4; WORD $0x01f9             // vextracti128    xmm1, ymm15, 1
	LONG $0x1479c3c4; WORD $0x080c; BYTE $0x02 // vpextrb    byte [r8 + rcx], xmm1, 2

LBB0_128:
	LONG $0x397d63c4; WORD $0x01d1             // vextracti128    xmm1, ymm10, 1
	LONG $0x6679c1c4; BYTE $0xd2               // vpcmpgtd    xmm2, xmm0, xmm10
	LONG $0xd26be9c5                           // vpackssdw    xmm2, xmm2, xmm2
	LONG $0x00fde3c4; WORD $0xd4d2             // vpermq    ymm2, ymm2, 212
	LONG $0xd063edc5                           // vpacksswb    ymm2, ymm2, ymm0
	LONG $0x397de3c4; WORD $0x01d2             // vextracti128    xmm2, ymm2, 1
	LONG $0x1479e3c4; WORD $0x03d1             // vpextrb    ecx, xmm2, 3
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JE   LBB0_130
	QUAD $0x00018024946ffdc5; BYTE $0x00       // vmovdqa    ymm2, yword [rsp + 384]
	LONG $0x397de3c4; WORD $0x01d2             // vextracti128    xmm2, ymm2, 1
	LONG $0x16f9e3c4; WORD $0x01d1             // vpextrq    rcx, xmm2, 1
	LONG $0x397d63c4; WORD $0x01fa             // vextracti128    xmm2, ymm15, 1
	LONG $0x1479c3c4; WORD $0x0814; BYTE $0x03 // vpextrb    byte [r8 + rcx], xmm2, 3

LBB0_130:
	LONG $0x357de2c4; BYTE $0xc9               // vpmovzxdq    ymm1, xmm1
	QUAD $0x000160248c7ffdc5; BYTE $0x00       // vmovdqa    yword [rsp + 352], ymm1
	LONG $0x6b7dc1c4; BYTE $0xc8               // vpackssdw    ymm1, ymm0, ymm8
	LONG $0xc863f5c5                           // vpacksswb    ymm1, ymm1, ymm0
	LONG $0x397de3c4; WORD $0x01c9             // vextracti128    xmm1, ymm1, 1
	LONG $0x1479e3c4; WORD $0x04c9             // vpextrb    ecx, xmm1, 4
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JE   LBB0_132
	QUAD $0x000160248c6ffdc5; BYTE $0x00       // vmovdqa    ymm1, yword [rsp + 352]
	LONG $0x7ef9e1c4; BYTE $0xc9               // vmovq    rcx, xmm1
	LONG $0x397d63c4; WORD $0x01f9             // vextracti128    xmm1, ymm15, 1
	LONG $0x1479c3c4; WORD $0x080c; BYTE $0x04 // vpextrb    byte [r8 + rcx], xmm1, 4

LBB0_132:
	LONG $0x6b7dc1c4; BYTE $0xc8               // vpackssdw    ymm1, ymm0, ymm8
	LONG $0xc863f5c5                           // vpacksswb    ymm1, ymm1, ymm0
	LONG $0x397de3c4; WORD $0x01c9             // vextracti128    xmm1, ymm1, 1
	LONG $0x1479e3c4; WORD $0x05c9             // vpextrb    ecx, xmm1, 5
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JE   LBB0_134
	QUAD $0x000160248c6ffdc5; BYTE $0x00       // vmovdqa    ymm1, yword [rsp + 352]
	LONG $0x16f9e3c4; WORD $0x01c9             // vpextrq    rcx, xmm1, 1
	LONG $0x397d63c4; WORD $0x01f9             // vextracti128    xmm1, ymm15, 1
	LONG $0x1479c3c4; WORD $0x080c; BYTE $0x05 // vpextrb    byte [r8 + rcx], xmm1, 5

LBB0_134:
	LONG $0x6b7dc1c4; BYTE $0xc8               // vpackssdw    ymm1, ymm0, ymm8
	LONG $0xc863f5c5                           // vpacksswb    ymm1, ymm1, ymm0
	LONG $0x397de3c4; WORD $0x01c9             // vextracti128    xmm1, ymm1, 1
	LONG $0x1479e3c4; WORD $0x06c9             // vpextrb    ecx, xmm1, 6
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JE   LBB0_136
	QUAD $0x000160248c6ffdc5; BYTE $0x00       // vmovdqa    ymm1, yword [rsp + 352]
	LONG $0x397de3c4; WORD $0x01c9             // vextracti128    xmm1, ymm1, 1
	LONG $0x7ef9e1c4; BYTE $0xc9               // vmovq    rcx, xmm1
	LONG $0x397d63c4; WORD $0x01f9             // vextracti128    xmm1, ymm15, 1
	LONG $0x1479c3c4; WORD $0x080c; BYTE $0x06 // vpextrb    byte [r8 + rcx], xmm1, 6

LBB0_136:
	LONG $0x6b7dc1c4; BYTE $0xc8               // vpackssdw    ymm1, ymm0, ymm8
	LONG $0xc863f5c5                           // vpacksswb    ymm1, ymm1, ymm0
	LONG $0x397de3c4; WORD $0x01c9             // vextracti128    xmm1, ymm1, 1
	LONG $0x1479e3c4; WORD $0x07c9             // vpextrb    ecx, xmm1, 7
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JE   LBB0_138
	QUAD $0x000160248c6ffdc5; BYTE $0x00       // vmovdqa    ymm1, yword [rsp + 352]
	LONG $0x397de3c4; WORD $0x01c9             // vextracti128    xmm1, ymm1, 1
	LONG $0x16f9e3c4; WORD $0x01c9             // vpextrq    rcx, xmm1, 1
	LONG $0x397d63c4; WORD $0x01f9             // vextracti128    xmm1, ymm15, 1
	LONG $0x1479c3c4; WORD $0x080c; BYTE $0x07 // vpextrb    byte [r8 + rcx], xmm1, 7

LBB0_138:
	LONG $0x357dc2c4; BYTE $0xcb               // vpmovzxdq    ymm1, xmm11
	QUAD $0x000140248c7ffdc5; BYTE $0x00       // vmovdqa    yword [rsp + 320], ymm1
	LONG $0x637dc1c4; BYTE $0xcc               // vpacksswb    ymm1, ymm0, ymm12
	LONG $0x397de3c4; WORD $0x01c9             // vextracti128    xmm1, ymm1, 1
	LONG $0x1479e3c4; WORD $0x08c9             // vpextrb    ecx, xmm1, 8
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JE   LBB0_140
	QUAD $0x000140248c6ffdc5; BYTE $0x00       // vmovdqa    ymm1, yword [rsp + 320]
	LONG $0x7ef9e1c4; BYTE $0xc9               // vmovq    rcx, xmm1
	LONG $0x397d63c4; WORD $0x01f9             // vextracti128    xmm1, ymm15, 1
	LONG $0x1479c3c4; WORD $0x080c; BYTE $0x08 // vpextrb    byte [r8 + rcx], xmm1, 8

LBB0_140:
	LONG $0x6679c1c4; BYTE $0xcb               // vpcmpgtd    xmm1, xmm0, xmm11
	LONG $0xc96bf1c5                           // vpackssdw    xmm1, xmm1, xmm1
	LONG $0x00fde3c4; WORD $0xd4c9             // vpermq    ymm1, ymm1, 212
	LONG $0xc963fdc5                           // vpacksswb    ymm1, ymm0, ymm1
	LONG $0x397de3c4; WORD $0x01c9             // vextracti128    xmm1, ymm1, 1
	LONG $0x1479e3c4; WORD $0x09c9             // vpextrb    ecx, xmm1, 9
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JE   LBB0_142
	QUAD $0x000140248c6ffdc5; BYTE $0x00       // vmovdqa    ymm1, yword [rsp + 320]
	LONG $0x16f9e3c4; WORD $0x01c9             // vpextrq    rcx, xmm1, 1
	LONG $0x397d63c4; WORD $0x01f9             // vextracti128    xmm1, ymm15, 1
	LONG $0x1479c3c4; WORD $0x080c; BYTE $0x09 // vpextrb    byte [r8 + rcx], xmm1, 9

LBB0_142:
	LONG $0x6679c1c4; BYTE $0xcb               // vpcmpgtd    xmm1, xmm0, xmm11
	LONG $0xc96bf1c5                           // vpackssdw    xmm1, xmm1, xmm1
	LONG $0x00fde3c4; WORD $0xd4c9             // vpermq    ymm1, ymm1, 212
	LONG $0xc963fdc5                           // vpacksswb    ymm1, ymm0, ymm1
	LONG $0x397de3c4; WORD $0x01c9             // vextracti128    xmm1, ymm1, 1
	LONG $0x1479e3c4; WORD $0x0ac9             // vpextrb    ecx, xmm1, 10
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JE   LBB0_144
	QUAD $0x000140248c6ffdc5; BYTE $0x00       // vmovdqa    ymm1, yword [rsp + 320]
	LONG $0x397de3c4; WORD $0x01c9             // vextracti128    xmm1, ymm1, 1
	LONG $0x7ef9e1c4; BYTE $0xc9               // vmovq    rcx, xmm1
	LONG $0x397d63c4; WORD $0x01f9             // vextracti128    xmm1, ymm15, 1
	LONG $0x1479c3c4; WORD $0x080c; BYTE $0x0a // vpextrb    byte [r8 + rcx], xmm1, 10

LBB0_144:
	LONG $0x397d63c4; WORD $0x01d9             // vextracti128    xmm1, ymm11, 1
	LONG $0x6679c1c4; BYTE $0xe3               // vpcmpgtd    xmm4, xmm0, xmm11
	LONG $0xe46bd9c5                           // vpackssdw    xmm4, xmm4, xmm4
	LONG $0x00fde3c4; WORD $0xd4e4             // vpermq    ymm4, ymm4, 212
	LONG $0xe463fdc5                           // vpacksswb    ymm4, ymm0, ymm4
	LONG $0x397de3c4; WORD $0x01e4             // vextracti128    xmm4, ymm4, 1
	LONG $0x1479e3c4; WORD $0x0be1             // vpextrb    ecx, xmm4, 11
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JE   LBB0_146
	QUAD $0x00014024946ffdc5; BYTE $0x00       // vmovdqa    ymm2, yword [rsp + 320]
	LONG $0x397de3c4; WORD $0x01d4             // vextracti128    xmm4, ymm2, 1
	LONG $0x16f9e3c4; WORD $0x01e1             // vpextrq    rcx, xmm4, 1
	LONG $0x397d63c4; WORD $0x01fc             // vextracti128    xmm4, ymm15, 1
	LONG $0x1479c3c4; WORD $0x0824; BYTE $0x0b // vpextrb    byte [r8 + rcx], xmm4, 11

LBB0_146:
	LONG $0x357de2c4; BYTE $0xe1               // vpmovzxdq    ymm4, xmm1
	LONG $0x6b7dc1c4; BYTE $0xc9               // vpackssdw    ymm1, ymm0, ymm9
	LONG $0xc963fdc5                           // vpacksswb    ymm1, ymm0, ymm1
	LONG $0x397de3c4; WORD $0x01c9             // vextracti128    xmm1, ymm1, 1
	LONG $0x1479e3c4; WORD $0x0cc9             // vpextrb    ecx, xmm1, 12
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JE   LBB0_148
	LONG $0x7ef9e1c4; BYTE $0xe1               // vmovq    rcx, xmm4
	LONG $0x397d63c4; WORD $0x01f9             // vextracti128    xmm1, ymm15, 1
	LONG $0x1479c3c4; WORD $0x080c; BYTE $0x0c // vpextrb    byte [r8 + rcx], xmm1, 12

LBB0_148:
	LONG $0x6b7dc1c4; BYTE $0xc9               // vpackssdw    ymm1, ymm0, ymm9
	LONG $0xc963fdc5                           // vpacksswb    ymm1, ymm0, ymm1
	LONG $0x397de3c4; WORD $0x01c9             // vextracti128    xmm1, ymm1, 1
	LONG $0x1479e3c4; WORD $0x0dc9             // vpextrb    ecx, xmm1, 13
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JE   LBB0_150
	LONG $0x16f9e3c4; WORD $0x01e1             // vpextrq    rcx, xmm4, 1
	LONG $0x397d63c4; WORD $0x01f9             // vextracti128    xmm1, ymm15, 1
	LONG $0x1479c3c4; WORD $0x080c; BYTE $0x0d // vpextrb    byte [r8 + rcx], xmm1, 13

LBB0_150:
	LONG $0x6b7dc1c4; BYTE $0xc9               // vpackssdw    ymm1, ymm0, ymm9
	LONG $0xc963fdc5                           // vpacksswb    ymm1, ymm0, ymm1
	LONG $0x397de3c4; WORD $0x01c9             // vextracti128    xmm1, ymm1, 1
	LONG $0x1479e3c4; WORD $0x0ec9             // vpextrb    ecx, xmm1, 14
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JE   LBB0_152
	LONG $0x397de3c4; WORD $0x01e1             // vextracti128    xmm1, ymm4, 1
	LONG $0x7ef9e1c4; BYTE $0xc9               // vmovq    rcx, xmm1
	LONG $0x397d63c4; WORD $0x01f9             // vextracti128    xmm1, ymm15, 1
	LONG $0x1479c3c4; WORD $0x080c; BYTE $0x0e // vpextrb    byte [r8 + rcx], xmm1, 14

LBB0_152:
	LONG $0x6b7dc1c4; BYTE $0xc9               // vpackssdw    ymm1, ymm0, ymm9
	LONG $0xc963fdc5                           // vpacksswb    ymm1, ymm0, ymm1
	LONG $0x397de3c4; WORD $0x01c9             // vextracti128    xmm1, ymm1, 1
	LONG $0x1479e3c4; WORD $0x0fc9             // vpextrb    ecx, xmm1, 15
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JE   LBB0_154
	LONG $0x397de3c4; WORD $0x01e1             // vextracti128    xmm1, ymm4, 1
	LONG $0x16f9e3c4; WORD $0x01c9             // vpextrq    rcx, xmm1, 1
	LONG $0x397d63c4; WORD $0x01f9             // vextracti128    xmm1, ymm15, 1
	LONG $0x1479c3c4; WORD $0x080c; BYTE $0x0f // vpextrb    byte [r8 + rcx], xmm1, 15

LBB0_154:
	LONG $0x6b4dc1c4; BYTE $0xc8         // vpackssdw    ymm1, ymm6, ymm8
	LONG $0x00fde3c4; WORD $0xd8c9       // vpermq    ymm1, ymm1, 216
	LONG $0x6b45c1c4; BYTE $0xe9         // vpackssdw    ymm5, ymm7, ymm9
	LONG $0x00fde3c4; WORD $0xd8ed       // vpermq    ymm5, ymm5, 216
	LONG $0xcd63f5c5                     // vpacksswb    ymm1, ymm1, ymm5
	QUAD $0x00030024946ffdc5; BYTE $0x00 // vmovdqa    ymm2, yword [rsp + 768]
	QUAD $0x00020024bceb6dc5; BYTE $0x00 // vpor    ymm15, ymm2, yword [rsp + 512]
	QUAD $0x0001e024acebedc5; BYTE $0x00 // vpor    ymm5, ymm2, yword [rsp + 480]
	QUAD $0x0001802494eb6dc5; BYTE $0x00 // vpor    ymm10, ymm2, yword [rsp + 384]
	QUAD $0x000160248ceb6dc5; BYTE $0x00 // vpor    ymm9, ymm2, yword [rsp + 352]
	QUAD $0x0001c024a4eb6dc5; BYTE $0x00 // vpor    ymm12, ymm2, yword [rsp + 448]
	QUAD $0x0001a0249ceb6dc5; BYTE $0x00 // vpor    ymm11, ymm2, yword [rsp + 416]
	QUAD $0x0001402484eb6dc5; BYTE $0x00 // vpor    ymm8, ymm2, yword [rsp + 320]
	LONG $0xfaebddc5                     // vpor    ymm7, ymm4, ymm2
	LONG $0x463de3c4; WORD $0x31f7       // vperm2i128    ymm6, ymm8, ymm7, 49
	LONG $0x383d63c4; WORD $0x01ef       // vinserti128    ymm13, ymm8, xmm7, 1
	LONG $0xf6c694c5; BYTE $0x88         // vshufps    ymm6, ymm13, ymm6, 136
	LONG $0x461d43c4; WORD $0x31eb       // vperm2i128    ymm13, ymm12, ymm11, 49
	LONG $0x381d43c4; WORD $0x01f3       // vinserti128    ymm14, ymm12, xmm11, 1
	LONG $0xc60c41c4; WORD $0x88ed       // vshufps    ymm13, ymm14, ymm13, 136
	LONG $0x462d43c4; WORD $0x31f1       // vperm2i128    ymm14, ymm10, ymm9, 49
	LONG $0x382dc3c4; WORD $0x01d1       // vinserti128    ymm2, ymm10, xmm9, 1
	LONG $0xc66cc1c4; WORD $0x88d6       // vshufps    ymm2, ymm2, ymm14, 136
	LONG $0x460563c4; WORD $0x31f5       // vperm2i128    ymm14, ymm15, ymm5, 49
	LONG $0x3805e3c4; WORD $0x01dd       // vinserti128    ymm3, ymm15, xmm5, 1
	LONG $0xc664c1c4; WORD $0x88de       // vshufps    ymm3, ymm3, ymm14, 136
	LONG $0xdb66fdc5                     // vpcmpgtd    ymm3, ymm0, ymm3
	LONG $0xd266fdc5                     // vpcmpgtd    ymm2, ymm0, ymm2
	LONG $0xd26be5c5                     // vpackssdw    ymm2, ymm3, ymm2
	LONG $0x667dc1c4; BYTE $0xdd         // vpcmpgtd    ymm3, ymm0, ymm13
	LONG $0xf666fdc5                     // vpcmpgtd    ymm6, ymm0, ymm6
	LONG $0xde6be5c5                     // vpackssdw    ymm3, ymm3, ymm6
	LONG $0x00fde3c4; WORD $0xd8d2       // vpermq    ymm2, ymm2, 216
	LONG $0x00fde3c4; WORD $0xd8db       // vpermq    ymm3, ymm3, 216
	LONG $0xd363edc5                     // vpacksswb    ymm2, ymm2, ymm3
	LONG $0xf1dbedc5                     // vpand    ymm6, ymm2, ymm1
	LONG $0xf17ef9c5                     // vmovd    ecx, xmm6
	WORD $0xc1f6; BYTE $0x01             // test    cl, 1
	JE   LBB0_155
	LONG $0x787d22c4; WORD $0x1f34       // vpbroadcastb    ymm14, byte [rdi + r11]
	LONG $0x1479e3c4; WORD $0x01f1       // vpextrb    ecx, xmm6, 1
	WORD $0xc1f6; BYTE $0x01             // test    cl, 1
	JNE  LBB0_661

LBB0_156:
	QUAD $0x000000e0249c8b48       // mov    rbx, qword [rsp + 224]
	LONG $0x1479e3c4; WORD $0x02f1 // vpextrb    ecx, xmm6, 2
	WORD $0xc1f6; BYTE $0x01       // test    cl, 1
	JE   LBB0_157

LBB0_662:
	LONG $0x2009e3c4; WORD $0x370c; BYTE $0x02 // vpinsrb    xmm1, xmm14, byte [rdi + rsi], 2
	LONG $0x020d63c4; WORD $0x0ff1             // vpblendd    ymm14, ymm14, ymm1, 15
	LONG $0x1479e3c4; WORD $0x03f1             // vpextrb    ecx, xmm6, 3
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JNE  LBB0_663

LBB0_158:
	LONG $0x1479e3c4; WORD $0x04f1 // vpextrb    ecx, xmm6, 4
	WORD $0xc1f6; BYTE $0x01       // test    cl, 1
	JE   LBB0_159

LBB0_664:
	QUAD $0x00000108248c8b48                   // mov    rcx, qword [rsp + 264]
	LONG $0x2009e3c4; WORD $0x0f0c; BYTE $0x04 // vpinsrb    xmm1, xmm14, byte [rdi + rcx], 4
	LONG $0x020d63c4; WORD $0x0ff1             // vpblendd    ymm14, ymm14, ymm1, 15
	LONG $0x1479e3c4; WORD $0x05f1             // vpextrb    ecx, xmm6, 5
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JNE  LBB0_665

LBB0_160:
	QUAD $0x000000e824b48b48       // mov    rsi, qword [rsp + 232]
	LONG $0x1479e3c4; WORD $0x06f1 // vpextrb    ecx, xmm6, 6
	WORD $0xc1f6; BYTE $0x01       // test    cl, 1
	JE   LBB0_161

LBB0_666:
	LONG $0x2009e3c4; WORD $0x070c; BYTE $0x06 // vpinsrb    xmm1, xmm14, byte [rdi + rax], 6
	LONG $0x020d63c4; WORD $0x0ff1             // vpblendd    ymm14, ymm14, ymm1, 15
	LONG $0x1479e3c4; WORD $0x07f1             // vpextrb    ecx, xmm6, 7
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JNE  LBB0_667

LBB0_162:
	LONG $0x1479e3c4; WORD $0x08f1 // vpextrb    ecx, xmm6, 8
	WORD $0xc1f6; BYTE $0x01       // test    cl, 1
	JE   LBB0_163

LBB0_668:
	LONG $0x24448b48; BYTE $0x60               // mov    rax, qword [rsp + 96]
	LONG $0x2009e3c4; WORD $0x070c; BYTE $0x08 // vpinsrb    xmm1, xmm14, byte [rdi + rax], 8
	LONG $0x020d63c4; WORD $0x0ff1             // vpblendd    ymm14, ymm14, ymm1, 15
	LONG $0x1479e3c4; WORD $0x09f1             // vpextrb    ecx, xmm6, 9
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JNE  LBB0_669

LBB0_164:
	LONG $0x1479e3c4; WORD $0x0af1 // vpextrb    ecx, xmm6, 10
	WORD $0xc1f6; BYTE $0x01       // test    cl, 1
	JE   LBB0_165

LBB0_670:
	QUAD $0x0000009024848b48                   // mov    rax, qword [rsp + 144]
	LONG $0x2009e3c4; WORD $0x070c; BYTE $0x0a // vpinsrb    xmm1, xmm14, byte [rdi + rax], 10
	LONG $0x020d63c4; WORD $0x0ff1             // vpblendd    ymm14, ymm14, ymm1, 15
	LONG $0x1479e3c4; WORD $0x0bf1             // vpextrb    ecx, xmm6, 11
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JNE  LBB0_671

LBB0_166:
	LONG $0x1479e3c4; WORD $0x0cf1 // vpextrb    ecx, xmm6, 12
	WORD $0xc1f6; BYTE $0x01       // test    cl, 1
	JE   LBB0_167

LBB0_672:
	QUAD $0x000000f824848b48                   // mov    rax, qword [rsp + 248]
	LONG $0x2009e3c4; WORD $0x070c; BYTE $0x0c // vpinsrb    xmm1, xmm14, byte [rdi + rax], 12
	LONG $0x020d63c4; WORD $0x0ff1             // vpblendd    ymm14, ymm14, ymm1, 15
	LONG $0x1479e3c4; WORD $0x0df1             // vpextrb    ecx, xmm6, 13
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JNE  LBB0_673

LBB0_168:
	LONG $0x1479e3c4; WORD $0x0ef1 // vpextrb    ecx, xmm6, 14
	WORD $0xc1f6; BYTE $0x01       // test    cl, 1
	JE   LBB0_169

LBB0_674:
	LONG $0x24448b48; BYTE $0x50               // mov    rax, qword [rsp + 80]
	LONG $0x2009e3c4; WORD $0x070c; BYTE $0x0e // vpinsrb    xmm1, xmm14, byte [rdi + rax], 14
	LONG $0x020d63c4; WORD $0x0ff1             // vpblendd    ymm14, ymm14, ymm1, 15
	LONG $0x1479e3c4; WORD $0x0ff1             // vpextrb    ecx, xmm6, 15
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JNE  LBB0_170
	JMP  LBB0_171

LBB0_155:
	LONG $0x1479e3c4; WORD $0x01f1 // vpextrb    ecx, xmm6, 1
	WORD $0xc1f6; BYTE $0x01       // test    cl, 1
	JE   LBB0_156

LBB0_661:
	LONG $0x2009a3c4; WORD $0x0f0c; BYTE $0x01 // vpinsrb    xmm1, xmm14, byte [rdi + r9], 1
	LONG $0x020d63c4; WORD $0x0ff1             // vpblendd    ymm14, ymm14, ymm1, 15
	QUAD $0x000000e0249c8b48                   // mov    rbx, qword [rsp + 224]
	LONG $0x1479e3c4; WORD $0x02f1             // vpextrb    ecx, xmm6, 2
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JNE  LBB0_662

LBB0_157:
	LONG $0x1479e3c4; WORD $0x03f1 // vpextrb    ecx, xmm6, 3
	WORD $0xc1f6; BYTE $0x01       // test    cl, 1
	JE   LBB0_158

LBB0_663:
	QUAD $0x00000110248c8b48                   // mov    rcx, qword [rsp + 272]
	LONG $0x2009e3c4; WORD $0x0f0c; BYTE $0x03 // vpinsrb    xmm1, xmm14, byte [rdi + rcx], 3
	LONG $0x020d63c4; WORD $0x0ff1             // vpblendd    ymm14, ymm14, ymm1, 15
	LONG $0x1479e3c4; WORD $0x04f1             // vpextrb    ecx, xmm6, 4
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JNE  LBB0_664

LBB0_159:
	LONG $0x1479e3c4; WORD $0x05f1 // vpextrb    ecx, xmm6, 5
	WORD $0xc1f6; BYTE $0x01       // test    cl, 1
	JE   LBB0_160

LBB0_665:
	LONG $0x2009a3c4; WORD $0x370c; BYTE $0x05 // vpinsrb    xmm1, xmm14, byte [rdi + r14], 5
	LONG $0x020d63c4; WORD $0x0ff1             // vpblendd    ymm14, ymm14, ymm1, 15
	QUAD $0x000000e824b48b48                   // mov    rsi, qword [rsp + 232]
	LONG $0x1479e3c4; WORD $0x06f1             // vpextrb    ecx, xmm6, 6
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JNE  LBB0_666

LBB0_161:
	LONG $0x1479e3c4; WORD $0x07f1 // vpextrb    ecx, xmm6, 7
	WORD $0xc1f6; BYTE $0x01       // test    cl, 1
	JE   LBB0_162

LBB0_667:
	LONG $0x2009e3c4; WORD $0x370c; BYTE $0x07 // vpinsrb    xmm1, xmm14, byte [rdi + rsi], 7
	LONG $0x020d63c4; WORD $0x0ff1             // vpblendd    ymm14, ymm14, ymm1, 15
	LONG $0x1479e3c4; WORD $0x08f1             // vpextrb    ecx, xmm6, 8
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JNE  LBB0_668

LBB0_163:
	LONG $0x1479e3c4; WORD $0x09f1 // vpextrb    ecx, xmm6, 9
	WORD $0xc1f6; BYTE $0x01       // test    cl, 1
	JE   LBB0_164

LBB0_669:
	LONG $0x2009e3c4; WORD $0x1f0c; BYTE $0x09 // vpinsrb    xmm1, xmm14, byte [rdi + rbx], 9
	LONG $0x020d63c4; WORD $0x0ff1             // vpblendd    ymm14, ymm14, ymm1, 15
	LONG $0x1479e3c4; WORD $0x0af1             // vpextrb    ecx, xmm6, 10
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JNE  LBB0_670

LBB0_165:
	LONG $0x1479e3c4; WORD $0x0bf1 // vpextrb    ecx, xmm6, 11
	WORD $0xc1f6; BYTE $0x01       // test    cl, 1
	JE   LBB0_166

LBB0_671:
	QUAD $0x0000010024848b48                   // mov    rax, qword [rsp + 256]
	LONG $0x2009e3c4; WORD $0x070c; BYTE $0x0b // vpinsrb    xmm1, xmm14, byte [rdi + rax], 11
	LONG $0x020d63c4; WORD $0x0ff1             // vpblendd    ymm14, ymm14, ymm1, 15
	LONG $0x1479e3c4; WORD $0x0cf1             // vpextrb    ecx, xmm6, 12
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JNE  LBB0_672

LBB0_167:
	LONG $0x1479e3c4; WORD $0x0df1 // vpextrb    ecx, xmm6, 13
	WORD $0xc1f6; BYTE $0x01       // test    cl, 1
	JE   LBB0_168

LBB0_673:
	LONG $0x24448b48; BYTE $0x58               // mov    rax, qword [rsp + 88]
	LONG $0x2009e3c4; WORD $0x070c; BYTE $0x0d // vpinsrb    xmm1, xmm14, byte [rdi + rax], 13
	LONG $0x020d63c4; WORD $0x0ff1             // vpblendd    ymm14, ymm14, ymm1, 15
	LONG $0x1479e3c4; WORD $0x0ef1             // vpextrb    ecx, xmm6, 14
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JNE  LBB0_674

LBB0_169:
	LONG $0x1479e3c4; WORD $0x0ff1 // vpextrb    ecx, xmm6, 15
	WORD $0xc1f6; BYTE $0x01       // test    cl, 1
	JE   LBB0_171

LBB0_170:
	LONG $0x24448b48; BYTE $0x48               // mov    rax, qword [rsp + 72]
	LONG $0x2009e3c4; WORD $0x070c; BYTE $0x0f // vpinsrb    xmm1, xmm14, byte [rdi + rax], 15
	LONG $0x020d63c4; WORD $0x0ff1             // vpblendd    ymm14, ymm14, ymm1, 15

LBB0_171:
	QUAD $0x000000d0248c8b48                   // mov    rcx, qword [rsp + 208]
	LONG $0x397dc3c4; WORD $0x01f5             // vextracti128    xmm13, ymm6, 1
	LONG $0xe87e79c5                           // vmovd    eax, xmm13
	LONG $0x2c244489                           // mov    dword [rsp + 44], eax
	WORD $0x01a8                               // test    al, 1
	JE   LBB0_172
	LONG $0x397d63c4; WORD $0x01f1             // vextracti128    xmm1, ymm14, 1
	LONG $0x24448b48; BYTE $0x40               // mov    rax, qword [rsp + 64]
	LONG $0x2071e3c4; WORD $0x070c; BYTE $0x00 // vpinsrb    xmm1, xmm1, byte [rdi + rax], 0
	LONG $0x380d63c4; WORD $0x01f1             // vinserti128    ymm14, ymm14, xmm1, 1
	LONG $0x147963c4; WORD $0x01e8             // vpextrb    eax, xmm13, 1
	LONG $0x28244489                           // mov    dword [rsp + 40], eax
	WORD $0x01a8                               // test    al, 1
	JNE  LBB0_676

LBB0_173:
	LONG $0x147963c4; WORD $0x02e8 // vpextrb    eax, xmm13, 2
	LONG $0x24244489               // mov    dword [rsp + 36], eax
	WORD $0x01a8                   // test    al, 1
	JE   LBB0_174

LBB0_677:
	LONG $0x397d63c4; WORD $0x01f1             // vextracti128    xmm1, ymm14, 1
	QUAD $0x0000008024848b48                   // mov    rax, qword [rsp + 128]
	LONG $0x2071e3c4; WORD $0x070c; BYTE $0x02 // vpinsrb    xmm1, xmm1, byte [rdi + rax], 2
	LONG $0x380d63c4; WORD $0x01f1             // vinserti128    ymm14, ymm14, xmm1, 1
	LONG $0x147963c4; WORD $0x03e8             // vpextrb    eax, xmm13, 3
	LONG $0x20244489                           // mov    dword [rsp + 32], eax
	WORD $0x01a8                               // test    al, 1
	JNE  LBB0_678

LBB0_175:
	LONG $0x147963c4; WORD $0x04e8 // vpextrb    eax, xmm13, 4
	LONG $0x1c244489               // mov    dword [rsp + 28], eax
	WORD $0x01a8                   // test    al, 1
	JE   LBB0_176

LBB0_679:
	LONG $0x397d63c4; WORD $0x01f1             // vextracti128    xmm1, ymm14, 1
	LONG $0x24448b48; BYTE $0x38               // mov    rax, qword [rsp + 56]
	LONG $0x2071e3c4; WORD $0x070c; BYTE $0x04 // vpinsrb    xmm1, xmm1, byte [rdi + rax], 4
	LONG $0x380d63c4; WORD $0x01f1             // vinserti128    ymm14, ymm14, xmm1, 1
	LONG $0x147963c4; WORD $0x05e8             // vpextrb    eax, xmm13, 5
	LONG $0x18244489                           // mov    dword [rsp + 24], eax
	WORD $0x01a8                               // test    al, 1
	JNE  LBB0_680

LBB0_177:
	LONG $0x147963c4; WORD $0x06e8 // vpextrb    eax, xmm13, 6
	LONG $0x14244489               // mov    dword [rsp + 20], eax
	WORD $0x01a8                   // test    al, 1
	JE   LBB0_178

LBB0_681:
	LONG $0x397d63c4; WORD $0x01f1             // vextracti128    xmm1, ymm14, 1
	LONG $0x2071a3c4; WORD $0x170c; BYTE $0x06 // vpinsrb    xmm1, xmm1, byte [rdi + r10], 6
	LONG $0x380d63c4; WORD $0x01f1             // vinserti128    ymm14, ymm14, xmm1, 1
	LONG $0x147963c4; WORD $0x07e8             // vpextrb    eax, xmm13, 7
	LONG $0x3c248489; WORD $0x0001; BYTE $0x00 // mov    dword [rsp + 316], eax
	WORD $0x01a8                               // test    al, 1
	JNE  LBB0_682

LBB0_179:
	QUAD $0x000000d824848b48       // mov    rax, qword [rsp + 216]
	LONG $0x147963c4; WORD $0x08eb // vpextrb    ebx, xmm13, 8
	WORD $0xc3f6; BYTE $0x01       // test    bl, 1
	JE   LBB0_181

LBB0_180:
	LONG $0x397d63c4; WORD $0x01f1             // vextracti128    xmm1, ymm14, 1
	LONG $0x2071e3c4; WORD $0x070c; BYTE $0x08 // vpinsrb    xmm1, xmm1, byte [rdi + rax], 8
	LONG $0x380d63c4; WORD $0x01f1             // vinserti128    ymm14, ymm14, xmm1, 1

LBB0_181:
	LONG $0x147943c4; WORD $0x09e9             // vpextrb    r9d, xmm13, 9
	LONG $0x01c1f641                           // test    r9b, 1
	QUAD $0x0000011824ac894c                   // mov    qword [rsp + 280], r13
	LONG $0x2454894c; BYTE $0x70               // mov    qword [rsp + 112], r10
	QUAD $0x000000b824948948                   // mov    qword [rsp + 184], rdx
	JE   LBB0_183
	LONG $0x397d63c4; WORD $0x01f1             // vextracti128    xmm1, ymm14, 1
	LONG $0x2071e3c4; WORD $0x0f0c; BYTE $0x09 // vpinsrb    xmm1, xmm1, byte [rdi + rcx], 9
	LONG $0x380d63c4; WORD $0x01f1             // vinserti128    ymm14, ymm14, xmm1, 1

LBB0_183:
	QUAD $0x000000c824848b48                   // mov    rax, qword [rsp + 200]
	QUAD $0x000000c0248c8b48                   // mov    rcx, qword [rsp + 192]
	LONG $0x147943c4; WORD $0x0aed             // vpextrb    r13d, xmm13, 10
	LONG $0x01c5f641                           // test    r13b, 1
	JE   LBB0_184
	LONG $0x397d63c4; WORD $0x01f1             // vextracti128    xmm1, ymm14, 1
	LONG $0x2071e3c4; WORD $0x070c; BYTE $0x0a // vpinsrb    xmm1, xmm1, byte [rdi + rax], 10
	LONG $0x380d63c4; WORD $0x01f1             // vinserti128    ymm14, ymm14, xmm1, 1
	LONG $0x147963c4; WORD $0x0be8             // vpextrb    eax, xmm13, 11
	WORD $0x01a8                               // test    al, 1
	LONG $0x247c894c; BYTE $0x78               // mov    qword [rsp + 120], r15
	JNE  LBB0_684

LBB0_185:
	LONG $0x147943c4; WORD $0x0cef // vpextrb    r15d, xmm13, 12
	LONG $0x01c7f641               // test    r15b, 1
	QUAD $0x00000130249c894c       // mov    qword [rsp + 304], r11
	JE   LBB0_186

LBB0_685:
	LONG $0x397d63c4; WORD $0x01f1             // vextracti128    xmm1, ymm14, 1
	QUAD $0x000000b8248c8b48                   // mov    rcx, qword [rsp + 184]
	LONG $0x2071e3c4; WORD $0x0f0c; BYTE $0x0c // vpinsrb    xmm1, xmm1, byte [rdi + rcx], 12
	LONG $0x380d63c4; WORD $0x01f1             // vinserti128    ymm14, ymm14, xmm1, 1
	LONG $0x147963c4; WORD $0x0dea             // vpextrb    edx, xmm13, 13
	WORD $0xc2f6; BYTE $0x01                   // test    dl, 1
	JNE  LBB0_686

LBB0_187:
	LONG $0x147963c4; WORD $0x0eee // vpextrb    esi, xmm13, 14
	LONG $0x01c6f640               // test    sil, 1
	JE   LBB0_188

LBB0_687:
	LONG $0x397d63c4; WORD $0x01f1             // vextracti128    xmm1, ymm14, 1
	QUAD $0x000000a8248c8b48                   // mov    rcx, qword [rsp + 168]
	LONG $0x2071e3c4; WORD $0x0f0c; BYTE $0x0e // vpinsrb    xmm1, xmm1, byte [rdi + rcx], 14
	LONG $0x380d63c4; WORD $0x01f1             // vinserti128    ymm14, ymm14, xmm1, 1
	LONG $0x147943c4; WORD $0x0fee             // vpextrb    r14d, xmm13, 15
	LONG $0x01c6f641                           // test    r14b, 1
	JNE  LBB0_189
	JMP  LBB0_190

LBB0_172:
	LONG $0x147963c4; WORD $0x01e8 // vpextrb    eax, xmm13, 1
	LONG $0x28244489               // mov    dword [rsp + 40], eax
	WORD $0x01a8                   // test    al, 1
	JE   LBB0_173

LBB0_676:
	LONG $0x397d63c4; WORD $0x01f1             // vextracti128    xmm1, ymm14, 1
	QUAD $0x0000008824848b48                   // mov    rax, qword [rsp + 136]
	LONG $0x2071e3c4; WORD $0x070c; BYTE $0x01 // vpinsrb    xmm1, xmm1, byte [rdi + rax], 1
	LONG $0x380d63c4; WORD $0x01f1             // vinserti128    ymm14, ymm14, xmm1, 1
	LONG $0x147963c4; WORD $0x02e8             // vpextrb    eax, xmm13, 2
	LONG $0x24244489                           // mov    dword [rsp + 36], eax
	WORD $0x01a8                               // test    al, 1
	JNE  LBB0_677

LBB0_174:
	LONG $0x147963c4; WORD $0x03e8 // vpextrb    eax, xmm13, 3
	LONG $0x20244489               // mov    dword [rsp + 32], eax
	WORD $0x01a8                   // test    al, 1
	JE   LBB0_175

LBB0_678:
	LONG $0x397d63c4; WORD $0x01f1             // vextracti128    xmm1, ymm14, 1
	LONG $0x2071a3c4; WORD $0x3f0c; BYTE $0x03 // vpinsrb    xmm1, xmm1, byte [rdi + r15], 3
	LONG $0x380d63c4; WORD $0x01f1             // vinserti128    ymm14, ymm14, xmm1, 1
	LONG $0x147963c4; WORD $0x04e8             // vpextrb    eax, xmm13, 4
	LONG $0x1c244489                           // mov    dword [rsp + 28], eax
	WORD $0x01a8                               // test    al, 1
	JNE  LBB0_679

LBB0_176:
	LONG $0x147963c4; WORD $0x05e8 // vpextrb    eax, xmm13, 5
	LONG $0x18244489               // mov    dword [rsp + 24], eax
	WORD $0x01a8                   // test    al, 1
	JE   LBB0_177

LBB0_680:
	LONG $0x397d63c4; WORD $0x01f1             // vextracti128    xmm1, ymm14, 1
	LONG $0x2071a3c4; WORD $0x2f0c; BYTE $0x05 // vpinsrb    xmm1, xmm1, byte [rdi + r13], 5
	LONG $0x380d63c4; WORD $0x01f1             // vinserti128    ymm14, ymm14, xmm1, 1
	LONG $0x147963c4; WORD $0x06e8             // vpextrb    eax, xmm13, 6
	LONG $0x14244489                           // mov    dword [rsp + 20], eax
	WORD $0x01a8                               // test    al, 1
	JNE  LBB0_681

LBB0_178:
	LONG $0x147963c4; WORD $0x07e8             // vpextrb    eax, xmm13, 7
	LONG $0x3c248489; WORD $0x0001; BYTE $0x00 // mov    dword [rsp + 316], eax
	WORD $0x01a8                               // test    al, 1
	JE   LBB0_179

LBB0_682:
	LONG $0x397d63c4; WORD $0x01f1             // vextracti128    xmm1, ymm14, 1
	QUAD $0x000000f024848b48                   // mov    rax, qword [rsp + 240]
	LONG $0x2071e3c4; WORD $0x070c; BYTE $0x07 // vpinsrb    xmm1, xmm1, byte [rdi + rax], 7
	LONG $0x380d63c4; WORD $0x01f1             // vinserti128    ymm14, ymm14, xmm1, 1
	QUAD $0x000000d824848b48                   // mov    rax, qword [rsp + 216]
	LONG $0x147963c4; WORD $0x08eb             // vpextrb    ebx, xmm13, 8
	WORD $0xc3f6; BYTE $0x01                   // test    bl, 1
	JNE  LBB0_180
	JMP  LBB0_181

LBB0_184:
	LONG $0x147963c4; WORD $0x0be8 // vpextrb    eax, xmm13, 11
	WORD $0x01a8                   // test    al, 1
	LONG $0x247c894c; BYTE $0x78   // mov    qword [rsp + 120], r15
	JE   LBB0_185

LBB0_684:
	LONG $0x397d63c4; WORD $0x01f1             // vextracti128    xmm1, ymm14, 1
	LONG $0x2071e3c4; WORD $0x0f0c; BYTE $0x0b // vpinsrb    xmm1, xmm1, byte [rdi + rcx], 11
	LONG $0x380d63c4; WORD $0x01f1             // vinserti128    ymm14, ymm14, xmm1, 1
	LONG $0x147943c4; WORD $0x0cef             // vpextrb    r15d, xmm13, 12
	LONG $0x01c7f641                           // test    r15b, 1
	QUAD $0x00000130249c894c                   // mov    qword [rsp + 304], r11
	JNE  LBB0_685

LBB0_186:
	LONG $0x147963c4; WORD $0x0dea // vpextrb    edx, xmm13, 13
	WORD $0xc2f6; BYTE $0x01       // test    dl, 1
	JE   LBB0_187

LBB0_686:
	LONG $0x397d63c4; WORD $0x01f1             // vextracti128    xmm1, ymm14, 1
	QUAD $0x000000b0248c8b48                   // mov    rcx, qword [rsp + 176]
	LONG $0x2071e3c4; WORD $0x0f0c; BYTE $0x0d // vpinsrb    xmm1, xmm1, byte [rdi + rcx], 13
	LONG $0x380d63c4; WORD $0x01f1             // vinserti128    ymm14, ymm14, xmm1, 1
	LONG $0x147963c4; WORD $0x0eee             // vpextrb    esi, xmm13, 14
	LONG $0x01c6f640                           // test    sil, 1
	JNE  LBB0_687

LBB0_188:
	LONG $0x147943c4; WORD $0x0fee // vpextrb    r14d, xmm13, 15
	LONG $0x01c6f641               // test    r14b, 1
	JE   LBB0_190

LBB0_189:
	LONG $0x397d63c4; WORD $0x01f1             // vextracti128    xmm1, ymm14, 1
	QUAD $0x000000a0248c8b48                   // mov    rcx, qword [rsp + 160]
	LONG $0x2071e3c4; WORD $0x0f0c; BYTE $0x0f // vpinsrb    xmm1, xmm1, byte [rdi + rcx], 15
	LONG $0x380d63c4; WORD $0x01f1             // vinserti128    ymm14, ymm14, xmm1, 1

LBB0_190:
	LONG $0x7175c1c4; WORD $0x01d6             // vpsrlw    ymm1, ymm14, 1
	QUAD $0x00000080b5db75c5                   // vpand    ymm14, ymm1, yword 128[rbp] /* [rip + .LCPI0_4] */
	LONG $0x7e79c1c4; BYTE $0xf2               // vmovd    r10d, xmm6
	LONG $0x01c2f641                           // test    r10b, 1
	JE   LBB0_191
	LONG $0x7ef961c4; BYTE $0xf9               // vmovq    rcx, xmm15
	LONG $0x147943c4; WORD $0x0834; BYTE $0x00 // vpextrb    byte [r8 + rcx], xmm14, 0
	LONG $0x1479e3c4; WORD $0x01f1             // vpextrb    ecx, xmm6, 1
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JNE  LBB0_689

LBB0_192:
	LONG $0x1479e3c4; WORD $0x02f1 // vpextrb    ecx, xmm6, 2
	WORD $0xc1f6; BYTE $0x01       // test    cl, 1
	JE   LBB0_193

LBB0_690:
	LONG $0x397d63c4; WORD $0x01f9             // vextracti128    xmm1, ymm15, 1
	LONG $0x7ef9e1c4; BYTE $0xc9               // vmovq    rcx, xmm1
	LONG $0x147943c4; WORD $0x0834; BYTE $0x02 // vpextrb    byte [r8 + rcx], xmm14, 2
	LONG $0x1479e3c4; WORD $0x03f1             // vpextrb    ecx, xmm6, 3
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JNE  LBB0_691

LBB0_194:
	LONG $0x1479e3c4; WORD $0x04f1 // vpextrb    ecx, xmm6, 4
	WORD $0xc1f6; BYTE $0x01       // test    cl, 1
	JE   LBB0_195

LBB0_692:
	LONG $0x7ef9e1c4; BYTE $0xe9               // vmovq    rcx, xmm5
	LONG $0x147943c4; WORD $0x0834; BYTE $0x04 // vpextrb    byte [r8 + rcx], xmm14, 4
	LONG $0x1479e3c4; WORD $0x05f1             // vpextrb    ecx, xmm6, 5
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JNE  LBB0_693

LBB0_196:
	LONG $0x1479e3c4; WORD $0x06f1 // vpextrb    ecx, xmm6, 6
	WORD $0xc1f6; BYTE $0x01       // test    cl, 1
	JE   LBB0_197

LBB0_694:
	LONG $0x397de3c4; WORD $0x01e9             // vextracti128    xmm1, ymm5, 1
	LONG $0x7ef9e1c4; BYTE $0xc9               // vmovq    rcx, xmm1
	LONG $0x147943c4; WORD $0x0834; BYTE $0x06 // vpextrb    byte [r8 + rcx], xmm14, 6
	LONG $0x1479e3c4; WORD $0x07f1             // vpextrb    ecx, xmm6, 7
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JNE  LBB0_695

LBB0_198:
	LONG $0x1479e3c4; WORD $0x08f1 // vpextrb    ecx, xmm6, 8
	WORD $0xc1f6; BYTE $0x01       // test    cl, 1
	JE   LBB0_199

LBB0_696:
	LONG $0x7ef961c4; BYTE $0xe1               // vmovq    rcx, xmm12
	LONG $0x147943c4; WORD $0x0834; BYTE $0x08 // vpextrb    byte [r8 + rcx], xmm14, 8
	LONG $0x1479e3c4; WORD $0x09f1             // vpextrb    ecx, xmm6, 9
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JNE  LBB0_697

LBB0_200:
	LONG $0x1479e3c4; WORD $0x0af1 // vpextrb    ecx, xmm6, 10
	WORD $0xc1f6; BYTE $0x01       // test    cl, 1
	JE   LBB0_201

LBB0_698:
	LONG $0x397d63c4; WORD $0x01e1             // vextracti128    xmm1, ymm12, 1
	LONG $0x7ef9e1c4; BYTE $0xc9               // vmovq    rcx, xmm1
	LONG $0x147943c4; WORD $0x0834; BYTE $0x0a // vpextrb    byte [r8 + rcx], xmm14, 10
	LONG $0x1479e3c4; WORD $0x0bf1             // vpextrb    ecx, xmm6, 11
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JNE  LBB0_699

LBB0_202:
	LONG $0x1479e3c4; WORD $0x0cf1 // vpextrb    ecx, xmm6, 12
	WORD $0xc1f6; BYTE $0x01       // test    cl, 1
	JE   LBB0_203

LBB0_700:
	LONG $0x7ef961c4; BYTE $0xd9               // vmovq    rcx, xmm11
	LONG $0x147943c4; WORD $0x0834; BYTE $0x0c // vpextrb    byte [r8 + rcx], xmm14, 12
	LONG $0x1479e3c4; WORD $0x0df1             // vpextrb    ecx, xmm6, 13
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JNE  LBB0_701

LBB0_204:
	LONG $0x1479e3c4; WORD $0x0ef1 // vpextrb    ecx, xmm6, 14
	WORD $0xc1f6; BYTE $0x01       // test    cl, 1
	JE   LBB0_205

LBB0_702:
	LONG $0x397d63c4; WORD $0x01d9             // vextracti128    xmm1, ymm11, 1
	LONG $0x7ef9e1c4; BYTE $0xc9               // vmovq    rcx, xmm1
	LONG $0x147943c4; WORD $0x0834; BYTE $0x0e // vpextrb    byte [r8 + rcx], xmm14, 14
	LONG $0x1479e3c4; WORD $0x0ff1             // vpextrb    ecx, xmm6, 15
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JNE  LBB0_703

LBB0_206:
	LONG $0x2c2444f6; BYTE $0x01 // test    byte [rsp + 44], 1
	JE   LBB0_207

LBB0_704:
	LONG $0x7ef961c4; BYTE $0xd1               // vmovq    rcx, xmm10
	LONG $0x397d63c4; WORD $0x01f1             // vextracti128    xmm1, ymm14, 1
	LONG $0x1479c3c4; WORD $0x080c; BYTE $0x00 // vpextrb    byte [r8 + rcx], xmm1, 0
	LONG $0x282444f6; BYTE $0x01               // test    byte [rsp + 40], 1
	JNE  LBB0_705

LBB0_208:
	LONG $0x242444f6; BYTE $0x01 // test    byte [rsp + 36], 1
	JE   LBB0_209

LBB0_706:
	LONG $0x397d63c4; WORD $0x01d1             // vextracti128    xmm1, ymm10, 1
	LONG $0x7ef9e1c4; BYTE $0xc9               // vmovq    rcx, xmm1
	LONG $0x397d63c4; WORD $0x01f1             // vextracti128    xmm1, ymm14, 1
	LONG $0x1479c3c4; WORD $0x080c; BYTE $0x02 // vpextrb    byte [r8 + rcx], xmm1, 2
	LONG $0x202444f6; BYTE $0x01               // test    byte [rsp + 32], 1
	JNE  LBB0_707

LBB0_210:
	LONG $0x1c2444f6; BYTE $0x01 // test    byte [rsp + 28], 1
	JE   LBB0_211

LBB0_708:
	LONG $0x7ef961c4; BYTE $0xc9               // vmovq    rcx, xmm9
	LONG $0x397d63c4; WORD $0x01f1             // vextracti128    xmm1, ymm14, 1
	LONG $0x1479c3c4; WORD $0x080c; BYTE $0x04 // vpextrb    byte [r8 + rcx], xmm1, 4
	LONG $0x182444f6; BYTE $0x01               // test    byte [rsp + 24], 1
	JNE  LBB0_709

LBB0_212:
	LONG $0x142444f6; BYTE $0x01 // test    byte [rsp + 20], 1
	JE   LBB0_213

LBB0_710:
	LONG $0x397d63c4; WORD $0x01c9             // vextracti128    xmm1, ymm9, 1
	LONG $0x7ef9e1c4; BYTE $0xc9               // vmovq    rcx, xmm1
	LONG $0x397d63c4; WORD $0x01f1             // vextracti128    xmm1, ymm14, 1
	LONG $0x1479c3c4; WORD $0x080c; BYTE $0x06 // vpextrb    byte [r8 + rcx], xmm1, 6
	QUAD $0x010000013c2484f6                   // test    byte [rsp + 316], 1
	JNE  LBB0_711

LBB0_214:
	WORD $0xc3f6; BYTE $0x01 // test    bl, 1
	JE   LBB0_215

LBB0_712:
	LONG $0x7ef961c4; BYTE $0xc1               // vmovq    rcx, xmm8
	LONG $0x397d63c4; WORD $0x01f1             // vextracti128    xmm1, ymm14, 1
	LONG $0x1479c3c4; WORD $0x080c; BYTE $0x08 // vpextrb    byte [r8 + rcx], xmm1, 8
	LONG $0x01c1f641                           // test    r9b, 1
	QUAD $0x000000e024948b4c                   // mov    r10, qword [rsp + 224]
	QUAD $0x00000090249c8b4c                   // mov    r11, qword [rsp + 144]
	JNE  LBB0_713

LBB0_216:
	LONG $0x01c5f641         // test    r13b, 1
	QUAD $0x00000128249c8b48 // mov    rbx, qword [rsp + 296]
	JE   LBB0_217

LBB0_714:
	LONG $0x397d63c4; WORD $0x01c1             // vextracti128    xmm1, ymm8, 1
	LONG $0x7ef9e1c4; BYTE $0xc9               // vmovq    rcx, xmm1
	LONG $0x397d63c4; WORD $0x01f1             // vextracti128    xmm1, ymm14, 1
	LONG $0x1479c3c4; WORD $0x080c; BYTE $0x0a // vpextrb    byte [r8 + rcx], xmm1, 10
	WORD $0x01a8                               // test    al, 1
	QUAD $0x00000120248c8b4c                   // mov    r9, qword [rsp + 288]
	QUAD $0x000000e824848b48                   // mov    rax, qword [rsp + 232]
	JNE  LBB0_715

LBB0_218:
	LONG $0x01c7f641 // test    r15b, 1
	JE   LBB0_219

LBB0_716:
	LONG $0x7ef9e1c4; BYTE $0xf9               // vmovq    rcx, xmm7
	LONG $0x397d63c4; WORD $0x01f1             // vextracti128    xmm1, ymm14, 1
	LONG $0x1479c3c4; WORD $0x080c; BYTE $0x0c // vpextrb    byte [r8 + rcx], xmm1, 12
	WORD $0xc2f6; BYTE $0x01                   // test    dl, 1
	QUAD $0x0000008824ac8b4c                   // mov    r13, qword [rsp + 136]
	QUAD $0x0000008024bc8b4c                   // mov    r15, qword [rsp + 128]
	JNE  LBB0_717

LBB0_220:
	LONG $0x01c6f640         // test    sil, 1
	QUAD $0x0000013024948b48 // mov    rdx, qword [rsp + 304]
	JE   LBB0_221

LBB0_718:
	LONG $0x397de3c4; WORD $0x01f9             // vextracti128    xmm1, ymm7, 1
	LONG $0x7ef9e1c4; BYTE $0xc9               // vmovq    rcx, xmm1
	LONG $0x397d63c4; WORD $0x01f1             // vextracti128    xmm1, ymm14, 1
	LONG $0x1479c3c4; WORD $0x080c; BYTE $0x0e // vpextrb    byte [r8 + rcx], xmm1, 14
	LONG $0x01c6f641                           // test    r14b, 1
	QUAD $0x0000009824b48b48                   // mov    rsi, qword [rsp + 152]
	JNE  LBB0_222
	JMP  LBB0_223

LBB0_191:
	LONG $0x1479e3c4; WORD $0x01f1 // vpextrb    ecx, xmm6, 1
	WORD $0xc1f6; BYTE $0x01       // test    cl, 1
	JE   LBB0_192

LBB0_689:
	LONG $0x16f963c4; WORD $0x01f9             // vpextrq    rcx, xmm15, 1
	LONG $0x147943c4; WORD $0x0834; BYTE $0x01 // vpextrb    byte [r8 + rcx], xmm14, 1
	LONG $0x1479e3c4; WORD $0x02f1             // vpextrb    ecx, xmm6, 2
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JNE  LBB0_690

LBB0_193:
	LONG $0x1479e3c4; WORD $0x03f1 // vpextrb    ecx, xmm6, 3
	WORD $0xc1f6; BYTE $0x01       // test    cl, 1
	JE   LBB0_194

LBB0_691:
	LONG $0x397d63c4; WORD $0x01f9             // vextracti128    xmm1, ymm15, 1
	LONG $0x16f9e3c4; WORD $0x01c9             // vpextrq    rcx, xmm1, 1
	LONG $0x147943c4; WORD $0x0834; BYTE $0x03 // vpextrb    byte [r8 + rcx], xmm14, 3
	LONG $0x1479e3c4; WORD $0x04f1             // vpextrb    ecx, xmm6, 4
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JNE  LBB0_692

LBB0_195:
	LONG $0x1479e3c4; WORD $0x05f1 // vpextrb    ecx, xmm6, 5
	WORD $0xc1f6; BYTE $0x01       // test    cl, 1
	JE   LBB0_196

LBB0_693:
	LONG $0x16f9e3c4; WORD $0x01e9             // vpextrq    rcx, xmm5, 1
	LONG $0x147943c4; WORD $0x0834; BYTE $0x05 // vpextrb    byte [r8 + rcx], xmm14, 5
	LONG $0x1479e3c4; WORD $0x06f1             // vpextrb    ecx, xmm6, 6
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JNE  LBB0_694

LBB0_197:
	LONG $0x1479e3c4; WORD $0x07f1 // vpextrb    ecx, xmm6, 7
	WORD $0xc1f6; BYTE $0x01       // test    cl, 1
	JE   LBB0_198

LBB0_695:
	LONG $0x397de3c4; WORD $0x01e9             // vextracti128    xmm1, ymm5, 1
	LONG $0x16f9e3c4; WORD $0x01c9             // vpextrq    rcx, xmm1, 1
	LONG $0x147943c4; WORD $0x0834; BYTE $0x07 // vpextrb    byte [r8 + rcx], xmm14, 7
	LONG $0x1479e3c4; WORD $0x08f1             // vpextrb    ecx, xmm6, 8
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JNE  LBB0_696

LBB0_199:
	LONG $0x1479e3c4; WORD $0x09f1 // vpextrb    ecx, xmm6, 9
	WORD $0xc1f6; BYTE $0x01       // test    cl, 1
	JE   LBB0_200

LBB0_697:
	LONG $0x16f963c4; WORD $0x01e1             // vpextrq    rcx, xmm12, 1
	LONG $0x147943c4; WORD $0x0834; BYTE $0x09 // vpextrb    byte [r8 + rcx], xmm14, 9
	LONG $0x1479e3c4; WORD $0x0af1             // vpextrb    ecx, xmm6, 10
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JNE  LBB0_698

LBB0_201:
	LONG $0x1479e3c4; WORD $0x0bf1 // vpextrb    ecx, xmm6, 11
	WORD $0xc1f6; BYTE $0x01       // test    cl, 1
	JE   LBB0_202

LBB0_699:
	LONG $0x397d63c4; WORD $0x01e1             // vextracti128    xmm1, ymm12, 1
	LONG $0x16f9e3c4; WORD $0x01c9             // vpextrq    rcx, xmm1, 1
	LONG $0x147943c4; WORD $0x0834; BYTE $0x0b // vpextrb    byte [r8 + rcx], xmm14, 11
	LONG $0x1479e3c4; WORD $0x0cf1             // vpextrb    ecx, xmm6, 12
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JNE  LBB0_700

LBB0_203:
	LONG $0x1479e3c4; WORD $0x0df1 // vpextrb    ecx, xmm6, 13
	WORD $0xc1f6; BYTE $0x01       // test    cl, 1
	JE   LBB0_204

LBB0_701:
	LONG $0x16f963c4; WORD $0x01d9             // vpextrq    rcx, xmm11, 1
	LONG $0x147943c4; WORD $0x0834; BYTE $0x0d // vpextrb    byte [r8 + rcx], xmm14, 13
	LONG $0x1479e3c4; WORD $0x0ef1             // vpextrb    ecx, xmm6, 14
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JNE  LBB0_702

LBB0_205:
	LONG $0x1479e3c4; WORD $0x0ff1 // vpextrb    ecx, xmm6, 15
	WORD $0xc1f6; BYTE $0x01       // test    cl, 1
	JE   LBB0_206

LBB0_703:
	LONG $0x397d63c4; WORD $0x01d9             // vextracti128    xmm1, ymm11, 1
	LONG $0x16f9e3c4; WORD $0x01c9             // vpextrq    rcx, xmm1, 1
	LONG $0x147943c4; WORD $0x0834; BYTE $0x0f // vpextrb    byte [r8 + rcx], xmm14, 15
	LONG $0x2c2444f6; BYTE $0x01               // test    byte [rsp + 44], 1
	JNE  LBB0_704

LBB0_207:
	LONG $0x282444f6; BYTE $0x01 // test    byte [rsp + 40], 1
	JE   LBB0_208

LBB0_705:
	LONG $0x16f963c4; WORD $0x01d1             // vpextrq    rcx, xmm10, 1
	LONG $0x397d63c4; WORD $0x01f1             // vextracti128    xmm1, ymm14, 1
	LONG $0x1479c3c4; WORD $0x080c; BYTE $0x01 // vpextrb    byte [r8 + rcx], xmm1, 1
	LONG $0x242444f6; BYTE $0x01               // test    byte [rsp + 36], 1
	JNE  LBB0_706

LBB0_209:
	LONG $0x202444f6; BYTE $0x01 // test    byte [rsp + 32], 1
	JE   LBB0_210

LBB0_707:
	LONG $0x397d63c4; WORD $0x01d1             // vextracti128    xmm1, ymm10, 1
	LONG $0x16f9e3c4; WORD $0x01c9             // vpextrq    rcx, xmm1, 1
	LONG $0x397d63c4; WORD $0x01f1             // vextracti128    xmm1, ymm14, 1
	LONG $0x1479c3c4; WORD $0x080c; BYTE $0x03 // vpextrb    byte [r8 + rcx], xmm1, 3
	LONG $0x1c2444f6; BYTE $0x01               // test    byte [rsp + 28], 1
	JNE  LBB0_708

LBB0_211:
	LONG $0x182444f6; BYTE $0x01 // test    byte [rsp + 24], 1
	JE   LBB0_212

LBB0_709:
	LONG $0x16f963c4; WORD $0x01c9             // vpextrq    rcx, xmm9, 1
	LONG $0x397d63c4; WORD $0x01f1             // vextracti128    xmm1, ymm14, 1
	LONG $0x1479c3c4; WORD $0x080c; BYTE $0x05 // vpextrb    byte [r8 + rcx], xmm1, 5
	LONG $0x142444f6; BYTE $0x01               // test    byte [rsp + 20], 1
	JNE  LBB0_710

LBB0_213:
	QUAD $0x010000013c2484f6 // test    byte [rsp + 316], 1
	JE   LBB0_214

LBB0_711:
	LONG $0x397d63c4; WORD $0x01c9             // vextracti128    xmm1, ymm9, 1
	LONG $0x16f9e3c4; WORD $0x01c9             // vpextrq    rcx, xmm1, 1
	LONG $0x397d63c4; WORD $0x01f1             // vextracti128    xmm1, ymm14, 1
	LONG $0x1479c3c4; WORD $0x080c; BYTE $0x07 // vpextrb    byte [r8 + rcx], xmm1, 7
	WORD $0xc3f6; BYTE $0x01                   // test    bl, 1
	JNE  LBB0_712

LBB0_215:
	LONG $0x01c1f641         // test    r9b, 1
	QUAD $0x000000e024948b4c // mov    r10, qword [rsp + 224]
	QUAD $0x00000090249c8b4c // mov    r11, qword [rsp + 144]
	JE   LBB0_216

LBB0_713:
	LONG $0x16f963c4; WORD $0x01c1             // vpextrq    rcx, xmm8, 1
	LONG $0x397d63c4; WORD $0x01f1             // vextracti128    xmm1, ymm14, 1
	LONG $0x1479c3c4; WORD $0x080c; BYTE $0x09 // vpextrb    byte [r8 + rcx], xmm1, 9
	LONG $0x01c5f641                           // test    r13b, 1
	QUAD $0x00000128249c8b48                   // mov    rbx, qword [rsp + 296]
	JNE  LBB0_714

LBB0_217:
	WORD $0x01a8             // test    al, 1
	QUAD $0x00000120248c8b4c // mov    r9, qword [rsp + 288]
	QUAD $0x000000e824848b48 // mov    rax, qword [rsp + 232]
	JE   LBB0_218

LBB0_715:
	LONG $0x397d63c4; WORD $0x01c1             // vextracti128    xmm1, ymm8, 1
	LONG $0x16f9e3c4; WORD $0x01c9             // vpextrq    rcx, xmm1, 1
	LONG $0x397d63c4; WORD $0x01f1             // vextracti128    xmm1, ymm14, 1
	LONG $0x1479c3c4; WORD $0x080c; BYTE $0x0b // vpextrb    byte [r8 + rcx], xmm1, 11
	LONG $0x01c7f641                           // test    r15b, 1
	JNE  LBB0_716

LBB0_219:
	WORD $0xc2f6; BYTE $0x01 // test    dl, 1
	QUAD $0x0000008824ac8b4c // mov    r13, qword [rsp + 136]
	QUAD $0x0000008024bc8b4c // mov    r15, qword [rsp + 128]
	JE   LBB0_220

LBB0_717:
	LONG $0x16f9e3c4; WORD $0x01f9             // vpextrq    rcx, xmm7, 1
	LONG $0x397d63c4; WORD $0x01f1             // vextracti128    xmm1, ymm14, 1
	LONG $0x1479c3c4; WORD $0x080c; BYTE $0x0d // vpextrb    byte [r8 + rcx], xmm1, 13
	LONG $0x01c6f640                           // test    sil, 1
	QUAD $0x0000013024948b48                   // mov    rdx, qword [rsp + 304]
	JNE  LBB0_718

LBB0_221:
	LONG $0x01c6f641         // test    r14b, 1
	QUAD $0x0000009824b48b48 // mov    rsi, qword [rsp + 152]
	JE   LBB0_223

LBB0_222:
	LONG $0x397de3c4; WORD $0x01f9             // vextracti128    xmm1, ymm7, 1
	LONG $0x16f9e3c4; WORD $0x01c9             // vpextrq    rcx, xmm1, 1
	LONG $0x397d63c4; WORD $0x01f1             // vextracti128    xmm1, ymm14, 1
	LONG $0x1479c3c4; WORD $0x080c; BYTE $0x0f // vpextrb    byte [r8 + rcx], xmm1, 15

LBB0_223:
	QUAD $0x0002e0248c6ffdc5; BYTE $0x00 // vmovdqa    ymm1, yword [rsp + 736]
	QUAD $0x00020024bceb75c5; BYTE $0x00 // vpor    ymm15, ymm1, yword [rsp + 512]
	QUAD $0x0001e024acebf5c5; BYTE $0x00 // vpor    ymm5, ymm1, yword [rsp + 480]
	QUAD $0x0001802494eb75c5; BYTE $0x00 // vpor    ymm10, ymm1, yword [rsp + 384]
	QUAD $0x000160248ceb75c5; BYTE $0x00 // vpor    ymm9, ymm1, yword [rsp + 352]
	QUAD $0x0001c024a4eb75c5; BYTE $0x00 // vpor    ymm12, ymm1, yword [rsp + 448]
	QUAD $0x0001a0249ceb75c5; BYTE $0x00 // vpor    ymm11, ymm1, yword [rsp + 416]
	QUAD $0x0001402484eb75c5; BYTE $0x00 // vpor    ymm8, ymm1, yword [rsp + 320]
	LONG $0xf9ebddc5                     // vpor    ymm7, ymm4, ymm1
	LONG $0x463de3c4; WORD $0x31cf       // vperm2i128    ymm1, ymm8, ymm7, 49
	LONG $0x383de3c4; WORD $0x01d7       // vinserti128    ymm2, ymm8, xmm7, 1
	LONG $0xc9c6ecc5; BYTE $0x88         // vshufps    ymm1, ymm2, ymm1, 136
	LONG $0x461dc3c4; WORD $0x31d3       // vperm2i128    ymm2, ymm12, ymm11, 49
	LONG $0x381dc3c4; WORD $0x01db       // vinserti128    ymm3, ymm12, xmm11, 1
	LONG $0xd2c6e4c5; BYTE $0x88         // vshufps    ymm2, ymm3, ymm2, 136
	LONG $0x462dc3c4; WORD $0x31d9       // vperm2i128    ymm3, ymm10, ymm9, 49
	LONG $0x382d43c4; WORD $0x01e9       // vinserti128    ymm13, ymm10, xmm9, 1
	LONG $0xdbc694c5; BYTE $0x88         // vshufps    ymm3, ymm13, ymm3, 136
	LONG $0x460563c4; WORD $0x31ed       // vperm2i128    ymm13, ymm15, ymm5, 49
	LONG $0x380563c4; WORD $0x01f5       // vinserti128    ymm14, ymm15, xmm5, 1
	LONG $0xc60c41c4; WORD $0x88ed       // vshufps    ymm13, ymm14, ymm13, 136
	LONG $0x667d41c4; BYTE $0xed         // vpcmpgtd    ymm13, ymm0, ymm13
	LONG $0xdb66fdc5                     // vpcmpgtd    ymm3, ymm0, ymm3
	LONG $0xdb6b95c5                     // vpackssdw    ymm3, ymm13, ymm3
	LONG $0xd266fdc5                     // vpcmpgtd    ymm2, ymm0, ymm2
	LONG $0xc966fdc5                     // vpcmpgtd    ymm1, ymm0, ymm1
	LONG $0xc96bedc5                     // vpackssdw    ymm1, ymm2, ymm1
	LONG $0x00fde3c4; WORD $0xd8d3       // vpermq    ymm2, ymm3, 216
	LONG $0x00fde3c4; WORD $0xd8c9       // vpermq    ymm1, ymm1, 216
	LONG $0xc963edc5                     // vpacksswb    ymm1, ymm2, ymm1
	LONG $0xf6dbf5c5                     // vpand    ymm6, ymm1, ymm6
	LONG $0xf17ef9c5                     // vmovd    ecx, xmm6
	WORD $0xc1f6; BYTE $0x01             // test    cl, 1
	JE   LBB0_224
	LONG $0x787d62c4; WORD $0x1734       // vpbroadcastb    ymm14, byte [rdi + rdx]
	LONG $0x1479e3c4; WORD $0x01f1       // vpextrb    ecx, xmm6, 1
	WORD $0xc1f6; BYTE $0x01             // test    cl, 1
	JNE  LBB0_720

LBB0_225:
	LONG $0x24548b48; BYTE $0x68   // mov    rdx, qword [rsp + 104]
	LONG $0x1479e3c4; WORD $0x02f1 // vpextrb    ecx, xmm6, 2
	WORD $0xc1f6; BYTE $0x01       // test    cl, 1
	JE   LBB0_227

LBB0_226:
	LONG $0x2009e3c4; WORD $0x1f0c; BYTE $0x02 // vpinsrb    xmm1, xmm14, byte [rdi + rbx], 2
	LONG $0x020d63c4; WORD $0x0ff1             // vpblendd    ymm14, ymm14, ymm1, 15

LBB0_227:
	LONG $0x24748b48; BYTE $0x60               // mov    rsi, qword [rsp + 96]
	LONG $0x245c8b48; BYTE $0x48               // mov    rbx, qword [rsp + 72]
	LONG $0x1479e3c4; WORD $0x03f1             // vpextrb    ecx, xmm6, 3
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JE   LBB0_228
	QUAD $0x00000110248c8b48                   // mov    rcx, qword [rsp + 272]
	LONG $0x2009e3c4; WORD $0x0f0c; BYTE $0x03 // vpinsrb    xmm1, xmm14, byte [rdi + rcx], 3
	LONG $0x020d63c4; WORD $0x0ff1             // vpblendd    ymm14, ymm14, ymm1, 15
	LONG $0x1479e3c4; WORD $0x04f1             // vpextrb    ecx, xmm6, 4
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JNE  LBB0_722

LBB0_229:
	LONG $0x1479e3c4; WORD $0x05f1 // vpextrb    ecx, xmm6, 5
	WORD $0xc1f6; BYTE $0x01       // test    cl, 1
	JE   LBB0_230

LBB0_723:
	LONG $0x2009e3c4; WORD $0x170c; BYTE $0x05 // vpinsrb    xmm1, xmm14, byte [rdi + rdx], 5
	LONG $0x020d63c4; WORD $0x0ff1             // vpblendd    ymm14, ymm14, ymm1, 15
	LONG $0x1479e3c4; WORD $0x06f1             // vpextrb    ecx, xmm6, 6
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JNE  LBB0_724

LBB0_231:
	LONG $0x1479e3c4; WORD $0x07f1 // vpextrb    ecx, xmm6, 7
	WORD $0xc1f6; BYTE $0x01       // test    cl, 1
	JE   LBB0_232

LBB0_725:
	LONG $0x2009e3c4; WORD $0x070c; BYTE $0x07 // vpinsrb    xmm1, xmm14, byte [rdi + rax], 7
	LONG $0x020d63c4; WORD $0x0ff1             // vpblendd    ymm14, ymm14, ymm1, 15
	LONG $0x1479e3c4; WORD $0x08f1             // vpextrb    ecx, xmm6, 8
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JNE  LBB0_726

LBB0_233:
	LONG $0x24548b48; BYTE $0x58   // mov    rdx, qword [rsp + 88]
	LONG $0x1479e3c4; WORD $0x09f1 // vpextrb    ecx, xmm6, 9
	WORD $0xc1f6; BYTE $0x01       // test    cl, 1
	JE   LBB0_234

LBB0_727:
	LONG $0x2009a3c4; WORD $0x170c; BYTE $0x09 // vpinsrb    xmm1, xmm14, byte [rdi + r10], 9
	LONG $0x020d63c4; WORD $0x0ff1             // vpblendd    ymm14, ymm14, ymm1, 15
	LONG $0x1479e3c4; WORD $0x0af1             // vpextrb    ecx, xmm6, 10
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JNE  LBB0_728

LBB0_235:
	LONG $0x1479e3c4; WORD $0x0bf1 // vpextrb    ecx, xmm6, 11
	WORD $0xc1f6; BYTE $0x01       // test    cl, 1
	JE   LBB0_236

LBB0_729:
	QUAD $0x0000010024848b48                   // mov    rax, qword [rsp + 256]
	LONG $0x2009e3c4; WORD $0x070c; BYTE $0x0b // vpinsrb    xmm1, xmm14, byte [rdi + rax], 11
	LONG $0x020d63c4; WORD $0x0ff1             // vpblendd    ymm14, ymm14, ymm1, 15
	LONG $0x1479e3c4; WORD $0x0cf1             // vpextrb    ecx, xmm6, 12
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JNE  LBB0_730

LBB0_237:
	LONG $0x1479e3c4; WORD $0x0df1 // vpextrb    ecx, xmm6, 13
	WORD $0xc1f6; BYTE $0x01       // test    cl, 1
	JE   LBB0_239

LBB0_238:
	LONG $0x2009e3c4; WORD $0x170c; BYTE $0x0d // vpinsrb    xmm1, xmm14, byte [rdi + rdx], 13
	LONG $0x020d63c4; WORD $0x0ff1             // vpblendd    ymm14, ymm14, ymm1, 15

LBB0_239:
	LONG $0x24448b48; BYTE $0x50               // mov    rax, qword [rsp + 80]
	LONG $0x24548b48; BYTE $0x40               // mov    rdx, qword [rsp + 64]
	LONG $0x1479e3c4; WORD $0x0ef1             // vpextrb    ecx, xmm6, 14
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JE   LBB0_241
	LONG $0x2009e3c4; WORD $0x070c; BYTE $0x0e // vpinsrb    xmm1, xmm14, byte [rdi + rax], 14
	LONG $0x020d63c4; WORD $0x0ff1             // vpblendd    ymm14, ymm14, ymm1, 15

LBB0_241:
	LONG $0x1479e3c4; WORD $0x0ff1             // vpextrb    ecx, xmm6, 15
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JE   LBB0_243
	LONG $0x2009e3c4; WORD $0x1f0c; BYTE $0x0f // vpinsrb    xmm1, xmm14, byte [rdi + rbx], 15
	LONG $0x020d63c4; WORD $0x0ff1             // vpblendd    ymm14, ymm14, ymm1, 15

LBB0_243:
	LONG $0x397de3c4; WORD $0x01f1             // vextracti128    xmm1, ymm6, 1
	LONG $0xc87ef9c5                           // vmovd    eax, xmm1
	LONG $0x2c244489                           // mov    dword [rsp + 44], eax
	WORD $0x01a8                               // test    al, 1
	JE   LBB0_245
	LONG $0x397d63c4; WORD $0x01f2             // vextracti128    xmm2, ymm14, 1
	LONG $0x2069e3c4; WORD $0x1714; BYTE $0x00 // vpinsrb    xmm2, xmm2, byte [rdi + rdx], 0
	LONG $0x380d63c4; WORD $0x01f2             // vinserti128    ymm14, ymm14, xmm2, 1

LBB0_245:
	LONG $0x244c8b48; BYTE $0x38               // mov    rcx, qword [rsp + 56]
	LONG $0x1479e3c4; WORD $0x01c8             // vpextrb    eax, xmm1, 1
	LONG $0x28244489                           // mov    dword [rsp + 40], eax
	WORD $0x01a8                               // test    al, 1
	JE   LBB0_247
	LONG $0x397d63c4; WORD $0x01f2             // vextracti128    xmm2, ymm14, 1
	LONG $0x2069a3c4; WORD $0x2f14; BYTE $0x01 // vpinsrb    xmm2, xmm2, byte [rdi + r13], 1
	LONG $0x380d63c4; WORD $0x01f2             // vinserti128    ymm14, ymm14, xmm2, 1

LBB0_247:
	QUAD $0x0000011824948b48                   // mov    rdx, qword [rsp + 280]
	LONG $0x24748b48; BYTE $0x70               // mov    rsi, qword [rsp + 112]
	LONG $0x1479e3c4; WORD $0x02c8             // vpextrb    eax, xmm1, 2
	LONG $0x24244489                           // mov    dword [rsp + 36], eax
	WORD $0x01a8                               // test    al, 1
	JE   LBB0_249
	LONG $0x397d63c4; WORD $0x01f2             // vextracti128    xmm2, ymm14, 1
	LONG $0x2069a3c4; WORD $0x3f14; BYTE $0x02 // vpinsrb    xmm2, xmm2, byte [rdi + r15], 2
	LONG $0x380d63c4; WORD $0x01f2             // vinserti128    ymm14, ymm14, xmm2, 1

LBB0_249:
	LONG $0x24448b48; BYTE $0x78               // mov    rax, qword [rsp + 120]
	LONG $0x1479e3c4; WORD $0x03cb             // vpextrb    ebx, xmm1, 3
	LONG $0x20245c89                           // mov    dword [rsp + 32], ebx
	WORD $0xc3f6; BYTE $0x01                   // test    bl, 1
	JE   LBB0_250
	LONG $0x397d63c4; WORD $0x01f2             // vextracti128    xmm2, ymm14, 1
	LONG $0x2069e3c4; WORD $0x0714; BYTE $0x03 // vpinsrb    xmm2, xmm2, byte [rdi + rax], 3
	LONG $0x380d63c4; WORD $0x01f2             // vinserti128    ymm14, ymm14, xmm2, 1
	LONG $0x1479e3c4; WORD $0x04c8             // vpextrb    eax, xmm1, 4
	LONG $0x1c244489                           // mov    dword [rsp + 28], eax
	WORD $0x01a8                               // test    al, 1
	JNE  LBB0_732

LBB0_251:
	LONG $0x1479e3c4; WORD $0x05c8 // vpextrb    eax, xmm1, 5
	LONG $0x18244489               // mov    dword [rsp + 24], eax
	WORD $0x01a8                   // test    al, 1
	JE   LBB0_252

LBB0_733:
	LONG $0x397d63c4; WORD $0x01f2             // vextracti128    xmm2, ymm14, 1
	LONG $0x2069e3c4; WORD $0x1714; BYTE $0x05 // vpinsrb    xmm2, xmm2, byte [rdi + rdx], 5
	LONG $0x380d63c4; WORD $0x01f2             // vinserti128    ymm14, ymm14, xmm2, 1
	LONG $0x1479e3c4; WORD $0x06c8             // vpextrb    eax, xmm1, 6
	LONG $0x14244489                           // mov    dword [rsp + 20], eax
	WORD $0x01a8                               // test    al, 1
	JNE  LBB0_734

LBB0_253:
	LONG $0x1479c3c4; WORD $0x07c9 // vpextrb    r9d, xmm1, 7
	LONG $0x01c1f641               // test    r9b, 1
	JE   LBB0_254

LBB0_735:
	LONG $0x397d63c4; WORD $0x01f2             // vextracti128    xmm2, ymm14, 1
	QUAD $0x000000f024848b48                   // mov    rax, qword [rsp + 240]
	LONG $0x2069e3c4; WORD $0x0714; BYTE $0x07 // vpinsrb    xmm2, xmm2, byte [rdi + rax], 7
	LONG $0x380d63c4; WORD $0x01f2             // vinserti128    ymm14, ymm14, xmm2, 1
	LONG $0x1479e3c4; WORD $0x08ca             // vpextrb    edx, xmm1, 8
	WORD $0xc2f6; BYTE $0x01                   // test    dl, 1
	JNE  LBB0_736

LBB0_255:
	LONG $0x1479e3c4; WORD $0x09c9 // vpextrb    ecx, xmm1, 9
	WORD $0xc1f6; BYTE $0x01       // test    cl, 1
	JE   LBB0_256

LBB0_737:
	LONG $0x397d63c4; WORD $0x01f2             // vextracti128    xmm2, ymm14, 1
	QUAD $0x000000d024848b48                   // mov    rax, qword [rsp + 208]
	LONG $0x2069e3c4; WORD $0x0714; BYTE $0x09 // vpinsrb    xmm2, xmm2, byte [rdi + rax], 9
	LONG $0x380d63c4; WORD $0x01f2             // vinserti128    ymm14, ymm14, xmm2, 1
	LONG $0x1479e3c4; WORD $0x0ace             // vpextrb    esi, xmm1, 10
	LONG $0x01c6f640                           // test    sil, 1
	JNE  LBB0_738

LBB0_257:
	LONG $0x1479e3c4; WORD $0x0bc8 // vpextrb    eax, xmm1, 11
	WORD $0x01a8                   // test    al, 1
	JE   LBB0_258

LBB0_739:
	LONG $0x397d63c4; WORD $0x01f2             // vextracti128    xmm2, ymm14, 1
	QUAD $0x000000c0249c8b48                   // mov    rbx, qword [rsp + 192]
	LONG $0x2069e3c4; WORD $0x1f14; BYTE $0x0b // vpinsrb    xmm2, xmm2, byte [rdi + rbx], 11
	LONG $0x380d63c4; WORD $0x01f2             // vinserti128    ymm14, ymm14, xmm2, 1
	LONG $0x1479c3c4; WORD $0x0ccd             // vpextrb    r13d, xmm1, 12
	LONG $0x01c5f641                           // test    r13b, 1
	JNE  LBB0_740

LBB0_259:
	LONG $0x1479c3c4; WORD $0x0dca // vpextrb    r10d, xmm1, 13
	LONG $0x01c2f641               // test    r10b, 1
	JE   LBB0_260

LBB0_741:
	LONG $0x397d63c4; WORD $0x01f2             // vextracti128    xmm2, ymm14, 1
	QUAD $0x000000b0249c8b48                   // mov    rbx, qword [rsp + 176]
	LONG $0x2069e3c4; WORD $0x1f14; BYTE $0x0d // vpinsrb    xmm2, xmm2, byte [rdi + rbx], 13
	LONG $0x380d63c4; WORD $0x01f2             // vinserti128    ymm14, ymm14, xmm2, 1
	LONG $0x1479c3c4; WORD $0x0ecb             // vpextrb    r11d, xmm1, 14
	LONG $0x01c3f641                           // test    r11b, 1
	JNE  LBB0_742

LBB0_261:
	LONG $0x1479c3c4; WORD $0x0fce // vpextrb    r14d, xmm1, 15
	LONG $0x01c6f641               // test    r14b, 1
	JE   LBB0_263

LBB0_262:
	LONG $0x397d63c4; WORD $0x01f1             // vextracti128    xmm1, ymm14, 1
	QUAD $0x000000a0249c8b48                   // mov    rbx, qword [rsp + 160]
	LONG $0x2071e3c4; WORD $0x1f0c; BYTE $0x0f // vpinsrb    xmm1, xmm1, byte [rdi + rbx], 15
	LONG $0x380d63c4; WORD $0x01f1             // vinserti128    ymm14, ymm14, xmm1, 1

LBB0_263:
	LONG $0x7175c1c4; WORD $0x02d6             // vpsrlw    ymm1, ymm14, 2
	QUAD $0x00000080b5db75c5                   // vpand    ymm14, ymm1, yword 128[rbp] /* [rip + .LCPI0_4] */
	LONG $0x7e79c1c4; BYTE $0xf7               // vmovd    r15d, xmm6
	LONG $0x01c7f641                           // test    r15b, 1
	JE   LBB0_264
	LONG $0x7ef961c4; BYTE $0xfb               // vmovq    rbx, xmm15
	LONG $0x147943c4; WORD $0x1834; BYTE $0x00 // vpextrb    byte [r8 + rbx], xmm14, 0
	LONG $0x1479e3c4; WORD $0x01f3             // vpextrb    ebx, xmm6, 1
	WORD $0xc3f6; BYTE $0x01                   // test    bl, 1
	JNE  LBB0_744

LBB0_265:
	LONG $0x1479e3c4; WORD $0x02f3 // vpextrb    ebx, xmm6, 2
	WORD $0xc3f6; BYTE $0x01       // test    bl, 1
	QUAD $0x000000e024bc8b4c       // mov    r15, qword [rsp + 224]
	JE   LBB0_266

LBB0_745:
	LONG $0x397d63c4; WORD $0x01f9             // vextracti128    xmm1, ymm15, 1
	LONG $0x7ef9e1c4; BYTE $0xcb               // vmovq    rbx, xmm1
	LONG $0x147943c4; WORD $0x1834; BYTE $0x02 // vpextrb    byte [r8 + rbx], xmm14, 2
	LONG $0x1479e3c4; WORD $0x03f3             // vpextrb    ebx, xmm6, 3
	WORD $0xc3f6; BYTE $0x01                   // test    bl, 1
	JNE  LBB0_746

LBB0_267:
	LONG $0x1479e3c4; WORD $0x04f3 // vpextrb    ebx, xmm6, 4
	WORD $0xc3f6; BYTE $0x01       // test    bl, 1
	JE   LBB0_268

LBB0_747:
	LONG $0x7ef9e1c4; BYTE $0xeb               // vmovq    rbx, xmm5
	LONG $0x147943c4; WORD $0x1834; BYTE $0x04 // vpextrb    byte [r8 + rbx], xmm14, 4
	LONG $0x1479e3c4; WORD $0x05f3             // vpextrb    ebx, xmm6, 5
	WORD $0xc3f6; BYTE $0x01                   // test    bl, 1
	JNE  LBB0_748

LBB0_269:
	LONG $0x1479e3c4; WORD $0x06f3 // vpextrb    ebx, xmm6, 6
	WORD $0xc3f6; BYTE $0x01       // test    bl, 1
	JE   LBB0_270

LBB0_749:
	LONG $0x397de3c4; WORD $0x01e9             // vextracti128    xmm1, ymm5, 1
	LONG $0x7ef9e1c4; BYTE $0xcb               // vmovq    rbx, xmm1
	LONG $0x147943c4; WORD $0x1834; BYTE $0x06 // vpextrb    byte [r8 + rbx], xmm14, 6
	LONG $0x1479e3c4; WORD $0x07f3             // vpextrb    ebx, xmm6, 7
	WORD $0xc3f6; BYTE $0x01                   // test    bl, 1
	JNE  LBB0_750

LBB0_271:
	LONG $0x1479e3c4; WORD $0x08f3 // vpextrb    ebx, xmm6, 8
	WORD $0xc3f6; BYTE $0x01       // test    bl, 1
	JE   LBB0_272

LBB0_751:
	LONG $0x7ef961c4; BYTE $0xe3               // vmovq    rbx, xmm12
	LONG $0x147943c4; WORD $0x1834; BYTE $0x08 // vpextrb    byte [r8 + rbx], xmm14, 8
	LONG $0x1479e3c4; WORD $0x09f3             // vpextrb    ebx, xmm6, 9
	WORD $0xc3f6; BYTE $0x01                   // test    bl, 1
	JNE  LBB0_752

LBB0_273:
	LONG $0x1479e3c4; WORD $0x0af3 // vpextrb    ebx, xmm6, 10
	WORD $0xc3f6; BYTE $0x01       // test    bl, 1
	JE   LBB0_274

LBB0_753:
	LONG $0x397d63c4; WORD $0x01e1             // vextracti128    xmm1, ymm12, 1
	LONG $0x7ef9e1c4; BYTE $0xcb               // vmovq    rbx, xmm1
	LONG $0x147943c4; WORD $0x1834; BYTE $0x0a // vpextrb    byte [r8 + rbx], xmm14, 10
	LONG $0x1479e3c4; WORD $0x0bf3             // vpextrb    ebx, xmm6, 11
	WORD $0xc3f6; BYTE $0x01                   // test    bl, 1
	JNE  LBB0_754

LBB0_275:
	LONG $0x1479e3c4; WORD $0x0cf3 // vpextrb    ebx, xmm6, 12
	WORD $0xc3f6; BYTE $0x01       // test    bl, 1
	JE   LBB0_276

LBB0_755:
	LONG $0x7ef961c4; BYTE $0xdb               // vmovq    rbx, xmm11
	LONG $0x147943c4; WORD $0x1834; BYTE $0x0c // vpextrb    byte [r8 + rbx], xmm14, 12
	LONG $0x1479e3c4; WORD $0x0df3             // vpextrb    ebx, xmm6, 13
	WORD $0xc3f6; BYTE $0x01                   // test    bl, 1
	JNE  LBB0_756

LBB0_277:
	LONG $0x1479e3c4; WORD $0x0ef3 // vpextrb    ebx, xmm6, 14
	WORD $0xc3f6; BYTE $0x01       // test    bl, 1
	JE   LBB0_278

LBB0_757:
	LONG $0x397d63c4; WORD $0x01d9             // vextracti128    xmm1, ymm11, 1
	LONG $0x7ef9e1c4; BYTE $0xcb               // vmovq    rbx, xmm1
	LONG $0x147943c4; WORD $0x1834; BYTE $0x0e // vpextrb    byte [r8 + rbx], xmm14, 14
	LONG $0x1479e3c4; WORD $0x0ff3             // vpextrb    ebx, xmm6, 15
	WORD $0xc3f6; BYTE $0x01                   // test    bl, 1
	JNE  LBB0_758

LBB0_279:
	LONG $0x2c2444f6; BYTE $0x01 // test    byte [rsp + 44], 1
	JE   LBB0_280

LBB0_759:
	LONG $0x7ef961c4; BYTE $0xd3               // vmovq    rbx, xmm10
	LONG $0x397d63c4; WORD $0x01f1             // vextracti128    xmm1, ymm14, 1
	LONG $0x1479c3c4; WORD $0x180c; BYTE $0x00 // vpextrb    byte [r8 + rbx], xmm1, 0
	LONG $0x282444f6; BYTE $0x01               // test    byte [rsp + 40], 1
	JNE  LBB0_760

LBB0_281:
	LONG $0x242444f6; BYTE $0x01 // test    byte [rsp + 36], 1
	JE   LBB0_282

LBB0_761:
	LONG $0x397d63c4; WORD $0x01d1             // vextracti128    xmm1, ymm10, 1
	LONG $0x7ef9e1c4; BYTE $0xcb               // vmovq    rbx, xmm1
	LONG $0x397d63c4; WORD $0x01f1             // vextracti128    xmm1, ymm14, 1
	LONG $0x1479c3c4; WORD $0x180c; BYTE $0x02 // vpextrb    byte [r8 + rbx], xmm1, 2
	LONG $0x202444f6; BYTE $0x01               // test    byte [rsp + 32], 1
	JNE  LBB0_762

LBB0_283:
	LONG $0x1c2444f6; BYTE $0x01 // test    byte [rsp + 28], 1
	JE   LBB0_284

LBB0_763:
	LONG $0x7ef961c4; BYTE $0xcb               // vmovq    rbx, xmm9
	LONG $0x397d63c4; WORD $0x01f1             // vextracti128    xmm1, ymm14, 1
	LONG $0x1479c3c4; WORD $0x180c; BYTE $0x04 // vpextrb    byte [r8 + rbx], xmm1, 4
	LONG $0x182444f6; BYTE $0x01               // test    byte [rsp + 24], 1
	JNE  LBB0_764

LBB0_285:
	LONG $0x142444f6; BYTE $0x01 // test    byte [rsp + 20], 1
	JE   LBB0_286

LBB0_765:
	LONG $0x397d63c4; WORD $0x01c9             // vextracti128    xmm1, ymm9, 1
	LONG $0x7ef9e1c4; BYTE $0xcb               // vmovq    rbx, xmm1
	LONG $0x397d63c4; WORD $0x01f1             // vextracti128    xmm1, ymm14, 1
	LONG $0x1479c3c4; WORD $0x180c; BYTE $0x06 // vpextrb    byte [r8 + rbx], xmm1, 6
	LONG $0x01c1f641                           // test    r9b, 1
	JNE  LBB0_766

LBB0_287:
	WORD $0xc2f6; BYTE $0x01 // test    dl, 1
	QUAD $0x00000128249c8b48 // mov    rbx, qword [rsp + 296]
	JE   LBB0_288

LBB0_767:
	LONG $0x7ef961c4; BYTE $0xc2               // vmovq    rdx, xmm8
	LONG $0x397d63c4; WORD $0x01f1             // vextracti128    xmm1, ymm14, 1
	LONG $0x1479c3c4; WORD $0x100c; BYTE $0x08 // vpextrb    byte [r8 + rdx], xmm1, 8
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JNE  LBB0_768

LBB0_289:
	LONG $0x01c6f640         // test    sil, 1
	QUAD $0x0000013024948b48 // mov    rdx, qword [rsp + 304]
	JE   LBB0_290

LBB0_769:
	LONG $0x397d63c4; WORD $0x01c1             // vextracti128    xmm1, ymm8, 1
	LONG $0x7ef9e1c4; BYTE $0xc9               // vmovq    rcx, xmm1
	LONG $0x397d63c4; WORD $0x01f1             // vextracti128    xmm1, ymm14, 1
	LONG $0x1479c3c4; WORD $0x080c; BYTE $0x0a // vpextrb    byte [r8 + rcx], xmm1, 10
	WORD $0x01a8                               // test    al, 1
	QUAD $0x0000009824b48b48                   // mov    rsi, qword [rsp + 152]
	JNE  LBB0_770

LBB0_291:
	LONG $0x01c5f641 // test    r13b, 1
	JE   LBB0_292

LBB0_771:
	LONG $0x7ef9e1c4; BYTE $0xf9               // vmovq    rcx, xmm7
	LONG $0x397d63c4; WORD $0x01f1             // vextracti128    xmm1, ymm14, 1
	LONG $0x1479c3c4; WORD $0x080c; BYTE $0x0c // vpextrb    byte [r8 + rcx], xmm1, 12
	LONG $0x01c2f641                           // test    r10b, 1
	QUAD $0x0000011824ac8b4c                   // mov    r13, qword [rsp + 280]
	JNE  LBB0_772

LBB0_293:
	LONG $0x01c3f641 // test    r11b, 1
	JE   LBB0_294

LBB0_773:
	LONG $0x397de3c4; WORD $0x01f9             // vextracti128    xmm1, ymm7, 1
	LONG $0x7ef9e1c4; BYTE $0xc9               // vmovq    rcx, xmm1
	LONG $0x397d63c4; WORD $0x01f1             // vextracti128    xmm1, ymm14, 1
	LONG $0x1479c3c4; WORD $0x080c; BYTE $0x0e // vpextrb    byte [r8 + rcx], xmm1, 14
	LONG $0x01c6f641                           // test    r14b, 1
	QUAD $0x0000012024848b48                   // mov    rax, qword [rsp + 288]
	QUAD $0x000000e8248c8b4c                   // mov    r9, qword [rsp + 232]
	JNE  LBB0_295
	JMP  LBB0_296

LBB0_224:
	LONG $0x1479e3c4; WORD $0x01f1 // vpextrb    ecx, xmm6, 1
	WORD $0xc1f6; BYTE $0x01       // test    cl, 1
	JE   LBB0_225

LBB0_720:
	LONG $0x2009e3c4; WORD $0x370c; BYTE $0x01 // vpinsrb    xmm1, xmm14, byte [rdi + rsi], 1
	LONG $0x020d63c4; WORD $0x0ff1             // vpblendd    ymm14, ymm14, ymm1, 15
	LONG $0x24548b48; BYTE $0x68               // mov    rdx, qword [rsp + 104]
	LONG $0x1479e3c4; WORD $0x02f1             // vpextrb    ecx, xmm6, 2
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JNE  LBB0_226
	JMP  LBB0_227

LBB0_228:
	LONG $0x1479e3c4; WORD $0x04f1 // vpextrb    ecx, xmm6, 4
	WORD $0xc1f6; BYTE $0x01       // test    cl, 1
	JE   LBB0_229

LBB0_722:
	QUAD $0x00000108248c8b48                   // mov    rcx, qword [rsp + 264]
	LONG $0x2009e3c4; WORD $0x0f0c; BYTE $0x04 // vpinsrb    xmm1, xmm14, byte [rdi + rcx], 4
	LONG $0x020d63c4; WORD $0x0ff1             // vpblendd    ymm14, ymm14, ymm1, 15
	LONG $0x1479e3c4; WORD $0x05f1             // vpextrb    ecx, xmm6, 5
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JNE  LBB0_723

LBB0_230:
	LONG $0x1479e3c4; WORD $0x06f1 // vpextrb    ecx, xmm6, 6
	WORD $0xc1f6; BYTE $0x01       // test    cl, 1
	JE   LBB0_231

LBB0_724:
	LONG $0x2009a3c4; WORD $0x0f0c; BYTE $0x06 // vpinsrb    xmm1, xmm14, byte [rdi + r9], 6
	LONG $0x020d63c4; WORD $0x0ff1             // vpblendd    ymm14, ymm14, ymm1, 15
	LONG $0x1479e3c4; WORD $0x07f1             // vpextrb    ecx, xmm6, 7
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JNE  LBB0_725

LBB0_232:
	LONG $0x1479e3c4; WORD $0x08f1 // vpextrb    ecx, xmm6, 8
	WORD $0xc1f6; BYTE $0x01       // test    cl, 1
	JE   LBB0_233

LBB0_726:
	LONG $0x2009e3c4; WORD $0x370c; BYTE $0x08 // vpinsrb    xmm1, xmm14, byte [rdi + rsi], 8
	LONG $0x020d63c4; WORD $0x0ff1             // vpblendd    ymm14, ymm14, ymm1, 15
	LONG $0x24548b48; BYTE $0x58               // mov    rdx, qword [rsp + 88]
	LONG $0x1479e3c4; WORD $0x09f1             // vpextrb    ecx, xmm6, 9
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JNE  LBB0_727

LBB0_234:
	LONG $0x1479e3c4; WORD $0x0af1 // vpextrb    ecx, xmm6, 10
	WORD $0xc1f6; BYTE $0x01       // test    cl, 1
	JE   LBB0_235

LBB0_728:
	LONG $0x2009a3c4; WORD $0x1f0c; BYTE $0x0a // vpinsrb    xmm1, xmm14, byte [rdi + r11], 10
	LONG $0x020d63c4; WORD $0x0ff1             // vpblendd    ymm14, ymm14, ymm1, 15
	LONG $0x1479e3c4; WORD $0x0bf1             // vpextrb    ecx, xmm6, 11
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JNE  LBB0_729

LBB0_236:
	LONG $0x1479e3c4; WORD $0x0cf1 // vpextrb    ecx, xmm6, 12
	WORD $0xc1f6; BYTE $0x01       // test    cl, 1
	JE   LBB0_237

LBB0_730:
	QUAD $0x000000f824848b48                   // mov    rax, qword [rsp + 248]
	LONG $0x2009e3c4; WORD $0x070c; BYTE $0x0c // vpinsrb    xmm1, xmm14, byte [rdi + rax], 12
	LONG $0x020d63c4; WORD $0x0ff1             // vpblendd    ymm14, ymm14, ymm1, 15
	LONG $0x1479e3c4; WORD $0x0df1             // vpextrb    ecx, xmm6, 13
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JNE  LBB0_238
	JMP  LBB0_239

LBB0_250:
	LONG $0x1479e3c4; WORD $0x04c8 // vpextrb    eax, xmm1, 4
	LONG $0x1c244489               // mov    dword [rsp + 28], eax
	WORD $0x01a8                   // test    al, 1
	JE   LBB0_251

LBB0_732:
	LONG $0x397d63c4; WORD $0x01f2             // vextracti128    xmm2, ymm14, 1
	LONG $0x2069e3c4; WORD $0x0f14; BYTE $0x04 // vpinsrb    xmm2, xmm2, byte [rdi + rcx], 4
	LONG $0x380d63c4; WORD $0x01f2             // vinserti128    ymm14, ymm14, xmm2, 1
	LONG $0x1479e3c4; WORD $0x05c8             // vpextrb    eax, xmm1, 5
	LONG $0x18244489                           // mov    dword [rsp + 24], eax
	WORD $0x01a8                               // test    al, 1
	JNE  LBB0_733

LBB0_252:
	LONG $0x1479e3c4; WORD $0x06c8 // vpextrb    eax, xmm1, 6
	LONG $0x14244489               // mov    dword [rsp + 20], eax
	WORD $0x01a8                   // test    al, 1
	JE   LBB0_253

LBB0_734:
	LONG $0x397d63c4; WORD $0x01f2             // vextracti128    xmm2, ymm14, 1
	LONG $0x2069e3c4; WORD $0x3714; BYTE $0x06 // vpinsrb    xmm2, xmm2, byte [rdi + rsi], 6
	LONG $0x380d63c4; WORD $0x01f2             // vinserti128    ymm14, ymm14, xmm2, 1
	LONG $0x1479c3c4; WORD $0x07c9             // vpextrb    r9d, xmm1, 7
	LONG $0x01c1f641                           // test    r9b, 1
	JNE  LBB0_735

LBB0_254:
	LONG $0x1479e3c4; WORD $0x08ca // vpextrb    edx, xmm1, 8
	WORD $0xc2f6; BYTE $0x01       // test    dl, 1
	JE   LBB0_255

LBB0_736:
	LONG $0x397d63c4; WORD $0x01f2             // vextracti128    xmm2, ymm14, 1
	QUAD $0x000000d824848b48                   // mov    rax, qword [rsp + 216]
	LONG $0x2069e3c4; WORD $0x0714; BYTE $0x08 // vpinsrb    xmm2, xmm2, byte [rdi + rax], 8
	LONG $0x380d63c4; WORD $0x01f2             // vinserti128    ymm14, ymm14, xmm2, 1
	LONG $0x1479e3c4; WORD $0x09c9             // vpextrb    ecx, xmm1, 9
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JNE  LBB0_737

LBB0_256:
	LONG $0x1479e3c4; WORD $0x0ace // vpextrb    esi, xmm1, 10
	LONG $0x01c6f640               // test    sil, 1
	JE   LBB0_257

LBB0_738:
	LONG $0x397d63c4; WORD $0x01f2             // vextracti128    xmm2, ymm14, 1
	QUAD $0x000000c824848b48                   // mov    rax, qword [rsp + 200]
	LONG $0x2069e3c4; WORD $0x0714; BYTE $0x0a // vpinsrb    xmm2, xmm2, byte [rdi + rax], 10
	LONG $0x380d63c4; WORD $0x01f2             // vinserti128    ymm14, ymm14, xmm2, 1
	LONG $0x1479e3c4; WORD $0x0bc8             // vpextrb    eax, xmm1, 11
	WORD $0x01a8                               // test    al, 1
	JNE  LBB0_739

LBB0_258:
	LONG $0x1479c3c4; WORD $0x0ccd // vpextrb    r13d, xmm1, 12
	LONG $0x01c5f641               // test    r13b, 1
	JE   LBB0_259

LBB0_740:
	LONG $0x397d63c4; WORD $0x01f2             // vextracti128    xmm2, ymm14, 1
	QUAD $0x000000b8249c8b48                   // mov    rbx, qword [rsp + 184]
	LONG $0x2069e3c4; WORD $0x1f14; BYTE $0x0c // vpinsrb    xmm2, xmm2, byte [rdi + rbx], 12
	LONG $0x380d63c4; WORD $0x01f2             // vinserti128    ymm14, ymm14, xmm2, 1
	LONG $0x1479c3c4; WORD $0x0dca             // vpextrb    r10d, xmm1, 13
	LONG $0x01c2f641                           // test    r10b, 1
	JNE  LBB0_741

LBB0_260:
	LONG $0x1479c3c4; WORD $0x0ecb // vpextrb    r11d, xmm1, 14
	LONG $0x01c3f641               // test    r11b, 1
	JE   LBB0_261

LBB0_742:
	LONG $0x397d63c4; WORD $0x01f2             // vextracti128    xmm2, ymm14, 1
	QUAD $0x000000a8249c8b48                   // mov    rbx, qword [rsp + 168]
	LONG $0x2069e3c4; WORD $0x1f14; BYTE $0x0e // vpinsrb    xmm2, xmm2, byte [rdi + rbx], 14
	LONG $0x380d63c4; WORD $0x01f2             // vinserti128    ymm14, ymm14, xmm2, 1
	LONG $0x1479c3c4; WORD $0x0fce             // vpextrb    r14d, xmm1, 15
	LONG $0x01c6f641                           // test    r14b, 1
	JNE  LBB0_262
	JMP  LBB0_263

LBB0_264:
	LONG $0x1479e3c4; WORD $0x01f3 // vpextrb    ebx, xmm6, 1
	WORD $0xc3f6; BYTE $0x01       // test    bl, 1
	JE   LBB0_265

LBB0_744:
	LONG $0x16f963c4; WORD $0x01fb             // vpextrq    rbx, xmm15, 1
	LONG $0x147943c4; WORD $0x1834; BYTE $0x01 // vpextrb    byte [r8 + rbx], xmm14, 1
	LONG $0x1479e3c4; WORD $0x02f3             // vpextrb    ebx, xmm6, 2
	WORD $0xc3f6; BYTE $0x01                   // test    bl, 1
	QUAD $0x000000e024bc8b4c                   // mov    r15, qword [rsp + 224]
	JNE  LBB0_745

LBB0_266:
	LONG $0x1479e3c4; WORD $0x03f3 // vpextrb    ebx, xmm6, 3
	WORD $0xc3f6; BYTE $0x01       // test    bl, 1
	JE   LBB0_267

LBB0_746:
	LONG $0x397d63c4; WORD $0x01f9             // vextracti128    xmm1, ymm15, 1
	LONG $0x16f9e3c4; WORD $0x01cb             // vpextrq    rbx, xmm1, 1
	LONG $0x147943c4; WORD $0x1834; BYTE $0x03 // vpextrb    byte [r8 + rbx], xmm14, 3
	LONG $0x1479e3c4; WORD $0x04f3             // vpextrb    ebx, xmm6, 4
	WORD $0xc3f6; BYTE $0x01                   // test    bl, 1
	JNE  LBB0_747

LBB0_268:
	LONG $0x1479e3c4; WORD $0x05f3 // vpextrb    ebx, xmm6, 5
	WORD $0xc3f6; BYTE $0x01       // test    bl, 1
	JE   LBB0_269

LBB0_748:
	LONG $0x16f9e3c4; WORD $0x01eb             // vpextrq    rbx, xmm5, 1
	LONG $0x147943c4; WORD $0x1834; BYTE $0x05 // vpextrb    byte [r8 + rbx], xmm14, 5
	LONG $0x1479e3c4; WORD $0x06f3             // vpextrb    ebx, xmm6, 6
	WORD $0xc3f6; BYTE $0x01                   // test    bl, 1
	JNE  LBB0_749

LBB0_270:
	LONG $0x1479e3c4; WORD $0x07f3 // vpextrb    ebx, xmm6, 7
	WORD $0xc3f6; BYTE $0x01       // test    bl, 1
	JE   LBB0_271

LBB0_750:
	LONG $0x397de3c4; WORD $0x01e9             // vextracti128    xmm1, ymm5, 1
	LONG $0x16f9e3c4; WORD $0x01cb             // vpextrq    rbx, xmm1, 1
	LONG $0x147943c4; WORD $0x1834; BYTE $0x07 // vpextrb    byte [r8 + rbx], xmm14, 7
	LONG $0x1479e3c4; WORD $0x08f3             // vpextrb    ebx, xmm6, 8
	WORD $0xc3f6; BYTE $0x01                   // test    bl, 1
	JNE  LBB0_751

LBB0_272:
	LONG $0x1479e3c4; WORD $0x09f3 // vpextrb    ebx, xmm6, 9
	WORD $0xc3f6; BYTE $0x01       // test    bl, 1
	JE   LBB0_273

LBB0_752:
	LONG $0x16f963c4; WORD $0x01e3             // vpextrq    rbx, xmm12, 1
	LONG $0x147943c4; WORD $0x1834; BYTE $0x09 // vpextrb    byte [r8 + rbx], xmm14, 9
	LONG $0x1479e3c4; WORD $0x0af3             // vpextrb    ebx, xmm6, 10
	WORD $0xc3f6; BYTE $0x01                   // test    bl, 1
	JNE  LBB0_753

LBB0_274:
	LONG $0x1479e3c4; WORD $0x0bf3 // vpextrb    ebx, xmm6, 11
	WORD $0xc3f6; BYTE $0x01       // test    bl, 1
	JE   LBB0_275

LBB0_754:
	LONG $0x397d63c4; WORD $0x01e1             // vextracti128    xmm1, ymm12, 1
	LONG $0x16f9e3c4; WORD $0x01cb             // vpextrq    rbx, xmm1, 1
	LONG $0x147943c4; WORD $0x1834; BYTE $0x0b // vpextrb    byte [r8 + rbx], xmm14, 11
	LONG $0x1479e3c4; WORD $0x0cf3             // vpextrb    ebx, xmm6, 12
	WORD $0xc3f6; BYTE $0x01                   // test    bl, 1
	JNE  LBB0_755

LBB0_276:
	LONG $0x1479e3c4; WORD $0x0df3 // vpextrb    ebx, xmm6, 13
	WORD $0xc3f6; BYTE $0x01       // test    bl, 1
	JE   LBB0_277

LBB0_756:
	LONG $0x16f963c4; WORD $0x01db             // vpextrq    rbx, xmm11, 1
	LONG $0x147943c4; WORD $0x1834; BYTE $0x0d // vpextrb    byte [r8 + rbx], xmm14, 13
	LONG $0x1479e3c4; WORD $0x0ef3             // vpextrb    ebx, xmm6, 14
	WORD $0xc3f6; BYTE $0x01                   // test    bl, 1
	JNE  LBB0_757

LBB0_278:
	LONG $0x1479e3c4; WORD $0x0ff3 // vpextrb    ebx, xmm6, 15
	WORD $0xc3f6; BYTE $0x01       // test    bl, 1
	JE   LBB0_279

LBB0_758:
	LONG $0x397d63c4; WORD $0x01d9             // vextracti128    xmm1, ymm11, 1
	LONG $0x16f9e3c4; WORD $0x01cb             // vpextrq    rbx, xmm1, 1
	LONG $0x147943c4; WORD $0x1834; BYTE $0x0f // vpextrb    byte [r8 + rbx], xmm14, 15
	LONG $0x2c2444f6; BYTE $0x01               // test    byte [rsp + 44], 1
	JNE  LBB0_759

LBB0_280:
	LONG $0x282444f6; BYTE $0x01 // test    byte [rsp + 40], 1
	JE   LBB0_281

LBB0_760:
	LONG $0x16f963c4; WORD $0x01d3             // vpextrq    rbx, xmm10, 1
	LONG $0x397d63c4; WORD $0x01f1             // vextracti128    xmm1, ymm14, 1
	LONG $0x1479c3c4; WORD $0x180c; BYTE $0x01 // vpextrb    byte [r8 + rbx], xmm1, 1
	LONG $0x242444f6; BYTE $0x01               // test    byte [rsp + 36], 1
	JNE  LBB0_761

LBB0_282:
	LONG $0x202444f6; BYTE $0x01 // test    byte [rsp + 32], 1
	JE   LBB0_283

LBB0_762:
	LONG $0x397d63c4; WORD $0x01d1             // vextracti128    xmm1, ymm10, 1
	LONG $0x16f9e3c4; WORD $0x01cb             // vpextrq    rbx, xmm1, 1
	LONG $0x397d63c4; WORD $0x01f1             // vextracti128    xmm1, ymm14, 1
	LONG $0x1479c3c4; WORD $0x180c; BYTE $0x03 // vpextrb    byte [r8 + rbx], xmm1, 3
	LONG $0x1c2444f6; BYTE $0x01               // test    byte [rsp + 28], 1
	JNE  LBB0_763

LBB0_284:
	LONG $0x182444f6; BYTE $0x01 // test    byte [rsp + 24], 1
	JE   LBB0_285

LBB0_764:
	LONG $0x16f963c4; WORD $0x01cb             // vpextrq    rbx, xmm9, 1
	LONG $0x397d63c4; WORD $0x01f1             // vextracti128    xmm1, ymm14, 1
	LONG $0x1479c3c4; WORD $0x180c; BYTE $0x05 // vpextrb    byte [r8 + rbx], xmm1, 5
	LONG $0x142444f6; BYTE $0x01               // test    byte [rsp + 20], 1
	JNE  LBB0_765

LBB0_286:
	LONG $0x01c1f641 // test    r9b, 1
	JE   LBB0_287

LBB0_766:
	LONG $0x397d63c4; WORD $0x01c9             // vextracti128    xmm1, ymm9, 1
	LONG $0x16f9e3c4; WORD $0x01cb             // vpextrq    rbx, xmm1, 1
	LONG $0x397d63c4; WORD $0x01f1             // vextracti128    xmm1, ymm14, 1
	LONG $0x1479c3c4; WORD $0x180c; BYTE $0x07 // vpextrb    byte [r8 + rbx], xmm1, 7
	WORD $0xc2f6; BYTE $0x01                   // test    dl, 1
	QUAD $0x00000128249c8b48                   // mov    rbx, qword [rsp + 296]
	JNE  LBB0_767

LBB0_288:
	WORD $0xc1f6; BYTE $0x01 // test    cl, 1
	JE   LBB0_289

LBB0_768:
	LONG $0x16f963c4; WORD $0x01c1             // vpextrq    rcx, xmm8, 1
	LONG $0x397d63c4; WORD $0x01f1             // vextracti128    xmm1, ymm14, 1
	LONG $0x1479c3c4; WORD $0x080c; BYTE $0x09 // vpextrb    byte [r8 + rcx], xmm1, 9
	LONG $0x01c6f640                           // test    sil, 1
	QUAD $0x0000013024948b48                   // mov    rdx, qword [rsp + 304]
	JNE  LBB0_769

LBB0_290:
	WORD $0x01a8             // test    al, 1
	QUAD $0x0000009824b48b48 // mov    rsi, qword [rsp + 152]
	JE   LBB0_291

LBB0_770:
	LONG $0x397d63c4; WORD $0x01c1             // vextracti128    xmm1, ymm8, 1
	LONG $0x16f9e3c4; WORD $0x01c9             // vpextrq    rcx, xmm1, 1
	LONG $0x397d63c4; WORD $0x01f1             // vextracti128    xmm1, ymm14, 1
	LONG $0x1479c3c4; WORD $0x080c; BYTE $0x0b // vpextrb    byte [r8 + rcx], xmm1, 11
	LONG $0x01c5f641                           // test    r13b, 1
	JNE  LBB0_771

LBB0_292:
	LONG $0x01c2f641         // test    r10b, 1
	QUAD $0x0000011824ac8b4c // mov    r13, qword [rsp + 280]
	JE   LBB0_293

LBB0_772:
	LONG $0x16f9e3c4; WORD $0x01f9             // vpextrq    rcx, xmm7, 1
	LONG $0x397d63c4; WORD $0x01f1             // vextracti128    xmm1, ymm14, 1
	LONG $0x1479c3c4; WORD $0x080c; BYTE $0x0d // vpextrb    byte [r8 + rcx], xmm1, 13
	LONG $0x01c3f641                           // test    r11b, 1
	JNE  LBB0_773

LBB0_294:
	LONG $0x01c6f641         // test    r14b, 1
	QUAD $0x0000012024848b48 // mov    rax, qword [rsp + 288]
	QUAD $0x000000e8248c8b4c // mov    r9, qword [rsp + 232]
	JE   LBB0_296

LBB0_295:
	LONG $0x397de3c4; WORD $0x01f9             // vextracti128    xmm1, ymm7, 1
	LONG $0x16f9e3c4; WORD $0x01c9             // vpextrq    rcx, xmm1, 1
	LONG $0x397d63c4; WORD $0x01f1             // vextracti128    xmm1, ymm14, 1
	LONG $0x1479c3c4; WORD $0x080c; BYTE $0x0f // vpextrb    byte [r8 + rcx], xmm1, 15

LBB0_296:
	QUAD $0x0002c0248c6ffdc5; BYTE $0x00 // vmovdqa    ymm1, yword [rsp + 704]
	QUAD $0x00020024bceb75c5; BYTE $0x00 // vpor    ymm15, ymm1, yword [rsp + 512]
	QUAD $0x0001e024acebf5c5; BYTE $0x00 // vpor    ymm5, ymm1, yword [rsp + 480]
	QUAD $0x0001802494eb75c5; BYTE $0x00 // vpor    ymm10, ymm1, yword [rsp + 384]
	QUAD $0x000160248ceb75c5; BYTE $0x00 // vpor    ymm9, ymm1, yword [rsp + 352]
	QUAD $0x0001c024a4eb75c5; BYTE $0x00 // vpor    ymm12, ymm1, yword [rsp + 448]
	QUAD $0x0001a0249ceb75c5; BYTE $0x00 // vpor    ymm11, ymm1, yword [rsp + 416]
	QUAD $0x0001402484eb75c5; BYTE $0x00 // vpor    ymm8, ymm1, yword [rsp + 320]
	LONG $0xf9ebddc5                     // vpor    ymm7, ymm4, ymm1
	LONG $0x463de3c4; WORD $0x31cf       // vperm2i128    ymm1, ymm8, ymm7, 49
	LONG $0x383de3c4; WORD $0x01d7       // vinserti128    ymm2, ymm8, xmm7, 1
	LONG $0xc9c6ecc5; BYTE $0x88         // vshufps    ymm1, ymm2, ymm1, 136
	LONG $0x461dc3c4; WORD $0x31d3       // vperm2i128    ymm2, ymm12, ymm11, 49
	LONG $0x381dc3c4; WORD $0x01db       // vinserti128    ymm3, ymm12, xmm11, 1
	LONG $0xd2c6e4c5; BYTE $0x88         // vshufps    ymm2, ymm3, ymm2, 136
	LONG $0x462dc3c4; WORD $0x31d9       // vperm2i128    ymm3, ymm10, ymm9, 49
	LONG $0x382d43c4; WORD $0x01e9       // vinserti128    ymm13, ymm10, xmm9, 1
	LONG $0xdbc694c5; BYTE $0x88         // vshufps    ymm3, ymm13, ymm3, 136
	LONG $0x460563c4; WORD $0x31ed       // vperm2i128    ymm13, ymm15, ymm5, 49
	LONG $0x380563c4; WORD $0x01f5       // vinserti128    ymm14, ymm15, xmm5, 1
	LONG $0xc60c41c4; WORD $0x88ed       // vshufps    ymm13, ymm14, ymm13, 136
	LONG $0x667d41c4; BYTE $0xed         // vpcmpgtd    ymm13, ymm0, ymm13
	LONG $0xdb66fdc5                     // vpcmpgtd    ymm3, ymm0, ymm3
	LONG $0xdb6b95c5                     // vpackssdw    ymm3, ymm13, ymm3
	LONG $0xd266fdc5                     // vpcmpgtd    ymm2, ymm0, ymm2
	LONG $0xc966fdc5                     // vpcmpgtd    ymm1, ymm0, ymm1
	LONG $0xc96bedc5                     // vpackssdw    ymm1, ymm2, ymm1
	LONG $0x00fde3c4; WORD $0xd8d3       // vpermq    ymm2, ymm3, 216
	LONG $0x00fde3c4; WORD $0xd8c9       // vpermq    ymm1, ymm1, 216
	LONG $0xc963edc5                     // vpacksswb    ymm1, ymm2, ymm1
	LONG $0xf6dbf5c5                     // vpand    ymm6, ymm1, ymm6
	LONG $0xf17ef9c5                     // vmovd    ecx, xmm6
	WORD $0xc1f6; BYTE $0x01             // test    cl, 1
	JE   LBB0_297
	LONG $0x787d62c4; WORD $0x1734       // vpbroadcastb    ymm14, byte [rdi + rdx]
	LONG $0x1479e3c4; WORD $0x01f1       // vpextrb    ecx, xmm6, 1
	WORD $0xc1f6; BYTE $0x01             // test    cl, 1
	JNE  LBB0_775

LBB0_298:
	LONG $0x24548b48; BYTE $0x68   // mov    rdx, qword [rsp + 104]
	LONG $0x1479e3c4; WORD $0x02f1 // vpextrb    ecx, xmm6, 2
	WORD $0xc1f6; BYTE $0x01       // test    cl, 1
	JE   LBB0_300

LBB0_299:
	LONG $0x2009e3c4; WORD $0x1f0c; BYTE $0x02 // vpinsrb    xmm1, xmm14, byte [rdi + rbx], 2
	LONG $0x020d63c4; WORD $0x0ff1             // vpblendd    ymm14, ymm14, ymm1, 15

LBB0_300:
	LONG $0x24748b48; BYTE $0x60               // mov    rsi, qword [rsp + 96]
	LONG $0x24548b4c; BYTE $0x48               // mov    r10, qword [rsp + 72]
	LONG $0x1479e3c4; WORD $0x03f1             // vpextrb    ecx, xmm6, 3
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JE   LBB0_301
	QUAD $0x00000110248c8b48                   // mov    rcx, qword [rsp + 272]
	LONG $0x2009e3c4; WORD $0x0f0c; BYTE $0x03 // vpinsrb    xmm1, xmm14, byte [rdi + rcx], 3
	LONG $0x020d63c4; WORD $0x0ff1             // vpblendd    ymm14, ymm14, ymm1, 15
	LONG $0x1479e3c4; WORD $0x04f1             // vpextrb    ecx, xmm6, 4
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JNE  LBB0_777

LBB0_302:
	LONG $0x1479e3c4; WORD $0x05f1 // vpextrb    ecx, xmm6, 5
	WORD $0xc1f6; BYTE $0x01       // test    cl, 1
	JE   LBB0_303

LBB0_778:
	LONG $0x2009e3c4; WORD $0x170c; BYTE $0x05 // vpinsrb    xmm1, xmm14, byte [rdi + rdx], 5
	LONG $0x020d63c4; WORD $0x0ff1             // vpblendd    ymm14, ymm14, ymm1, 15
	LONG $0x1479e3c4; WORD $0x06f1             // vpextrb    ecx, xmm6, 6
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JNE  LBB0_779

LBB0_304:
	LONG $0x1479e3c4; WORD $0x07f1 // vpextrb    ecx, xmm6, 7
	WORD $0xc1f6; BYTE $0x01       // test    cl, 1
	JE   LBB0_305

LBB0_780:
	LONG $0x2009a3c4; WORD $0x0f0c; BYTE $0x07 // vpinsrb    xmm1, xmm14, byte [rdi + r9], 7
	LONG $0x020d63c4; WORD $0x0ff1             // vpblendd    ymm14, ymm14, ymm1, 15
	LONG $0x1479e3c4; WORD $0x08f1             // vpextrb    ecx, xmm6, 8
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JNE  LBB0_781

LBB0_306:
	LONG $0x24548b48; BYTE $0x58   // mov    rdx, qword [rsp + 88]
	LONG $0x1479e3c4; WORD $0x09f1 // vpextrb    ecx, xmm6, 9
	WORD $0xc1f6; BYTE $0x01       // test    cl, 1
	JE   LBB0_308

LBB0_307:
	LONG $0x2009a3c4; WORD $0x3f0c; BYTE $0x09 // vpinsrb    xmm1, xmm14, byte [rdi + r15], 9
	LONG $0x020d63c4; WORD $0x0ff1             // vpblendd    ymm14, ymm14, ymm1, 15

LBB0_308:
	QUAD $0x0000009024848b48                   // mov    rax, qword [rsp + 144]
	QUAD $0x0000008824b48b48                   // mov    rsi, qword [rsp + 136]
	QUAD $0x00000080249c8b48                   // mov    rbx, qword [rsp + 128]
	LONG $0x244c8b4c; BYTE $0x78               // mov    r9, qword [rsp + 120]
	LONG $0x1479e3c4; WORD $0x0af1             // vpextrb    ecx, xmm6, 10
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JE   LBB0_309
	LONG $0x2009e3c4; WORD $0x070c; BYTE $0x0a // vpinsrb    xmm1, xmm14, byte [rdi + rax], 10
	LONG $0x020d63c4; WORD $0x0ff1             // vpblendd    ymm14, ymm14, ymm1, 15
	LONG $0x1479e3c4; WORD $0x0bf1             // vpextrb    ecx, xmm6, 11
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JNE  LBB0_783

LBB0_310:
	LONG $0x1479e3c4; WORD $0x0cf1 // vpextrb    ecx, xmm6, 12
	WORD $0xc1f6; BYTE $0x01       // test    cl, 1
	JE   LBB0_311

LBB0_784:
	QUAD $0x000000f824848b48                   // mov    rax, qword [rsp + 248]
	LONG $0x2009e3c4; WORD $0x070c; BYTE $0x0c // vpinsrb    xmm1, xmm14, byte [rdi + rax], 12
	LONG $0x020d63c4; WORD $0x0ff1             // vpblendd    ymm14, ymm14, ymm1, 15
	LONG $0x1479e3c4; WORD $0x0df1             // vpextrb    ecx, xmm6, 13
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JNE  LBB0_312
	JMP  LBB0_313

LBB0_297:
	LONG $0x1479e3c4; WORD $0x01f1 // vpextrb    ecx, xmm6, 1
	WORD $0xc1f6; BYTE $0x01       // test    cl, 1
	JE   LBB0_298

LBB0_775:
	LONG $0x2009e3c4; WORD $0x370c; BYTE $0x01 // vpinsrb    xmm1, xmm14, byte [rdi + rsi], 1
	LONG $0x020d63c4; WORD $0x0ff1             // vpblendd    ymm14, ymm14, ymm1, 15
	LONG $0x24548b48; BYTE $0x68               // mov    rdx, qword [rsp + 104]
	LONG $0x1479e3c4; WORD $0x02f1             // vpextrb    ecx, xmm6, 2
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JNE  LBB0_299
	JMP  LBB0_300

LBB0_301:
	LONG $0x1479e3c4; WORD $0x04f1 // vpextrb    ecx, xmm6, 4
	WORD $0xc1f6; BYTE $0x01       // test    cl, 1
	JE   LBB0_302

LBB0_777:
	QUAD $0x00000108248c8b48                   // mov    rcx, qword [rsp + 264]
	LONG $0x2009e3c4; WORD $0x0f0c; BYTE $0x04 // vpinsrb    xmm1, xmm14, byte [rdi + rcx], 4
	LONG $0x020d63c4; WORD $0x0ff1             // vpblendd    ymm14, ymm14, ymm1, 15
	LONG $0x1479e3c4; WORD $0x05f1             // vpextrb    ecx, xmm6, 5
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JNE  LBB0_778

LBB0_303:
	LONG $0x1479e3c4; WORD $0x06f1 // vpextrb    ecx, xmm6, 6
	WORD $0xc1f6; BYTE $0x01       // test    cl, 1
	JE   LBB0_304

LBB0_779:
	LONG $0x2009e3c4; WORD $0x070c; BYTE $0x06 // vpinsrb    xmm1, xmm14, byte [rdi + rax], 6
	LONG $0x020d63c4; WORD $0x0ff1             // vpblendd    ymm14, ymm14, ymm1, 15
	LONG $0x1479e3c4; WORD $0x07f1             // vpextrb    ecx, xmm6, 7
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JNE  LBB0_780

LBB0_305:
	LONG $0x1479e3c4; WORD $0x08f1 // vpextrb    ecx, xmm6, 8
	WORD $0xc1f6; BYTE $0x01       // test    cl, 1
	JE   LBB0_306

LBB0_781:
	LONG $0x2009e3c4; WORD $0x370c; BYTE $0x08 // vpinsrb    xmm1, xmm14, byte [rdi + rsi], 8
	LONG $0x020d63c4; WORD $0x0ff1             // vpblendd    ymm14, ymm14, ymm1, 15
	LONG $0x24548b48; BYTE $0x58               // mov    rdx, qword [rsp + 88]
	LONG $0x1479e3c4; WORD $0x09f1             // vpextrb    ecx, xmm6, 9
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JNE  LBB0_307
	JMP  LBB0_308

LBB0_309:
	LONG $0x1479e3c4; WORD $0x0bf1 // vpextrb    ecx, xmm6, 11
	WORD $0xc1f6; BYTE $0x01       // test    cl, 1
	JE   LBB0_310

LBB0_783:
	QUAD $0x0000010024848b48                   // mov    rax, qword [rsp + 256]
	LONG $0x2009e3c4; WORD $0x070c; BYTE $0x0b // vpinsrb    xmm1, xmm14, byte [rdi + rax], 11
	LONG $0x020d63c4; WORD $0x0ff1             // vpblendd    ymm14, ymm14, ymm1, 15
	LONG $0x1479e3c4; WORD $0x0cf1             // vpextrb    ecx, xmm6, 12
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JNE  LBB0_784

LBB0_311:
	LONG $0x1479e3c4; WORD $0x0df1 // vpextrb    ecx, xmm6, 13
	WORD $0xc1f6; BYTE $0x01       // test    cl, 1
	JE   LBB0_313

LBB0_312:
	LONG $0x2009e3c4; WORD $0x170c; BYTE $0x0d // vpinsrb    xmm1, xmm14, byte [rdi + rdx], 13
	LONG $0x020d63c4; WORD $0x0ff1             // vpblendd    ymm14, ymm14, ymm1, 15

LBB0_313:
	LONG $0x24448b48; BYTE $0x50               // mov    rax, qword [rsp + 80]
	LONG $0x24548b48; BYTE $0x40               // mov    rdx, qword [rsp + 64]
	LONG $0x1479e3c4; WORD $0x0ef1             // vpextrb    ecx, xmm6, 14
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JE   LBB0_315
	LONG $0x2009e3c4; WORD $0x070c; BYTE $0x0e // vpinsrb    xmm1, xmm14, byte [rdi + rax], 14
	LONG $0x020d63c4; WORD $0x0ff1             // vpblendd    ymm14, ymm14, ymm1, 15

LBB0_315:
	LONG $0x1479e3c4; WORD $0x0ff1             // vpextrb    ecx, xmm6, 15
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JE   LBB0_317
	LONG $0x2009a3c4; WORD $0x170c; BYTE $0x0f // vpinsrb    xmm1, xmm14, byte [rdi + r10], 15
	LONG $0x020d63c4; WORD $0x0ff1             // vpblendd    ymm14, ymm14, ymm1, 15

LBB0_317:
	LONG $0x397de3c4; WORD $0x01f1             // vextracti128    xmm1, ymm6, 1
	LONG $0xc87ef9c5                           // vmovd    eax, xmm1
	LONG $0x2c244489                           // mov    dword [rsp + 44], eax
	WORD $0x01a8                               // test    al, 1
	JE   LBB0_319
	LONG $0x397d63c4; WORD $0x01f2             // vextracti128    xmm2, ymm14, 1
	LONG $0x2069e3c4; WORD $0x1714; BYTE $0x00 // vpinsrb    xmm2, xmm2, byte [rdi + rdx], 0
	LONG $0x380d63c4; WORD $0x01f2             // vinserti128    ymm14, ymm14, xmm2, 1

LBB0_319:
	LONG $0x24448b48; BYTE $0x38               // mov    rax, qword [rsp + 56]
	LONG $0x1479e3c4; WORD $0x01c9             // vpextrb    ecx, xmm1, 1
	LONG $0x28244c89                           // mov    dword [rsp + 40], ecx
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JE   LBB0_320
	LONG $0x397d63c4; WORD $0x01f2             // vextracti128    xmm2, ymm14, 1
	LONG $0x2069e3c4; WORD $0x3714; BYTE $0x01 // vpinsrb    xmm2, xmm2, byte [rdi + rsi], 1
	LONG $0x380d63c4; WORD $0x01f2             // vinserti128    ymm14, ymm14, xmm2, 1
	LONG $0x1479e3c4; WORD $0x02c9             // vpextrb    ecx, xmm1, 2
	LONG $0x24244c89                           // mov    dword [rsp + 36], ecx
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JNE  LBB0_786

LBB0_321:
	LONG $0x1479e3c4; WORD $0x03c9 // vpextrb    ecx, xmm1, 3
	LONG $0x20244c89               // mov    dword [rsp + 32], ecx
	WORD $0xc1f6; BYTE $0x01       // test    cl, 1
	JE   LBB0_322

LBB0_787:
	LONG $0x397d63c4; WORD $0x01f2             // vextracti128    xmm2, ymm14, 1
	LONG $0x2069a3c4; WORD $0x0f14; BYTE $0x03 // vpinsrb    xmm2, xmm2, byte [rdi + r9], 3
	LONG $0x380d63c4; WORD $0x01f2             // vinserti128    ymm14, ymm14, xmm2, 1
	LONG $0x1479e3c4; WORD $0x04c9             // vpextrb    ecx, xmm1, 4
	LONG $0x1c244c89                           // mov    dword [rsp + 28], ecx
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JNE  LBB0_788

LBB0_323:
	LONG $0x1479e3c4; WORD $0x05c8 // vpextrb    eax, xmm1, 5
	LONG $0x18244489               // mov    dword [rsp + 24], eax
	WORD $0x01a8                   // test    al, 1
	JE   LBB0_325

LBB0_324:
	LONG $0x397d63c4; WORD $0x01f2             // vextracti128    xmm2, ymm14, 1
	LONG $0x2069a3c4; WORD $0x2f14; BYTE $0x05 // vpinsrb    xmm2, xmm2, byte [rdi + r13], 5
	LONG $0x380d63c4; WORD $0x01f2             // vinserti128    ymm14, ymm14, xmm2, 1

LBB0_325:
	LONG $0x24448b48; BYTE $0x70               // mov    rax, qword [rsp + 112]
	LONG $0x1479e3c4; WORD $0x06c9             // vpextrb    ecx, xmm1, 6
	LONG $0x14244c89                           // mov    dword [rsp + 20], ecx
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JE   LBB0_326
	LONG $0x397d63c4; WORD $0x01f2             // vextracti128    xmm2, ymm14, 1
	LONG $0x2069e3c4; WORD $0x0714; BYTE $0x06 // vpinsrb    xmm2, xmm2, byte [rdi + rax], 6
	LONG $0x380d63c4; WORD $0x01f2             // vinserti128    ymm14, ymm14, xmm2, 1
	LONG $0x1479c3c4; WORD $0x07c9             // vpextrb    r9d, xmm1, 7
	LONG $0x01c1f641                           // test    r9b, 1
	JNE  LBB0_790

LBB0_327:
	LONG $0x1479e3c4; WORD $0x08ca // vpextrb    edx, xmm1, 8
	WORD $0xc2f6; BYTE $0x01       // test    dl, 1
	JE   LBB0_328

LBB0_791:
	LONG $0x397d63c4; WORD $0x01f2             // vextracti128    xmm2, ymm14, 1
	QUAD $0x000000d824848b48                   // mov    rax, qword [rsp + 216]
	LONG $0x2069e3c4; WORD $0x0714; BYTE $0x08 // vpinsrb    xmm2, xmm2, byte [rdi + rax], 8
	LONG $0x380d63c4; WORD $0x01f2             // vinserti128    ymm14, ymm14, xmm2, 1
	LONG $0x1479e3c4; WORD $0x09c9             // vpextrb    ecx, xmm1, 9
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JNE  LBB0_792

LBB0_329:
	LONG $0x1479e3c4; WORD $0x0ace // vpextrb    esi, xmm1, 10
	LONG $0x01c6f640               // test    sil, 1
	JE   LBB0_330

LBB0_793:
	LONG $0x397d63c4; WORD $0x01f2             // vextracti128    xmm2, ymm14, 1
	QUAD $0x000000c824848b48                   // mov    rax, qword [rsp + 200]
	LONG $0x2069e3c4; WORD $0x0714; BYTE $0x0a // vpinsrb    xmm2, xmm2, byte [rdi + rax], 10
	LONG $0x380d63c4; WORD $0x01f2             // vinserti128    ymm14, ymm14, xmm2, 1
	LONG $0x1479e3c4; WORD $0x0bc8             // vpextrb    eax, xmm1, 11
	WORD $0x01a8                               // test    al, 1
	JNE  LBB0_794

LBB0_331:
	LONG $0x1479c3c4; WORD $0x0ccd // vpextrb    r13d, xmm1, 12
	LONG $0x01c5f641               // test    r13b, 1
	JE   LBB0_332

LBB0_795:
	LONG $0x397d63c4; WORD $0x01f2             // vextracti128    xmm2, ymm14, 1
	QUAD $0x000000b8249c8b48                   // mov    rbx, qword [rsp + 184]
	LONG $0x2069e3c4; WORD $0x1f14; BYTE $0x0c // vpinsrb    xmm2, xmm2, byte [rdi + rbx], 12
	LONG $0x380d63c4; WORD $0x01f2             // vinserti128    ymm14, ymm14, xmm2, 1
	LONG $0x1479c3c4; WORD $0x0dca             // vpextrb    r10d, xmm1, 13
	LONG $0x01c2f641                           // test    r10b, 1
	JNE  LBB0_796

LBB0_333:
	LONG $0x1479c3c4; WORD $0x0ecb // vpextrb    r11d, xmm1, 14
	LONG $0x01c3f641               // test    r11b, 1
	JE   LBB0_334

LBB0_797:
	LONG $0x397d63c4; WORD $0x01f2             // vextracti128    xmm2, ymm14, 1
	QUAD $0x000000a8249c8b48                   // mov    rbx, qword [rsp + 168]
	LONG $0x2069e3c4; WORD $0x1f14; BYTE $0x0e // vpinsrb    xmm2, xmm2, byte [rdi + rbx], 14
	LONG $0x380d63c4; WORD $0x01f2             // vinserti128    ymm14, ymm14, xmm2, 1
	LONG $0x1479c3c4; WORD $0x0fce             // vpextrb    r14d, xmm1, 15
	LONG $0x01c6f641                           // test    r14b, 1
	JNE  LBB0_335
	JMP  LBB0_336

LBB0_320:
	LONG $0x1479e3c4; WORD $0x02c9 // vpextrb    ecx, xmm1, 2
	LONG $0x24244c89               // mov    dword [rsp + 36], ecx
	WORD $0xc1f6; BYTE $0x01       // test    cl, 1
	JE   LBB0_321

LBB0_786:
	LONG $0x397d63c4; WORD $0x01f2             // vextracti128    xmm2, ymm14, 1
	LONG $0x2069e3c4; WORD $0x1f14; BYTE $0x02 // vpinsrb    xmm2, xmm2, byte [rdi + rbx], 2
	LONG $0x380d63c4; WORD $0x01f2             // vinserti128    ymm14, ymm14, xmm2, 1
	LONG $0x1479e3c4; WORD $0x03c9             // vpextrb    ecx, xmm1, 3
	LONG $0x20244c89                           // mov    dword [rsp + 32], ecx
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JNE  LBB0_787

LBB0_322:
	LONG $0x1479e3c4; WORD $0x04c9 // vpextrb    ecx, xmm1, 4
	LONG $0x1c244c89               // mov    dword [rsp + 28], ecx
	WORD $0xc1f6; BYTE $0x01       // test    cl, 1
	JE   LBB0_323

LBB0_788:
	LONG $0x397d63c4; WORD $0x01f2             // vextracti128    xmm2, ymm14, 1
	LONG $0x2069e3c4; WORD $0x0714; BYTE $0x04 // vpinsrb    xmm2, xmm2, byte [rdi + rax], 4
	LONG $0x380d63c4; WORD $0x01f2             // vinserti128    ymm14, ymm14, xmm2, 1
	LONG $0x1479e3c4; WORD $0x05c8             // vpextrb    eax, xmm1, 5
	LONG $0x18244489                           // mov    dword [rsp + 24], eax
	WORD $0x01a8                               // test    al, 1
	JNE  LBB0_324
	JMP  LBB0_325

LBB0_326:
	LONG $0x1479c3c4; WORD $0x07c9 // vpextrb    r9d, xmm1, 7
	LONG $0x01c1f641               // test    r9b, 1
	JE   LBB0_327

LBB0_790:
	LONG $0x397d63c4; WORD $0x01f2             // vextracti128    xmm2, ymm14, 1
	QUAD $0x000000f024848b48                   // mov    rax, qword [rsp + 240]
	LONG $0x2069e3c4; WORD $0x0714; BYTE $0x07 // vpinsrb    xmm2, xmm2, byte [rdi + rax], 7
	LONG $0x380d63c4; WORD $0x01f2             // vinserti128    ymm14, ymm14, xmm2, 1
	LONG $0x1479e3c4; WORD $0x08ca             // vpextrb    edx, xmm1, 8
	WORD $0xc2f6; BYTE $0x01                   // test    dl, 1
	JNE  LBB0_791

LBB0_328:
	LONG $0x1479e3c4; WORD $0x09c9 // vpextrb    ecx, xmm1, 9
	WORD $0xc1f6; BYTE $0x01       // test    cl, 1
	JE   LBB0_329

LBB0_792:
	LONG $0x397d63c4; WORD $0x01f2             // vextracti128    xmm2, ymm14, 1
	QUAD $0x000000d024848b48                   // mov    rax, qword [rsp + 208]
	LONG $0x2069e3c4; WORD $0x0714; BYTE $0x09 // vpinsrb    xmm2, xmm2, byte [rdi + rax], 9
	LONG $0x380d63c4; WORD $0x01f2             // vinserti128    ymm14, ymm14, xmm2, 1
	LONG $0x1479e3c4; WORD $0x0ace             // vpextrb    esi, xmm1, 10
	LONG $0x01c6f640                           // test    sil, 1
	JNE  LBB0_793

LBB0_330:
	LONG $0x1479e3c4; WORD $0x0bc8 // vpextrb    eax, xmm1, 11
	WORD $0x01a8                   // test    al, 1
	JE   LBB0_331

LBB0_794:
	LONG $0x397d63c4; WORD $0x01f2             // vextracti128    xmm2, ymm14, 1
	QUAD $0x000000c0249c8b48                   // mov    rbx, qword [rsp + 192]
	LONG $0x2069e3c4; WORD $0x1f14; BYTE $0x0b // vpinsrb    xmm2, xmm2, byte [rdi + rbx], 11
	LONG $0x380d63c4; WORD $0x01f2             // vinserti128    ymm14, ymm14, xmm2, 1
	LONG $0x1479c3c4; WORD $0x0ccd             // vpextrb    r13d, xmm1, 12
	LONG $0x01c5f641                           // test    r13b, 1
	JNE  LBB0_795

LBB0_332:
	LONG $0x1479c3c4; WORD $0x0dca // vpextrb    r10d, xmm1, 13
	LONG $0x01c2f641               // test    r10b, 1
	JE   LBB0_333

LBB0_796:
	LONG $0x397d63c4; WORD $0x01f2             // vextracti128    xmm2, ymm14, 1
	QUAD $0x000000b0249c8b48                   // mov    rbx, qword [rsp + 176]
	LONG $0x2069e3c4; WORD $0x1f14; BYTE $0x0d // vpinsrb    xmm2, xmm2, byte [rdi + rbx], 13
	LONG $0x380d63c4; WORD $0x01f2             // vinserti128    ymm14, ymm14, xmm2, 1
	LONG $0x1479c3c4; WORD $0x0ecb             // vpextrb    r11d, xmm1, 14
	LONG $0x01c3f641                           // test    r11b, 1
	JNE  LBB0_797

LBB0_334:
	LONG $0x1479c3c4; WORD $0x0fce // vpextrb    r14d, xmm1, 15
	LONG $0x01c6f641               // test    r14b, 1
	JE   LBB0_336

LBB0_335:
	LONG $0x397d63c4; WORD $0x01f1             // vextracti128    xmm1, ymm14, 1
	QUAD $0x000000a0249c8b48                   // mov    rbx, qword [rsp + 160]
	LONG $0x2071e3c4; WORD $0x1f0c; BYTE $0x0f // vpinsrb    xmm1, xmm1, byte [rdi + rbx], 15
	LONG $0x380d63c4; WORD $0x01f1             // vinserti128    ymm14, ymm14, xmm1, 1

LBB0_336:
	LONG $0x7175c1c4; WORD $0x03d6             // vpsrlw    ymm1, ymm14, 3
	QUAD $0x00000080b5db75c5                   // vpand    ymm14, ymm1, yword 128[rbp] /* [rip + .LCPI0_4] */
	LONG $0x7e79c1c4; BYTE $0xf7               // vmovd    r15d, xmm6
	LONG $0x01c7f641                           // test    r15b, 1
	JE   LBB0_337
	LONG $0x7ef961c4; BYTE $0xfb               // vmovq    rbx, xmm15
	LONG $0x147943c4; WORD $0x1834; BYTE $0x00 // vpextrb    byte [r8 + rbx], xmm14, 0
	LONG $0x1479e3c4; WORD $0x01f3             // vpextrb    ebx, xmm6, 1
	WORD $0xc3f6; BYTE $0x01                   // test    bl, 1
	JNE  LBB0_799

LBB0_338:
	LONG $0x1479e3c4; WORD $0x02f3 // vpextrb    ebx, xmm6, 2
	WORD $0xc3f6; BYTE $0x01       // test    bl, 1
	QUAD $0x000000e024bc8b4c       // mov    r15, qword [rsp + 224]
	JE   LBB0_339

LBB0_800:
	LONG $0x397d63c4; WORD $0x01f9             // vextracti128    xmm1, ymm15, 1
	LONG $0x7ef9e1c4; BYTE $0xcb               // vmovq    rbx, xmm1
	LONG $0x147943c4; WORD $0x1834; BYTE $0x02 // vpextrb    byte [r8 + rbx], xmm14, 2
	LONG $0x1479e3c4; WORD $0x03f3             // vpextrb    ebx, xmm6, 3
	WORD $0xc3f6; BYTE $0x01                   // test    bl, 1
	JNE  LBB0_801

LBB0_340:
	LONG $0x1479e3c4; WORD $0x04f3 // vpextrb    ebx, xmm6, 4
	WORD $0xc3f6; BYTE $0x01       // test    bl, 1
	JE   LBB0_341

LBB0_802:
	LONG $0x7ef9e1c4; BYTE $0xeb               // vmovq    rbx, xmm5
	LONG $0x147943c4; WORD $0x1834; BYTE $0x04 // vpextrb    byte [r8 + rbx], xmm14, 4
	LONG $0x1479e3c4; WORD $0x05f3             // vpextrb    ebx, xmm6, 5
	WORD $0xc3f6; BYTE $0x01                   // test    bl, 1
	JNE  LBB0_803

LBB0_342:
	LONG $0x1479e3c4; WORD $0x06f3 // vpextrb    ebx, xmm6, 6
	WORD $0xc3f6; BYTE $0x01       // test    bl, 1
	JE   LBB0_343

LBB0_804:
	LONG $0x397de3c4; WORD $0x01e9             // vextracti128    xmm1, ymm5, 1
	LONG $0x7ef9e1c4; BYTE $0xcb               // vmovq    rbx, xmm1
	LONG $0x147943c4; WORD $0x1834; BYTE $0x06 // vpextrb    byte [r8 + rbx], xmm14, 6
	LONG $0x1479e3c4; WORD $0x07f3             // vpextrb    ebx, xmm6, 7
	WORD $0xc3f6; BYTE $0x01                   // test    bl, 1
	JNE  LBB0_805

LBB0_344:
	LONG $0x1479e3c4; WORD $0x08f3 // vpextrb    ebx, xmm6, 8
	WORD $0xc3f6; BYTE $0x01       // test    bl, 1
	JE   LBB0_345

LBB0_806:
	LONG $0x7ef961c4; BYTE $0xe3               // vmovq    rbx, xmm12
	LONG $0x147943c4; WORD $0x1834; BYTE $0x08 // vpextrb    byte [r8 + rbx], xmm14, 8
	LONG $0x1479e3c4; WORD $0x09f3             // vpextrb    ebx, xmm6, 9
	WORD $0xc3f6; BYTE $0x01                   // test    bl, 1
	JNE  LBB0_807

LBB0_346:
	LONG $0x1479e3c4; WORD $0x0af3 // vpextrb    ebx, xmm6, 10
	WORD $0xc3f6; BYTE $0x01       // test    bl, 1
	JE   LBB0_347

LBB0_808:
	LONG $0x397d63c4; WORD $0x01e1             // vextracti128    xmm1, ymm12, 1
	LONG $0x7ef9e1c4; BYTE $0xcb               // vmovq    rbx, xmm1
	LONG $0x147943c4; WORD $0x1834; BYTE $0x0a // vpextrb    byte [r8 + rbx], xmm14, 10
	LONG $0x1479e3c4; WORD $0x0bf3             // vpextrb    ebx, xmm6, 11
	WORD $0xc3f6; BYTE $0x01                   // test    bl, 1
	JNE  LBB0_809

LBB0_348:
	LONG $0x1479e3c4; WORD $0x0cf3 // vpextrb    ebx, xmm6, 12
	WORD $0xc3f6; BYTE $0x01       // test    bl, 1
	JE   LBB0_349

LBB0_810:
	LONG $0x7ef961c4; BYTE $0xdb               // vmovq    rbx, xmm11
	LONG $0x147943c4; WORD $0x1834; BYTE $0x0c // vpextrb    byte [r8 + rbx], xmm14, 12
	LONG $0x1479e3c4; WORD $0x0df3             // vpextrb    ebx, xmm6, 13
	WORD $0xc3f6; BYTE $0x01                   // test    bl, 1
	JNE  LBB0_811

LBB0_350:
	LONG $0x1479e3c4; WORD $0x0ef3 // vpextrb    ebx, xmm6, 14
	WORD $0xc3f6; BYTE $0x01       // test    bl, 1
	JE   LBB0_351

LBB0_812:
	LONG $0x397d63c4; WORD $0x01d9             // vextracti128    xmm1, ymm11, 1
	LONG $0x7ef9e1c4; BYTE $0xcb               // vmovq    rbx, xmm1
	LONG $0x147943c4; WORD $0x1834; BYTE $0x0e // vpextrb    byte [r8 + rbx], xmm14, 14
	LONG $0x1479e3c4; WORD $0x0ff3             // vpextrb    ebx, xmm6, 15
	WORD $0xc3f6; BYTE $0x01                   // test    bl, 1
	JNE  LBB0_813

LBB0_352:
	LONG $0x2c2444f6; BYTE $0x01 // test    byte [rsp + 44], 1
	JE   LBB0_353

LBB0_814:
	LONG $0x7ef961c4; BYTE $0xd3               // vmovq    rbx, xmm10
	LONG $0x397d63c4; WORD $0x01f1             // vextracti128    xmm1, ymm14, 1
	LONG $0x1479c3c4; WORD $0x180c; BYTE $0x00 // vpextrb    byte [r8 + rbx], xmm1, 0
	LONG $0x282444f6; BYTE $0x01               // test    byte [rsp + 40], 1
	JNE  LBB0_815

LBB0_354:
	LONG $0x242444f6; BYTE $0x01 // test    byte [rsp + 36], 1
	JE   LBB0_355

LBB0_816:
	LONG $0x397d63c4; WORD $0x01d1             // vextracti128    xmm1, ymm10, 1
	LONG $0x7ef9e1c4; BYTE $0xcb               // vmovq    rbx, xmm1
	LONG $0x397d63c4; WORD $0x01f1             // vextracti128    xmm1, ymm14, 1
	LONG $0x1479c3c4; WORD $0x180c; BYTE $0x02 // vpextrb    byte [r8 + rbx], xmm1, 2
	LONG $0x202444f6; BYTE $0x01               // test    byte [rsp + 32], 1
	JNE  LBB0_817

LBB0_356:
	LONG $0x1c2444f6; BYTE $0x01 // test    byte [rsp + 28], 1
	JE   LBB0_357

LBB0_818:
	LONG $0x7ef961c4; BYTE $0xcb               // vmovq    rbx, xmm9
	LONG $0x397d63c4; WORD $0x01f1             // vextracti128    xmm1, ymm14, 1
	LONG $0x1479c3c4; WORD $0x180c; BYTE $0x04 // vpextrb    byte [r8 + rbx], xmm1, 4
	LONG $0x182444f6; BYTE $0x01               // test    byte [rsp + 24], 1
	JNE  LBB0_819

LBB0_358:
	LONG $0x142444f6; BYTE $0x01 // test    byte [rsp + 20], 1
	JE   LBB0_359

LBB0_820:
	LONG $0x397d63c4; WORD $0x01c9             // vextracti128    xmm1, ymm9, 1
	LONG $0x7ef9e1c4; BYTE $0xcb               // vmovq    rbx, xmm1
	LONG $0x397d63c4; WORD $0x01f1             // vextracti128    xmm1, ymm14, 1
	LONG $0x1479c3c4; WORD $0x180c; BYTE $0x06 // vpextrb    byte [r8 + rbx], xmm1, 6
	LONG $0x01c1f641                           // test    r9b, 1
	JNE  LBB0_821

LBB0_360:
	WORD $0xc2f6; BYTE $0x01 // test    dl, 1
	QUAD $0x00000128249c8b48 // mov    rbx, qword [rsp + 296]
	JE   LBB0_361

LBB0_822:
	LONG $0x7ef961c4; BYTE $0xc2               // vmovq    rdx, xmm8
	LONG $0x397d63c4; WORD $0x01f1             // vextracti128    xmm1, ymm14, 1
	LONG $0x1479c3c4; WORD $0x100c; BYTE $0x08 // vpextrb    byte [r8 + rdx], xmm1, 8
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JNE  LBB0_823

LBB0_362:
	LONG $0x01c6f640         // test    sil, 1
	QUAD $0x0000013024948b48 // mov    rdx, qword [rsp + 304]
	JE   LBB0_363

LBB0_824:
	LONG $0x397d63c4; WORD $0x01c1             // vextracti128    xmm1, ymm8, 1
	LONG $0x7ef9e1c4; BYTE $0xc9               // vmovq    rcx, xmm1
	LONG $0x397d63c4; WORD $0x01f1             // vextracti128    xmm1, ymm14, 1
	LONG $0x1479c3c4; WORD $0x080c; BYTE $0x0a // vpextrb    byte [r8 + rcx], xmm1, 10
	WORD $0x01a8                               // test    al, 1
	QUAD $0x0000009824b48b48                   // mov    rsi, qword [rsp + 152]
	JNE  LBB0_825

LBB0_364:
	LONG $0x01c5f641 // test    r13b, 1
	JE   LBB0_365

LBB0_826:
	LONG $0x7ef9e1c4; BYTE $0xf9               // vmovq    rcx, xmm7
	LONG $0x397d63c4; WORD $0x01f1             // vextracti128    xmm1, ymm14, 1
	LONG $0x1479c3c4; WORD $0x080c; BYTE $0x0c // vpextrb    byte [r8 + rcx], xmm1, 12
	LONG $0x01c2f641                           // test    r10b, 1
	QUAD $0x0000011824ac8b4c                   // mov    r13, qword [rsp + 280]
	JNE  LBB0_827

LBB0_366:
	LONG $0x01c3f641 // test    r11b, 1
	JE   LBB0_367

LBB0_828:
	LONG $0x397de3c4; WORD $0x01f9             // vextracti128    xmm1, ymm7, 1
	LONG $0x7ef9e1c4; BYTE $0xc9               // vmovq    rcx, xmm1
	LONG $0x397d63c4; WORD $0x01f1             // vextracti128    xmm1, ymm14, 1
	LONG $0x1479c3c4; WORD $0x080c; BYTE $0x0e // vpextrb    byte [r8 + rcx], xmm1, 14
	LONG $0x01c6f641                           // test    r14b, 1
	QUAD $0x0000012024848b48                   // mov    rax, qword [rsp + 288]
	QUAD $0x000000e8248c8b4c                   // mov    r9, qword [rsp + 232]
	JNE  LBB0_368
	JMP  LBB0_369

LBB0_337:
	LONG $0x1479e3c4; WORD $0x01f3 // vpextrb    ebx, xmm6, 1
	WORD $0xc3f6; BYTE $0x01       // test    bl, 1
	JE   LBB0_338

LBB0_799:
	LONG $0x16f963c4; WORD $0x01fb             // vpextrq    rbx, xmm15, 1
	LONG $0x147943c4; WORD $0x1834; BYTE $0x01 // vpextrb    byte [r8 + rbx], xmm14, 1
	LONG $0x1479e3c4; WORD $0x02f3             // vpextrb    ebx, xmm6, 2
	WORD $0xc3f6; BYTE $0x01                   // test    bl, 1
	QUAD $0x000000e024bc8b4c                   // mov    r15, qword [rsp + 224]
	JNE  LBB0_800

LBB0_339:
	LONG $0x1479e3c4; WORD $0x03f3 // vpextrb    ebx, xmm6, 3
	WORD $0xc3f6; BYTE $0x01       // test    bl, 1
	JE   LBB0_340

LBB0_801:
	LONG $0x397d63c4; WORD $0x01f9             // vextracti128    xmm1, ymm15, 1
	LONG $0x16f9e3c4; WORD $0x01cb             // vpextrq    rbx, xmm1, 1
	LONG $0x147943c4; WORD $0x1834; BYTE $0x03 // vpextrb    byte [r8 + rbx], xmm14, 3
	LONG $0x1479e3c4; WORD $0x04f3             // vpextrb    ebx, xmm6, 4
	WORD $0xc3f6; BYTE $0x01                   // test    bl, 1
	JNE  LBB0_802

LBB0_341:
	LONG $0x1479e3c4; WORD $0x05f3 // vpextrb    ebx, xmm6, 5
	WORD $0xc3f6; BYTE $0x01       // test    bl, 1
	JE   LBB0_342

LBB0_803:
	LONG $0x16f9e3c4; WORD $0x01eb             // vpextrq    rbx, xmm5, 1
	LONG $0x147943c4; WORD $0x1834; BYTE $0x05 // vpextrb    byte [r8 + rbx], xmm14, 5
	LONG $0x1479e3c4; WORD $0x06f3             // vpextrb    ebx, xmm6, 6
	WORD $0xc3f6; BYTE $0x01                   // test    bl, 1
	JNE  LBB0_804

LBB0_343:
	LONG $0x1479e3c4; WORD $0x07f3 // vpextrb    ebx, xmm6, 7
	WORD $0xc3f6; BYTE $0x01       // test    bl, 1
	JE   LBB0_344

LBB0_805:
	LONG $0x397de3c4; WORD $0x01e9             // vextracti128    xmm1, ymm5, 1
	LONG $0x16f9e3c4; WORD $0x01cb             // vpextrq    rbx, xmm1, 1
	LONG $0x147943c4; WORD $0x1834; BYTE $0x07 // vpextrb    byte [r8 + rbx], xmm14, 7
	LONG $0x1479e3c4; WORD $0x08f3             // vpextrb    ebx, xmm6, 8
	WORD $0xc3f6; BYTE $0x01                   // test    bl, 1
	JNE  LBB0_806

LBB0_345:
	LONG $0x1479e3c4; WORD $0x09f3 // vpextrb    ebx, xmm6, 9
	WORD $0xc3f6; BYTE $0x01       // test    bl, 1
	JE   LBB0_346

LBB0_807:
	LONG $0x16f963c4; WORD $0x01e3             // vpextrq    rbx, xmm12, 1
	LONG $0x147943c4; WORD $0x1834; BYTE $0x09 // vpextrb    byte [r8 + rbx], xmm14, 9
	LONG $0x1479e3c4; WORD $0x0af3             // vpextrb    ebx, xmm6, 10
	WORD $0xc3f6; BYTE $0x01                   // test    bl, 1
	JNE  LBB0_808

LBB0_347:
	LONG $0x1479e3c4; WORD $0x0bf3 // vpextrb    ebx, xmm6, 11
	WORD $0xc3f6; BYTE $0x01       // test    bl, 1
	JE   LBB0_348

LBB0_809:
	LONG $0x397d63c4; WORD $0x01e1             // vextracti128    xmm1, ymm12, 1
	LONG $0x16f9e3c4; WORD $0x01cb             // vpextrq    rbx, xmm1, 1
	LONG $0x147943c4; WORD $0x1834; BYTE $0x0b // vpextrb    byte [r8 + rbx], xmm14, 11
	LONG $0x1479e3c4; WORD $0x0cf3             // vpextrb    ebx, xmm6, 12
	WORD $0xc3f6; BYTE $0x01                   // test    bl, 1
	JNE  LBB0_810

LBB0_349:
	LONG $0x1479e3c4; WORD $0x0df3 // vpextrb    ebx, xmm6, 13
	WORD $0xc3f6; BYTE $0x01       // test    bl, 1
	JE   LBB0_350

LBB0_811:
	LONG $0x16f963c4; WORD $0x01db             // vpextrq    rbx, xmm11, 1
	LONG $0x147943c4; WORD $0x1834; BYTE $0x0d // vpextrb    byte [r8 + rbx], xmm14, 13
	LONG $0x1479e3c4; WORD $0x0ef3             // vpextrb    ebx, xmm6, 14
	WORD $0xc3f6; BYTE $0x01                   // test    bl, 1
	JNE  LBB0_812

LBB0_351:
	LONG $0x1479e3c4; WORD $0x0ff3 // vpextrb    ebx, xmm6, 15
	WORD $0xc3f6; BYTE $0x01       // test    bl, 1
	JE   LBB0_352

LBB0_813:
	LONG $0x397d63c4; WORD $0x01d9             // vextracti128    xmm1, ymm11, 1
	LONG $0x16f9e3c4; WORD $0x01cb             // vpextrq    rbx, xmm1, 1
	LONG $0x147943c4; WORD $0x1834; BYTE $0x0f // vpextrb    byte [r8 + rbx], xmm14, 15
	LONG $0x2c2444f6; BYTE $0x01               // test    byte [rsp + 44], 1
	JNE  LBB0_814

LBB0_353:
	LONG $0x282444f6; BYTE $0x01 // test    byte [rsp + 40], 1
	JE   LBB0_354

LBB0_815:
	LONG $0x16f963c4; WORD $0x01d3             // vpextrq    rbx, xmm10, 1
	LONG $0x397d63c4; WORD $0x01f1             // vextracti128    xmm1, ymm14, 1
	LONG $0x1479c3c4; WORD $0x180c; BYTE $0x01 // vpextrb    byte [r8 + rbx], xmm1, 1
	LONG $0x242444f6; BYTE $0x01               // test    byte [rsp + 36], 1
	JNE  LBB0_816

LBB0_355:
	LONG $0x202444f6; BYTE $0x01 // test    byte [rsp + 32], 1
	JE   LBB0_356

LBB0_817:
	LONG $0x397d63c4; WORD $0x01d1             // vextracti128    xmm1, ymm10, 1
	LONG $0x16f9e3c4; WORD $0x01cb             // vpextrq    rbx, xmm1, 1
	LONG $0x397d63c4; WORD $0x01f1             // vextracti128    xmm1, ymm14, 1
	LONG $0x1479c3c4; WORD $0x180c; BYTE $0x03 // vpextrb    byte [r8 + rbx], xmm1, 3
	LONG $0x1c2444f6; BYTE $0x01               // test    byte [rsp + 28], 1
	JNE  LBB0_818

LBB0_357:
	LONG $0x182444f6; BYTE $0x01 // test    byte [rsp + 24], 1
	JE   LBB0_358

LBB0_819:
	LONG $0x16f963c4; WORD $0x01cb             // vpextrq    rbx, xmm9, 1
	LONG $0x397d63c4; WORD $0x01f1             // vextracti128    xmm1, ymm14, 1
	LONG $0x1479c3c4; WORD $0x180c; BYTE $0x05 // vpextrb    byte [r8 + rbx], xmm1, 5
	LONG $0x142444f6; BYTE $0x01               // test    byte [rsp + 20], 1
	JNE  LBB0_820

LBB0_359:
	LONG $0x01c1f641 // test    r9b, 1
	JE   LBB0_360

LBB0_821:
	LONG $0x397d63c4; WORD $0x01c9             // vextracti128    xmm1, ymm9, 1
	LONG $0x16f9e3c4; WORD $0x01cb             // vpextrq    rbx, xmm1, 1
	LONG $0x397d63c4; WORD $0x01f1             // vextracti128    xmm1, ymm14, 1
	LONG $0x1479c3c4; WORD $0x180c; BYTE $0x07 // vpextrb    byte [r8 + rbx], xmm1, 7
	WORD $0xc2f6; BYTE $0x01                   // test    dl, 1
	QUAD $0x00000128249c8b48                   // mov    rbx, qword [rsp + 296]
	JNE  LBB0_822

LBB0_361:
	WORD $0xc1f6; BYTE $0x01 // test    cl, 1
	JE   LBB0_362

LBB0_823:
	LONG $0x16f963c4; WORD $0x01c1             // vpextrq    rcx, xmm8, 1
	LONG $0x397d63c4; WORD $0x01f1             // vextracti128    xmm1, ymm14, 1
	LONG $0x1479c3c4; WORD $0x080c; BYTE $0x09 // vpextrb    byte [r8 + rcx], xmm1, 9
	LONG $0x01c6f640                           // test    sil, 1
	QUAD $0x0000013024948b48                   // mov    rdx, qword [rsp + 304]
	JNE  LBB0_824

LBB0_363:
	WORD $0x01a8             // test    al, 1
	QUAD $0x0000009824b48b48 // mov    rsi, qword [rsp + 152]
	JE   LBB0_364

LBB0_825:
	LONG $0x397d63c4; WORD $0x01c1             // vextracti128    xmm1, ymm8, 1
	LONG $0x16f9e3c4; WORD $0x01c9             // vpextrq    rcx, xmm1, 1
	LONG $0x397d63c4; WORD $0x01f1             // vextracti128    xmm1, ymm14, 1
	LONG $0x1479c3c4; WORD $0x080c; BYTE $0x0b // vpextrb    byte [r8 + rcx], xmm1, 11
	LONG $0x01c5f641                           // test    r13b, 1
	JNE  LBB0_826

LBB0_365:
	LONG $0x01c2f641         // test    r10b, 1
	QUAD $0x0000011824ac8b4c // mov    r13, qword [rsp + 280]
	JE   LBB0_366

LBB0_827:
	LONG $0x16f9e3c4; WORD $0x01f9             // vpextrq    rcx, xmm7, 1
	LONG $0x397d63c4; WORD $0x01f1             // vextracti128    xmm1, ymm14, 1
	LONG $0x1479c3c4; WORD $0x080c; BYTE $0x0d // vpextrb    byte [r8 + rcx], xmm1, 13
	LONG $0x01c3f641                           // test    r11b, 1
	JNE  LBB0_828

LBB0_367:
	LONG $0x01c6f641         // test    r14b, 1
	QUAD $0x0000012024848b48 // mov    rax, qword [rsp + 288]
	QUAD $0x000000e8248c8b4c // mov    r9, qword [rsp + 232]
	JE   LBB0_369

LBB0_368:
	LONG $0x397de3c4; WORD $0x01f9             // vextracti128    xmm1, ymm7, 1
	LONG $0x16f9e3c4; WORD $0x01c9             // vpextrq    rcx, xmm1, 1
	LONG $0x397d63c4; WORD $0x01f1             // vextracti128    xmm1, ymm14, 1
	LONG $0x1479c3c4; WORD $0x080c; BYTE $0x0f // vpextrb    byte [r8 + rcx], xmm1, 15

LBB0_369:
	QUAD $0x0002a0248c6ffdc5; BYTE $0x00 // vmovdqa    ymm1, yword [rsp + 672]
	QUAD $0x00020024bceb75c5; BYTE $0x00 // vpor    ymm15, ymm1, yword [rsp + 512]
	QUAD $0x0001e024acebf5c5; BYTE $0x00 // vpor    ymm5, ymm1, yword [rsp + 480]
	QUAD $0x0001802494eb75c5; BYTE $0x00 // vpor    ymm10, ymm1, yword [rsp + 384]
	QUAD $0x000160248ceb75c5; BYTE $0x00 // vpor    ymm9, ymm1, yword [rsp + 352]
	QUAD $0x0001c024a4eb75c5; BYTE $0x00 // vpor    ymm12, ymm1, yword [rsp + 448]
	QUAD $0x0001a0249ceb75c5; BYTE $0x00 // vpor    ymm11, ymm1, yword [rsp + 416]
	QUAD $0x0001402484eb75c5; BYTE $0x00 // vpor    ymm8, ymm1, yword [rsp + 320]
	LONG $0xf9ebddc5                     // vpor    ymm7, ymm4, ymm1
	LONG $0x463de3c4; WORD $0x31cf       // vperm2i128    ymm1, ymm8, ymm7, 49
	LONG $0x383de3c4; WORD $0x01d7       // vinserti128    ymm2, ymm8, xmm7, 1
	LONG $0xc9c6ecc5; BYTE $0x88         // vshufps    ymm1, ymm2, ymm1, 136
	LONG $0x461dc3c4; WORD $0x31d3       // vperm2i128    ymm2, ymm12, ymm11, 49
	LONG $0x381dc3c4; WORD $0x01db       // vinserti128    ymm3, ymm12, xmm11, 1
	LONG $0xd2c6e4c5; BYTE $0x88         // vshufps    ymm2, ymm3, ymm2, 136
	LONG $0x462dc3c4; WORD $0x31d9       // vperm2i128    ymm3, ymm10, ymm9, 49
	LONG $0x382d43c4; WORD $0x01e9       // vinserti128    ymm13, ymm10, xmm9, 1
	LONG $0xdbc694c5; BYTE $0x88         // vshufps    ymm3, ymm13, ymm3, 136
	LONG $0x460563c4; WORD $0x31ed       // vperm2i128    ymm13, ymm15, ymm5, 49
	LONG $0x380563c4; WORD $0x01f5       // vinserti128    ymm14, ymm15, xmm5, 1
	LONG $0xc60c41c4; WORD $0x88ed       // vshufps    ymm13, ymm14, ymm13, 136
	LONG $0x667d41c4; BYTE $0xed         // vpcmpgtd    ymm13, ymm0, ymm13
	LONG $0xdb66fdc5                     // vpcmpgtd    ymm3, ymm0, ymm3
	LONG $0xdb6b95c5                     // vpackssdw    ymm3, ymm13, ymm3
	LONG $0xd266fdc5                     // vpcmpgtd    ymm2, ymm0, ymm2
	LONG $0xc966fdc5                     // vpcmpgtd    ymm1, ymm0, ymm1
	LONG $0xc96bedc5                     // vpackssdw    ymm1, ymm2, ymm1
	LONG $0x00fde3c4; WORD $0xd8d3       // vpermq    ymm2, ymm3, 216
	LONG $0x00fde3c4; WORD $0xd8c9       // vpermq    ymm1, ymm1, 216
	LONG $0xc963edc5                     // vpacksswb    ymm1, ymm2, ymm1
	LONG $0xf6dbf5c5                     // vpand    ymm6, ymm1, ymm6
	LONG $0xf17ef9c5                     // vmovd    ecx, xmm6
	WORD $0xc1f6; BYTE $0x01             // test    cl, 1
	JE   LBB0_370
	LONG $0x787d62c4; WORD $0x1734       // vpbroadcastb    ymm14, byte [rdi + rdx]
	LONG $0x1479e3c4; WORD $0x01f1       // vpextrb    ecx, xmm6, 1
	WORD $0xc1f6; BYTE $0x01             // test    cl, 1
	JNE  LBB0_830

LBB0_371:
	LONG $0x24548b48; BYTE $0x68   // mov    rdx, qword [rsp + 104]
	LONG $0x1479e3c4; WORD $0x02f1 // vpextrb    ecx, xmm6, 2
	WORD $0xc1f6; BYTE $0x01       // test    cl, 1
	JE   LBB0_373

LBB0_372:
	LONG $0x2009e3c4; WORD $0x1f0c; BYTE $0x02 // vpinsrb    xmm1, xmm14, byte [rdi + rbx], 2
	LONG $0x020d63c4; WORD $0x0ff1             // vpblendd    ymm14, ymm14, ymm1, 15

LBB0_373:
	LONG $0x24748b48; BYTE $0x60               // mov    rsi, qword [rsp + 96]
	LONG $0x24548b4c; BYTE $0x48               // mov    r10, qword [rsp + 72]
	LONG $0x1479e3c4; WORD $0x03f1             // vpextrb    ecx, xmm6, 3
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JE   LBB0_374
	QUAD $0x00000110248c8b48                   // mov    rcx, qword [rsp + 272]
	LONG $0x2009e3c4; WORD $0x0f0c; BYTE $0x03 // vpinsrb    xmm1, xmm14, byte [rdi + rcx], 3
	LONG $0x020d63c4; WORD $0x0ff1             // vpblendd    ymm14, ymm14, ymm1, 15
	LONG $0x1479e3c4; WORD $0x04f1             // vpextrb    ecx, xmm6, 4
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JNE  LBB0_832

LBB0_375:
	LONG $0x1479e3c4; WORD $0x05f1 // vpextrb    ecx, xmm6, 5
	WORD $0xc1f6; BYTE $0x01       // test    cl, 1
	JE   LBB0_376

LBB0_833:
	LONG $0x2009e3c4; WORD $0x170c; BYTE $0x05 // vpinsrb    xmm1, xmm14, byte [rdi + rdx], 5
	LONG $0x020d63c4; WORD $0x0ff1             // vpblendd    ymm14, ymm14, ymm1, 15
	LONG $0x1479e3c4; WORD $0x06f1             // vpextrb    ecx, xmm6, 6
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JNE  LBB0_834

LBB0_377:
	LONG $0x1479e3c4; WORD $0x07f1 // vpextrb    ecx, xmm6, 7
	WORD $0xc1f6; BYTE $0x01       // test    cl, 1
	JE   LBB0_378

LBB0_835:
	LONG $0x2009a3c4; WORD $0x0f0c; BYTE $0x07 // vpinsrb    xmm1, xmm14, byte [rdi + r9], 7
	LONG $0x020d63c4; WORD $0x0ff1             // vpblendd    ymm14, ymm14, ymm1, 15
	LONG $0x1479e3c4; WORD $0x08f1             // vpextrb    ecx, xmm6, 8
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JNE  LBB0_836

LBB0_379:
	LONG $0x24548b48; BYTE $0x58   // mov    rdx, qword [rsp + 88]
	LONG $0x1479e3c4; WORD $0x09f1 // vpextrb    ecx, xmm6, 9
	WORD $0xc1f6; BYTE $0x01       // test    cl, 1
	JE   LBB0_381

LBB0_380:
	LONG $0x2009a3c4; WORD $0x3f0c; BYTE $0x09 // vpinsrb    xmm1, xmm14, byte [rdi + r15], 9
	LONG $0x020d63c4; WORD $0x0ff1             // vpblendd    ymm14, ymm14, ymm1, 15

LBB0_381:
	QUAD $0x0000009024848b48                   // mov    rax, qword [rsp + 144]
	QUAD $0x0000008824b48b48                   // mov    rsi, qword [rsp + 136]
	QUAD $0x00000080249c8b48                   // mov    rbx, qword [rsp + 128]
	LONG $0x244c8b4c; BYTE $0x78               // mov    r9, qword [rsp + 120]
	LONG $0x1479e3c4; WORD $0x0af1             // vpextrb    ecx, xmm6, 10
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JE   LBB0_382
	LONG $0x2009e3c4; WORD $0x070c; BYTE $0x0a // vpinsrb    xmm1, xmm14, byte [rdi + rax], 10
	LONG $0x020d63c4; WORD $0x0ff1             // vpblendd    ymm14, ymm14, ymm1, 15
	LONG $0x1479e3c4; WORD $0x0bf1             // vpextrb    ecx, xmm6, 11
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JNE  LBB0_838

LBB0_383:
	LONG $0x1479e3c4; WORD $0x0cf1 // vpextrb    ecx, xmm6, 12
	WORD $0xc1f6; BYTE $0x01       // test    cl, 1
	JE   LBB0_384

LBB0_839:
	QUAD $0x000000f824848b48                   // mov    rax, qword [rsp + 248]
	LONG $0x2009e3c4; WORD $0x070c; BYTE $0x0c // vpinsrb    xmm1, xmm14, byte [rdi + rax], 12
	LONG $0x020d63c4; WORD $0x0ff1             // vpblendd    ymm14, ymm14, ymm1, 15
	LONG $0x1479e3c4; WORD $0x0df1             // vpextrb    ecx, xmm6, 13
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JNE  LBB0_385
	JMP  LBB0_386

LBB0_370:
	LONG $0x1479e3c4; WORD $0x01f1 // vpextrb    ecx, xmm6, 1
	WORD $0xc1f6; BYTE $0x01       // test    cl, 1
	JE   LBB0_371

LBB0_830:
	LONG $0x2009e3c4; WORD $0x370c; BYTE $0x01 // vpinsrb    xmm1, xmm14, byte [rdi + rsi], 1
	LONG $0x020d63c4; WORD $0x0ff1             // vpblendd    ymm14, ymm14, ymm1, 15
	LONG $0x24548b48; BYTE $0x68               // mov    rdx, qword [rsp + 104]
	LONG $0x1479e3c4; WORD $0x02f1             // vpextrb    ecx, xmm6, 2
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JNE  LBB0_372
	JMP  LBB0_373

LBB0_374:
	LONG $0x1479e3c4; WORD $0x04f1 // vpextrb    ecx, xmm6, 4
	WORD $0xc1f6; BYTE $0x01       // test    cl, 1
	JE   LBB0_375

LBB0_832:
	QUAD $0x00000108248c8b48                   // mov    rcx, qword [rsp + 264]
	LONG $0x2009e3c4; WORD $0x0f0c; BYTE $0x04 // vpinsrb    xmm1, xmm14, byte [rdi + rcx], 4
	LONG $0x020d63c4; WORD $0x0ff1             // vpblendd    ymm14, ymm14, ymm1, 15
	LONG $0x1479e3c4; WORD $0x05f1             // vpextrb    ecx, xmm6, 5
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JNE  LBB0_833

LBB0_376:
	LONG $0x1479e3c4; WORD $0x06f1 // vpextrb    ecx, xmm6, 6
	WORD $0xc1f6; BYTE $0x01       // test    cl, 1
	JE   LBB0_377

LBB0_834:
	LONG $0x2009e3c4; WORD $0x070c; BYTE $0x06 // vpinsrb    xmm1, xmm14, byte [rdi + rax], 6
	LONG $0x020d63c4; WORD $0x0ff1             // vpblendd    ymm14, ymm14, ymm1, 15
	LONG $0x1479e3c4; WORD $0x07f1             // vpextrb    ecx, xmm6, 7
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JNE  LBB0_835

LBB0_378:
	LONG $0x1479e3c4; WORD $0x08f1 // vpextrb    ecx, xmm6, 8
	WORD $0xc1f6; BYTE $0x01       // test    cl, 1
	JE   LBB0_379

LBB0_836:
	LONG $0x2009e3c4; WORD $0x370c; BYTE $0x08 // vpinsrb    xmm1, xmm14, byte [rdi + rsi], 8
	LONG $0x020d63c4; WORD $0x0ff1             // vpblendd    ymm14, ymm14, ymm1, 15
	LONG $0x24548b48; BYTE $0x58               // mov    rdx, qword [rsp + 88]
	LONG $0x1479e3c4; WORD $0x09f1             // vpextrb    ecx, xmm6, 9
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JNE  LBB0_380
	JMP  LBB0_381

LBB0_382:
	LONG $0x1479e3c4; WORD $0x0bf1 // vpextrb    ecx, xmm6, 11
	WORD $0xc1f6; BYTE $0x01       // test    cl, 1
	JE   LBB0_383

LBB0_838:
	QUAD $0x0000010024848b48                   // mov    rax, qword [rsp + 256]
	LONG $0x2009e3c4; WORD $0x070c; BYTE $0x0b // vpinsrb    xmm1, xmm14, byte [rdi + rax], 11
	LONG $0x020d63c4; WORD $0x0ff1             // vpblendd    ymm14, ymm14, ymm1, 15
	LONG $0x1479e3c4; WORD $0x0cf1             // vpextrb    ecx, xmm6, 12
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JNE  LBB0_839

LBB0_384:
	LONG $0x1479e3c4; WORD $0x0df1 // vpextrb    ecx, xmm6, 13
	WORD $0xc1f6; BYTE $0x01       // test    cl, 1
	JE   LBB0_386

LBB0_385:
	LONG $0x2009e3c4; WORD $0x170c; BYTE $0x0d // vpinsrb    xmm1, xmm14, byte [rdi + rdx], 13
	LONG $0x020d63c4; WORD $0x0ff1             // vpblendd    ymm14, ymm14, ymm1, 15

LBB0_386:
	LONG $0x24448b48; BYTE $0x50               // mov    rax, qword [rsp + 80]
	LONG $0x24548b48; BYTE $0x40               // mov    rdx, qword [rsp + 64]
	LONG $0x1479e3c4; WORD $0x0ef1             // vpextrb    ecx, xmm6, 14
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JE   LBB0_388
	LONG $0x2009e3c4; WORD $0x070c; BYTE $0x0e // vpinsrb    xmm1, xmm14, byte [rdi + rax], 14
	LONG $0x020d63c4; WORD $0x0ff1             // vpblendd    ymm14, ymm14, ymm1, 15

LBB0_388:
	LONG $0x1479e3c4; WORD $0x0ff1             // vpextrb    ecx, xmm6, 15
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JE   LBB0_390
	LONG $0x2009a3c4; WORD $0x170c; BYTE $0x0f // vpinsrb    xmm1, xmm14, byte [rdi + r10], 15
	LONG $0x020d63c4; WORD $0x0ff1             // vpblendd    ymm14, ymm14, ymm1, 15

LBB0_390:
	LONG $0x397de3c4; WORD $0x01f1             // vextracti128    xmm1, ymm6, 1
	LONG $0xc87ef9c5                           // vmovd    eax, xmm1
	LONG $0x2c244489                           // mov    dword [rsp + 44], eax
	WORD $0x01a8                               // test    al, 1
	JE   LBB0_392
	LONG $0x397d63c4; WORD $0x01f2             // vextracti128    xmm2, ymm14, 1
	LONG $0x2069e3c4; WORD $0x1714; BYTE $0x00 // vpinsrb    xmm2, xmm2, byte [rdi + rdx], 0
	LONG $0x380d63c4; WORD $0x01f2             // vinserti128    ymm14, ymm14, xmm2, 1

LBB0_392:
	LONG $0x24448b48; BYTE $0x38               // mov    rax, qword [rsp + 56]
	LONG $0x1479e3c4; WORD $0x01c9             // vpextrb    ecx, xmm1, 1
	LONG $0x28244c89                           // mov    dword [rsp + 40], ecx
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JE   LBB0_393
	LONG $0x397d63c4; WORD $0x01f2             // vextracti128    xmm2, ymm14, 1
	LONG $0x2069e3c4; WORD $0x3714; BYTE $0x01 // vpinsrb    xmm2, xmm2, byte [rdi + rsi], 1
	LONG $0x380d63c4; WORD $0x01f2             // vinserti128    ymm14, ymm14, xmm2, 1
	LONG $0x1479e3c4; WORD $0x02c9             // vpextrb    ecx, xmm1, 2
	LONG $0x24244c89                           // mov    dword [rsp + 36], ecx
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JNE  LBB0_841

LBB0_394:
	LONG $0x1479e3c4; WORD $0x03c9 // vpextrb    ecx, xmm1, 3
	LONG $0x20244c89               // mov    dword [rsp + 32], ecx
	WORD $0xc1f6; BYTE $0x01       // test    cl, 1
	JE   LBB0_395

LBB0_842:
	LONG $0x397d63c4; WORD $0x01f2             // vextracti128    xmm2, ymm14, 1
	LONG $0x2069a3c4; WORD $0x0f14; BYTE $0x03 // vpinsrb    xmm2, xmm2, byte [rdi + r9], 3
	LONG $0x380d63c4; WORD $0x01f2             // vinserti128    ymm14, ymm14, xmm2, 1
	LONG $0x1479e3c4; WORD $0x04c9             // vpextrb    ecx, xmm1, 4
	LONG $0x1c244c89                           // mov    dword [rsp + 28], ecx
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JNE  LBB0_843

LBB0_396:
	LONG $0x1479e3c4; WORD $0x05c8 // vpextrb    eax, xmm1, 5
	LONG $0x18244489               // mov    dword [rsp + 24], eax
	WORD $0x01a8                   // test    al, 1
	JE   LBB0_398

LBB0_397:
	LONG $0x397d63c4; WORD $0x01f2             // vextracti128    xmm2, ymm14, 1
	LONG $0x2069a3c4; WORD $0x2f14; BYTE $0x05 // vpinsrb    xmm2, xmm2, byte [rdi + r13], 5
	LONG $0x380d63c4; WORD $0x01f2             // vinserti128    ymm14, ymm14, xmm2, 1

LBB0_398:
	LONG $0x24448b48; BYTE $0x70               // mov    rax, qword [rsp + 112]
	LONG $0x1479e3c4; WORD $0x06c9             // vpextrb    ecx, xmm1, 6
	LONG $0x14244c89                           // mov    dword [rsp + 20], ecx
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JE   LBB0_399
	LONG $0x397d63c4; WORD $0x01f2             // vextracti128    xmm2, ymm14, 1
	LONG $0x2069e3c4; WORD $0x0714; BYTE $0x06 // vpinsrb    xmm2, xmm2, byte [rdi + rax], 6
	LONG $0x380d63c4; WORD $0x01f2             // vinserti128    ymm14, ymm14, xmm2, 1
	LONG $0x1479c3c4; WORD $0x07c9             // vpextrb    r9d, xmm1, 7
	LONG $0x01c1f641                           // test    r9b, 1
	JNE  LBB0_845

LBB0_400:
	LONG $0x1479e3c4; WORD $0x08ca // vpextrb    edx, xmm1, 8
	WORD $0xc2f6; BYTE $0x01       // test    dl, 1
	JE   LBB0_401

LBB0_846:
	LONG $0x397d63c4; WORD $0x01f2             // vextracti128    xmm2, ymm14, 1
	QUAD $0x000000d824848b48                   // mov    rax, qword [rsp + 216]
	LONG $0x2069e3c4; WORD $0x0714; BYTE $0x08 // vpinsrb    xmm2, xmm2, byte [rdi + rax], 8
	LONG $0x380d63c4; WORD $0x01f2             // vinserti128    ymm14, ymm14, xmm2, 1
	LONG $0x1479e3c4; WORD $0x09c9             // vpextrb    ecx, xmm1, 9
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JNE  LBB0_847

LBB0_402:
	LONG $0x1479e3c4; WORD $0x0ace // vpextrb    esi, xmm1, 10
	LONG $0x01c6f640               // test    sil, 1
	JE   LBB0_403

LBB0_848:
	LONG $0x397d63c4; WORD $0x01f2             // vextracti128    xmm2, ymm14, 1
	QUAD $0x000000c824848b48                   // mov    rax, qword [rsp + 200]
	LONG $0x2069e3c4; WORD $0x0714; BYTE $0x0a // vpinsrb    xmm2, xmm2, byte [rdi + rax], 10
	LONG $0x380d63c4; WORD $0x01f2             // vinserti128    ymm14, ymm14, xmm2, 1
	LONG $0x1479e3c4; WORD $0x0bc8             // vpextrb    eax, xmm1, 11
	WORD $0x01a8                               // test    al, 1
	JNE  LBB0_849

LBB0_404:
	LONG $0x1479c3c4; WORD $0x0ccd // vpextrb    r13d, xmm1, 12
	LONG $0x01c5f641               // test    r13b, 1
	JE   LBB0_405

LBB0_850:
	LONG $0x397d63c4; WORD $0x01f2             // vextracti128    xmm2, ymm14, 1
	QUAD $0x000000b8249c8b48                   // mov    rbx, qword [rsp + 184]
	LONG $0x2069e3c4; WORD $0x1f14; BYTE $0x0c // vpinsrb    xmm2, xmm2, byte [rdi + rbx], 12
	LONG $0x380d63c4; WORD $0x01f2             // vinserti128    ymm14, ymm14, xmm2, 1
	LONG $0x1479c3c4; WORD $0x0dca             // vpextrb    r10d, xmm1, 13
	LONG $0x01c2f641                           // test    r10b, 1
	JNE  LBB0_851

LBB0_406:
	LONG $0x1479c3c4; WORD $0x0ecb // vpextrb    r11d, xmm1, 14
	LONG $0x01c3f641               // test    r11b, 1
	JE   LBB0_407

LBB0_852:
	LONG $0x397d63c4; WORD $0x01f2             // vextracti128    xmm2, ymm14, 1
	QUAD $0x000000a8249c8b48                   // mov    rbx, qword [rsp + 168]
	LONG $0x2069e3c4; WORD $0x1f14; BYTE $0x0e // vpinsrb    xmm2, xmm2, byte [rdi + rbx], 14
	LONG $0x380d63c4; WORD $0x01f2             // vinserti128    ymm14, ymm14, xmm2, 1
	LONG $0x1479c3c4; WORD $0x0fce             // vpextrb    r14d, xmm1, 15
	LONG $0x01c6f641                           // test    r14b, 1
	JNE  LBB0_408
	JMP  LBB0_409

LBB0_393:
	LONG $0x1479e3c4; WORD $0x02c9 // vpextrb    ecx, xmm1, 2
	LONG $0x24244c89               // mov    dword [rsp + 36], ecx
	WORD $0xc1f6; BYTE $0x01       // test    cl, 1
	JE   LBB0_394

LBB0_841:
	LONG $0x397d63c4; WORD $0x01f2             // vextracti128    xmm2, ymm14, 1
	LONG $0x2069e3c4; WORD $0x1f14; BYTE $0x02 // vpinsrb    xmm2, xmm2, byte [rdi + rbx], 2
	LONG $0x380d63c4; WORD $0x01f2             // vinserti128    ymm14, ymm14, xmm2, 1
	LONG $0x1479e3c4; WORD $0x03c9             // vpextrb    ecx, xmm1, 3
	LONG $0x20244c89                           // mov    dword [rsp + 32], ecx
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JNE  LBB0_842

LBB0_395:
	LONG $0x1479e3c4; WORD $0x04c9 // vpextrb    ecx, xmm1, 4
	LONG $0x1c244c89               // mov    dword [rsp + 28], ecx
	WORD $0xc1f6; BYTE $0x01       // test    cl, 1
	JE   LBB0_396

LBB0_843:
	LONG $0x397d63c4; WORD $0x01f2             // vextracti128    xmm2, ymm14, 1
	LONG $0x2069e3c4; WORD $0x0714; BYTE $0x04 // vpinsrb    xmm2, xmm2, byte [rdi + rax], 4
	LONG $0x380d63c4; WORD $0x01f2             // vinserti128    ymm14, ymm14, xmm2, 1
	LONG $0x1479e3c4; WORD $0x05c8             // vpextrb    eax, xmm1, 5
	LONG $0x18244489                           // mov    dword [rsp + 24], eax
	WORD $0x01a8                               // test    al, 1
	JNE  LBB0_397
	JMP  LBB0_398

LBB0_399:
	LONG $0x1479c3c4; WORD $0x07c9 // vpextrb    r9d, xmm1, 7
	LONG $0x01c1f641               // test    r9b, 1
	JE   LBB0_400

LBB0_845:
	LONG $0x397d63c4; WORD $0x01f2             // vextracti128    xmm2, ymm14, 1
	QUAD $0x000000f024848b48                   // mov    rax, qword [rsp + 240]
	LONG $0x2069e3c4; WORD $0x0714; BYTE $0x07 // vpinsrb    xmm2, xmm2, byte [rdi + rax], 7
	LONG $0x380d63c4; WORD $0x01f2             // vinserti128    ymm14, ymm14, xmm2, 1
	LONG $0x1479e3c4; WORD $0x08ca             // vpextrb    edx, xmm1, 8
	WORD $0xc2f6; BYTE $0x01                   // test    dl, 1
	JNE  LBB0_846

LBB0_401:
	LONG $0x1479e3c4; WORD $0x09c9 // vpextrb    ecx, xmm1, 9
	WORD $0xc1f6; BYTE $0x01       // test    cl, 1
	JE   LBB0_402

LBB0_847:
	LONG $0x397d63c4; WORD $0x01f2             // vextracti128    xmm2, ymm14, 1
	QUAD $0x000000d024848b48                   // mov    rax, qword [rsp + 208]
	LONG $0x2069e3c4; WORD $0x0714; BYTE $0x09 // vpinsrb    xmm2, xmm2, byte [rdi + rax], 9
	LONG $0x380d63c4; WORD $0x01f2             // vinserti128    ymm14, ymm14, xmm2, 1
	LONG $0x1479e3c4; WORD $0x0ace             // vpextrb    esi, xmm1, 10
	LONG $0x01c6f640                           // test    sil, 1
	JNE  LBB0_848

LBB0_403:
	LONG $0x1479e3c4; WORD $0x0bc8 // vpextrb    eax, xmm1, 11
	WORD $0x01a8                   // test    al, 1
	JE   LBB0_404

LBB0_849:
	LONG $0x397d63c4; WORD $0x01f2             // vextracti128    xmm2, ymm14, 1
	QUAD $0x000000c0249c8b48                   // mov    rbx, qword [rsp + 192]
	LONG $0x2069e3c4; WORD $0x1f14; BYTE $0x0b // vpinsrb    xmm2, xmm2, byte [rdi + rbx], 11
	LONG $0x380d63c4; WORD $0x01f2             // vinserti128    ymm14, ymm14, xmm2, 1
	LONG $0x1479c3c4; WORD $0x0ccd             // vpextrb    r13d, xmm1, 12
	LONG $0x01c5f641                           // test    r13b, 1
	JNE  LBB0_850

LBB0_405:
	LONG $0x1479c3c4; WORD $0x0dca // vpextrb    r10d, xmm1, 13
	LONG $0x01c2f641               // test    r10b, 1
	JE   LBB0_406

LBB0_851:
	LONG $0x397d63c4; WORD $0x01f2             // vextracti128    xmm2, ymm14, 1
	QUAD $0x000000b0249c8b48                   // mov    rbx, qword [rsp + 176]
	LONG $0x2069e3c4; WORD $0x1f14; BYTE $0x0d // vpinsrb    xmm2, xmm2, byte [rdi + rbx], 13
	LONG $0x380d63c4; WORD $0x01f2             // vinserti128    ymm14, ymm14, xmm2, 1
	LONG $0x1479c3c4; WORD $0x0ecb             // vpextrb    r11d, xmm1, 14
	LONG $0x01c3f641                           // test    r11b, 1
	JNE  LBB0_852

LBB0_407:
	LONG $0x1479c3c4; WORD $0x0fce // vpextrb    r14d, xmm1, 15
	LONG $0x01c6f641               // test    r14b, 1
	JE   LBB0_409

LBB0_408:
	LONG $0x397d63c4; WORD $0x01f1             // vextracti128    xmm1, ymm14, 1
	QUAD $0x000000a0249c8b48                   // mov    rbx, qword [rsp + 160]
	LONG $0x2071e3c4; WORD $0x1f0c; BYTE $0x0f // vpinsrb    xmm1, xmm1, byte [rdi + rbx], 15
	LONG $0x380d63c4; WORD $0x01f1             // vinserti128    ymm14, ymm14, xmm1, 1

LBB0_409:
	LONG $0x7175c1c4; WORD $0x04d6             // vpsrlw    ymm1, ymm14, 4
	QUAD $0x00000080b5db75c5                   // vpand    ymm14, ymm1, yword 128[rbp] /* [rip + .LCPI0_4] */
	LONG $0x7e79c1c4; BYTE $0xf7               // vmovd    r15d, xmm6
	LONG $0x01c7f641                           // test    r15b, 1
	JE   LBB0_410
	LONG $0x7ef961c4; BYTE $0xfb               // vmovq    rbx, xmm15
	LONG $0x147943c4; WORD $0x1834; BYTE $0x00 // vpextrb    byte [r8 + rbx], xmm14, 0
	LONG $0x1479e3c4; WORD $0x01f3             // vpextrb    ebx, xmm6, 1
	WORD $0xc3f6; BYTE $0x01                   // test    bl, 1
	JNE  LBB0_854

LBB0_411:
	LONG $0x1479e3c4; WORD $0x02f3 // vpextrb    ebx, xmm6, 2
	WORD $0xc3f6; BYTE $0x01       // test    bl, 1
	QUAD $0x000000e024bc8b4c       // mov    r15, qword [rsp + 224]
	JE   LBB0_412

LBB0_855:
	LONG $0x397d63c4; WORD $0x01f9             // vextracti128    xmm1, ymm15, 1
	LONG $0x7ef9e1c4; BYTE $0xcb               // vmovq    rbx, xmm1
	LONG $0x147943c4; WORD $0x1834; BYTE $0x02 // vpextrb    byte [r8 + rbx], xmm14, 2
	LONG $0x1479e3c4; WORD $0x03f3             // vpextrb    ebx, xmm6, 3
	WORD $0xc3f6; BYTE $0x01                   // test    bl, 1
	JNE  LBB0_856

LBB0_413:
	LONG $0x1479e3c4; WORD $0x04f3 // vpextrb    ebx, xmm6, 4
	WORD $0xc3f6; BYTE $0x01       // test    bl, 1
	JE   LBB0_414

LBB0_857:
	LONG $0x7ef9e1c4; BYTE $0xeb               // vmovq    rbx, xmm5
	LONG $0x147943c4; WORD $0x1834; BYTE $0x04 // vpextrb    byte [r8 + rbx], xmm14, 4
	LONG $0x1479e3c4; WORD $0x05f3             // vpextrb    ebx, xmm6, 5
	WORD $0xc3f6; BYTE $0x01                   // test    bl, 1
	JNE  LBB0_858

LBB0_415:
	LONG $0x1479e3c4; WORD $0x06f3 // vpextrb    ebx, xmm6, 6
	WORD $0xc3f6; BYTE $0x01       // test    bl, 1
	JE   LBB0_416

LBB0_859:
	LONG $0x397de3c4; WORD $0x01e9             // vextracti128    xmm1, ymm5, 1
	LONG $0x7ef9e1c4; BYTE $0xcb               // vmovq    rbx, xmm1
	LONG $0x147943c4; WORD $0x1834; BYTE $0x06 // vpextrb    byte [r8 + rbx], xmm14, 6
	LONG $0x1479e3c4; WORD $0x07f3             // vpextrb    ebx, xmm6, 7
	WORD $0xc3f6; BYTE $0x01                   // test    bl, 1
	JNE  LBB0_860

LBB0_417:
	LONG $0x1479e3c4; WORD $0x08f3 // vpextrb    ebx, xmm6, 8
	WORD $0xc3f6; BYTE $0x01       // test    bl, 1
	JE   LBB0_418

LBB0_861:
	LONG $0x7ef961c4; BYTE $0xe3               // vmovq    rbx, xmm12
	LONG $0x147943c4; WORD $0x1834; BYTE $0x08 // vpextrb    byte [r8 + rbx], xmm14, 8
	LONG $0x1479e3c4; WORD $0x09f3             // vpextrb    ebx, xmm6, 9
	WORD $0xc3f6; BYTE $0x01                   // test    bl, 1
	JNE  LBB0_862

LBB0_419:
	LONG $0x1479e3c4; WORD $0x0af3 // vpextrb    ebx, xmm6, 10
	WORD $0xc3f6; BYTE $0x01       // test    bl, 1
	JE   LBB0_420

LBB0_863:
	LONG $0x397d63c4; WORD $0x01e1             // vextracti128    xmm1, ymm12, 1
	LONG $0x7ef9e1c4; BYTE $0xcb               // vmovq    rbx, xmm1
	LONG $0x147943c4; WORD $0x1834; BYTE $0x0a // vpextrb    byte [r8 + rbx], xmm14, 10
	LONG $0x1479e3c4; WORD $0x0bf3             // vpextrb    ebx, xmm6, 11
	WORD $0xc3f6; BYTE $0x01                   // test    bl, 1
	JNE  LBB0_864

LBB0_421:
	LONG $0x1479e3c4; WORD $0x0cf3 // vpextrb    ebx, xmm6, 12
	WORD $0xc3f6; BYTE $0x01       // test    bl, 1
	JE   LBB0_422

LBB0_865:
	LONG $0x7ef961c4; BYTE $0xdb               // vmovq    rbx, xmm11
	LONG $0x147943c4; WORD $0x1834; BYTE $0x0c // vpextrb    byte [r8 + rbx], xmm14, 12
	LONG $0x1479e3c4; WORD $0x0df3             // vpextrb    ebx, xmm6, 13
	WORD $0xc3f6; BYTE $0x01                   // test    bl, 1
	JNE  LBB0_866

LBB0_423:
	LONG $0x1479e3c4; WORD $0x0ef3 // vpextrb    ebx, xmm6, 14
	WORD $0xc3f6; BYTE $0x01       // test    bl, 1
	JE   LBB0_424

LBB0_867:
	LONG $0x397d63c4; WORD $0x01d9             // vextracti128    xmm1, ymm11, 1
	LONG $0x7ef9e1c4; BYTE $0xcb               // vmovq    rbx, xmm1
	LONG $0x147943c4; WORD $0x1834; BYTE $0x0e // vpextrb    byte [r8 + rbx], xmm14, 14
	LONG $0x1479e3c4; WORD $0x0ff3             // vpextrb    ebx, xmm6, 15
	WORD $0xc3f6; BYTE $0x01                   // test    bl, 1
	JNE  LBB0_868

LBB0_425:
	LONG $0x2c2444f6; BYTE $0x01 // test    byte [rsp + 44], 1
	JE   LBB0_426

LBB0_869:
	LONG $0x7ef961c4; BYTE $0xd3               // vmovq    rbx, xmm10
	LONG $0x397d63c4; WORD $0x01f1             // vextracti128    xmm1, ymm14, 1
	LONG $0x1479c3c4; WORD $0x180c; BYTE $0x00 // vpextrb    byte [r8 + rbx], xmm1, 0
	LONG $0x282444f6; BYTE $0x01               // test    byte [rsp + 40], 1
	JNE  LBB0_870

LBB0_427:
	LONG $0x242444f6; BYTE $0x01 // test    byte [rsp + 36], 1
	JE   LBB0_428

LBB0_871:
	LONG $0x397d63c4; WORD $0x01d1             // vextracti128    xmm1, ymm10, 1
	LONG $0x7ef9e1c4; BYTE $0xcb               // vmovq    rbx, xmm1
	LONG $0x397d63c4; WORD $0x01f1             // vextracti128    xmm1, ymm14, 1
	LONG $0x1479c3c4; WORD $0x180c; BYTE $0x02 // vpextrb    byte [r8 + rbx], xmm1, 2
	LONG $0x202444f6; BYTE $0x01               // test    byte [rsp + 32], 1
	JNE  LBB0_872

LBB0_429:
	LONG $0x1c2444f6; BYTE $0x01 // test    byte [rsp + 28], 1
	JE   LBB0_430

LBB0_873:
	LONG $0x7ef961c4; BYTE $0xcb               // vmovq    rbx, xmm9
	LONG $0x397d63c4; WORD $0x01f1             // vextracti128    xmm1, ymm14, 1
	LONG $0x1479c3c4; WORD $0x180c; BYTE $0x04 // vpextrb    byte [r8 + rbx], xmm1, 4
	LONG $0x182444f6; BYTE $0x01               // test    byte [rsp + 24], 1
	JNE  LBB0_874

LBB0_431:
	LONG $0x142444f6; BYTE $0x01 // test    byte [rsp + 20], 1
	JE   LBB0_432

LBB0_875:
	LONG $0x397d63c4; WORD $0x01c9             // vextracti128    xmm1, ymm9, 1
	LONG $0x7ef9e1c4; BYTE $0xcb               // vmovq    rbx, xmm1
	LONG $0x397d63c4; WORD $0x01f1             // vextracti128    xmm1, ymm14, 1
	LONG $0x1479c3c4; WORD $0x180c; BYTE $0x06 // vpextrb    byte [r8 + rbx], xmm1, 6
	LONG $0x01c1f641                           // test    r9b, 1
	JNE  LBB0_876

LBB0_433:
	WORD $0xc2f6; BYTE $0x01 // test    dl, 1
	QUAD $0x00000128249c8b48 // mov    rbx, qword [rsp + 296]
	JE   LBB0_434

LBB0_877:
	LONG $0x7ef961c4; BYTE $0xc2               // vmovq    rdx, xmm8
	LONG $0x397d63c4; WORD $0x01f1             // vextracti128    xmm1, ymm14, 1
	LONG $0x1479c3c4; WORD $0x100c; BYTE $0x08 // vpextrb    byte [r8 + rdx], xmm1, 8
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JNE  LBB0_878

LBB0_435:
	LONG $0x01c6f640         // test    sil, 1
	QUAD $0x0000013024948b48 // mov    rdx, qword [rsp + 304]
	JE   LBB0_436

LBB0_879:
	LONG $0x397d63c4; WORD $0x01c1             // vextracti128    xmm1, ymm8, 1
	LONG $0x7ef9e1c4; BYTE $0xc9               // vmovq    rcx, xmm1
	LONG $0x397d63c4; WORD $0x01f1             // vextracti128    xmm1, ymm14, 1
	LONG $0x1479c3c4; WORD $0x080c; BYTE $0x0a // vpextrb    byte [r8 + rcx], xmm1, 10
	WORD $0x01a8                               // test    al, 1
	QUAD $0x0000009824b48b48                   // mov    rsi, qword [rsp + 152]
	JNE  LBB0_880

LBB0_437:
	LONG $0x01c5f641 // test    r13b, 1
	JE   LBB0_438

LBB0_881:
	LONG $0x7ef9e1c4; BYTE $0xf9               // vmovq    rcx, xmm7
	LONG $0x397d63c4; WORD $0x01f1             // vextracti128    xmm1, ymm14, 1
	LONG $0x1479c3c4; WORD $0x080c; BYTE $0x0c // vpextrb    byte [r8 + rcx], xmm1, 12
	LONG $0x01c2f641                           // test    r10b, 1
	QUAD $0x0000011824ac8b4c                   // mov    r13, qword [rsp + 280]
	JNE  LBB0_882

LBB0_439:
	LONG $0x01c3f641 // test    r11b, 1
	JE   LBB0_440

LBB0_883:
	LONG $0x397de3c4; WORD $0x01f9             // vextracti128    xmm1, ymm7, 1
	LONG $0x7ef9e1c4; BYTE $0xc9               // vmovq    rcx, xmm1
	LONG $0x397d63c4; WORD $0x01f1             // vextracti128    xmm1, ymm14, 1
	LONG $0x1479c3c4; WORD $0x080c; BYTE $0x0e // vpextrb    byte [r8 + rcx], xmm1, 14
	LONG $0x01c6f641                           // test    r14b, 1
	QUAD $0x0000012024848b48                   // mov    rax, qword [rsp + 288]
	QUAD $0x000000e8248c8b4c                   // mov    r9, qword [rsp + 232]
	JNE  LBB0_441
	JMP  LBB0_442

LBB0_410:
	LONG $0x1479e3c4; WORD $0x01f3 // vpextrb    ebx, xmm6, 1
	WORD $0xc3f6; BYTE $0x01       // test    bl, 1
	JE   LBB0_411

LBB0_854:
	LONG $0x16f963c4; WORD $0x01fb             // vpextrq    rbx, xmm15, 1
	LONG $0x147943c4; WORD $0x1834; BYTE $0x01 // vpextrb    byte [r8 + rbx], xmm14, 1
	LONG $0x1479e3c4; WORD $0x02f3             // vpextrb    ebx, xmm6, 2
	WORD $0xc3f6; BYTE $0x01                   // test    bl, 1
	QUAD $0x000000e024bc8b4c                   // mov    r15, qword [rsp + 224]
	JNE  LBB0_855

LBB0_412:
	LONG $0x1479e3c4; WORD $0x03f3 // vpextrb    ebx, xmm6, 3
	WORD $0xc3f6; BYTE $0x01       // test    bl, 1
	JE   LBB0_413

LBB0_856:
	LONG $0x397d63c4; WORD $0x01f9             // vextracti128    xmm1, ymm15, 1
	LONG $0x16f9e3c4; WORD $0x01cb             // vpextrq    rbx, xmm1, 1
	LONG $0x147943c4; WORD $0x1834; BYTE $0x03 // vpextrb    byte [r8 + rbx], xmm14, 3
	LONG $0x1479e3c4; WORD $0x04f3             // vpextrb    ebx, xmm6, 4
	WORD $0xc3f6; BYTE $0x01                   // test    bl, 1
	JNE  LBB0_857

LBB0_414:
	LONG $0x1479e3c4; WORD $0x05f3 // vpextrb    ebx, xmm6, 5
	WORD $0xc3f6; BYTE $0x01       // test    bl, 1
	JE   LBB0_415

LBB0_858:
	LONG $0x16f9e3c4; WORD $0x01eb             // vpextrq    rbx, xmm5, 1
	LONG $0x147943c4; WORD $0x1834; BYTE $0x05 // vpextrb    byte [r8 + rbx], xmm14, 5
	LONG $0x1479e3c4; WORD $0x06f3             // vpextrb    ebx, xmm6, 6
	WORD $0xc3f6; BYTE $0x01                   // test    bl, 1
	JNE  LBB0_859

LBB0_416:
	LONG $0x1479e3c4; WORD $0x07f3 // vpextrb    ebx, xmm6, 7
	WORD $0xc3f6; BYTE $0x01       // test    bl, 1
	JE   LBB0_417

LBB0_860:
	LONG $0x397de3c4; WORD $0x01e9             // vextracti128    xmm1, ymm5, 1
	LONG $0x16f9e3c4; WORD $0x01cb             // vpextrq    rbx, xmm1, 1
	LONG $0x147943c4; WORD $0x1834; BYTE $0x07 // vpextrb    byte [r8 + rbx], xmm14, 7
	LONG $0x1479e3c4; WORD $0x08f3             // vpextrb    ebx, xmm6, 8
	WORD $0xc3f6; BYTE $0x01                   // test    bl, 1
	JNE  LBB0_861

LBB0_418:
	LONG $0x1479e3c4; WORD $0x09f3 // vpextrb    ebx, xmm6, 9
	WORD $0xc3f6; BYTE $0x01       // test    bl, 1
	JE   LBB0_419

LBB0_862:
	LONG $0x16f963c4; WORD $0x01e3             // vpextrq    rbx, xmm12, 1
	LONG $0x147943c4; WORD $0x1834; BYTE $0x09 // vpextrb    byte [r8 + rbx], xmm14, 9
	LONG $0x1479e3c4; WORD $0x0af3             // vpextrb    ebx, xmm6, 10
	WORD $0xc3f6; BYTE $0x01                   // test    bl, 1
	JNE  LBB0_863

LBB0_420:
	LONG $0x1479e3c4; WORD $0x0bf3 // vpextrb    ebx, xmm6, 11
	WORD $0xc3f6; BYTE $0x01       // test    bl, 1
	JE   LBB0_421

LBB0_864:
	LONG $0x397d63c4; WORD $0x01e1             // vextracti128    xmm1, ymm12, 1
	LONG $0x16f9e3c4; WORD $0x01cb             // vpextrq    rbx, xmm1, 1
	LONG $0x147943c4; WORD $0x1834; BYTE $0x0b // vpextrb    byte [r8 + rbx], xmm14, 11
	LONG $0x1479e3c4; WORD $0x0cf3             // vpextrb    ebx, xmm6, 12
	WORD $0xc3f6; BYTE $0x01                   // test    bl, 1
	JNE  LBB0_865

LBB0_422:
	LONG $0x1479e3c4; WORD $0x0df3 // vpextrb    ebx, xmm6, 13
	WORD $0xc3f6; BYTE $0x01       // test    bl, 1
	JE   LBB0_423

LBB0_866:
	LONG $0x16f963c4; WORD $0x01db             // vpextrq    rbx, xmm11, 1
	LONG $0x147943c4; WORD $0x1834; BYTE $0x0d // vpextrb    byte [r8 + rbx], xmm14, 13
	LONG $0x1479e3c4; WORD $0x0ef3             // vpextrb    ebx, xmm6, 14
	WORD $0xc3f6; BYTE $0x01                   // test    bl, 1
	JNE  LBB0_867

LBB0_424:
	LONG $0x1479e3c4; WORD $0x0ff3 // vpextrb    ebx, xmm6, 15
	WORD $0xc3f6; BYTE $0x01       // test    bl, 1
	JE   LBB0_425

LBB0_868:
	LONG $0x397d63c4; WORD $0x01d9             // vextracti128    xmm1, ymm11, 1
	LONG $0x16f9e3c4; WORD $0x01cb             // vpextrq    rbx, xmm1, 1
	LONG $0x147943c4; WORD $0x1834; BYTE $0x0f // vpextrb    byte [r8 + rbx], xmm14, 15
	LONG $0x2c2444f6; BYTE $0x01               // test    byte [rsp + 44], 1
	JNE  LBB0_869

LBB0_426:
	LONG $0x282444f6; BYTE $0x01 // test    byte [rsp + 40], 1
	JE   LBB0_427

LBB0_870:
	LONG $0x16f963c4; WORD $0x01d3             // vpextrq    rbx, xmm10, 1
	LONG $0x397d63c4; WORD $0x01f1             // vextracti128    xmm1, ymm14, 1
	LONG $0x1479c3c4; WORD $0x180c; BYTE $0x01 // vpextrb    byte [r8 + rbx], xmm1, 1
	LONG $0x242444f6; BYTE $0x01               // test    byte [rsp + 36], 1
	JNE  LBB0_871

LBB0_428:
	LONG $0x202444f6; BYTE $0x01 // test    byte [rsp + 32], 1
	JE   LBB0_429

LBB0_872:
	LONG $0x397d63c4; WORD $0x01d1             // vextracti128    xmm1, ymm10, 1
	LONG $0x16f9e3c4; WORD $0x01cb             // vpextrq    rbx, xmm1, 1
	LONG $0x397d63c4; WORD $0x01f1             // vextracti128    xmm1, ymm14, 1
	LONG $0x1479c3c4; WORD $0x180c; BYTE $0x03 // vpextrb    byte [r8 + rbx], xmm1, 3
	LONG $0x1c2444f6; BYTE $0x01               // test    byte [rsp + 28], 1
	JNE  LBB0_873

LBB0_430:
	LONG $0x182444f6; BYTE $0x01 // test    byte [rsp + 24], 1
	JE   LBB0_431

LBB0_874:
	LONG $0x16f963c4; WORD $0x01cb             // vpextrq    rbx, xmm9, 1
	LONG $0x397d63c4; WORD $0x01f1             // vextracti128    xmm1, ymm14, 1
	LONG $0x1479c3c4; WORD $0x180c; BYTE $0x05 // vpextrb    byte [r8 + rbx], xmm1, 5
	LONG $0x142444f6; BYTE $0x01               // test    byte [rsp + 20], 1
	JNE  LBB0_875

LBB0_432:
	LONG $0x01c1f641 // test    r9b, 1
	JE   LBB0_433

LBB0_876:
	LONG $0x397d63c4; WORD $0x01c9             // vextracti128    xmm1, ymm9, 1
	LONG $0x16f9e3c4; WORD $0x01cb             // vpextrq    rbx, xmm1, 1
	LONG $0x397d63c4; WORD $0x01f1             // vextracti128    xmm1, ymm14, 1
	LONG $0x1479c3c4; WORD $0x180c; BYTE $0x07 // vpextrb    byte [r8 + rbx], xmm1, 7
	WORD $0xc2f6; BYTE $0x01                   // test    dl, 1
	QUAD $0x00000128249c8b48                   // mov    rbx, qword [rsp + 296]
	JNE  LBB0_877

LBB0_434:
	WORD $0xc1f6; BYTE $0x01 // test    cl, 1
	JE   LBB0_435

LBB0_878:
	LONG $0x16f963c4; WORD $0x01c1             // vpextrq    rcx, xmm8, 1
	LONG $0x397d63c4; WORD $0x01f1             // vextracti128    xmm1, ymm14, 1
	LONG $0x1479c3c4; WORD $0x080c; BYTE $0x09 // vpextrb    byte [r8 + rcx], xmm1, 9
	LONG $0x01c6f640                           // test    sil, 1
	QUAD $0x0000013024948b48                   // mov    rdx, qword [rsp + 304]
	JNE  LBB0_879

LBB0_436:
	WORD $0x01a8             // test    al, 1
	QUAD $0x0000009824b48b48 // mov    rsi, qword [rsp + 152]
	JE   LBB0_437

LBB0_880:
	LONG $0x397d63c4; WORD $0x01c1             // vextracti128    xmm1, ymm8, 1
	LONG $0x16f9e3c4; WORD $0x01c9             // vpextrq    rcx, xmm1, 1
	LONG $0x397d63c4; WORD $0x01f1             // vextracti128    xmm1, ymm14, 1
	LONG $0x1479c3c4; WORD $0x080c; BYTE $0x0b // vpextrb    byte [r8 + rcx], xmm1, 11
	LONG $0x01c5f641                           // test    r13b, 1
	JNE  LBB0_881

LBB0_438:
	LONG $0x01c2f641         // test    r10b, 1
	QUAD $0x0000011824ac8b4c // mov    r13, qword [rsp + 280]
	JE   LBB0_439

LBB0_882:
	LONG $0x16f9e3c4; WORD $0x01f9             // vpextrq    rcx, xmm7, 1
	LONG $0x397d63c4; WORD $0x01f1             // vextracti128    xmm1, ymm14, 1
	LONG $0x1479c3c4; WORD $0x080c; BYTE $0x0d // vpextrb    byte [r8 + rcx], xmm1, 13
	LONG $0x01c3f641                           // test    r11b, 1
	JNE  LBB0_883

LBB0_440:
	LONG $0x01c6f641         // test    r14b, 1
	QUAD $0x0000012024848b48 // mov    rax, qword [rsp + 288]
	QUAD $0x000000e8248c8b4c // mov    r9, qword [rsp + 232]
	JE   LBB0_442

LBB0_441:
	LONG $0x397de3c4; WORD $0x01f9             // vextracti128    xmm1, ymm7, 1
	LONG $0x16f9e3c4; WORD $0x01c9             // vpextrq    rcx, xmm1, 1
	LONG $0x397d63c4; WORD $0x01f1             // vextracti128    xmm1, ymm14, 1
	LONG $0x1479c3c4; WORD $0x080c; BYTE $0x0f // vpextrb    byte [r8 + rcx], xmm1, 15

LBB0_442:
	QUAD $0x000280248c6ffdc5; BYTE $0x00 // vmovdqa    ymm1, yword [rsp + 640]
	QUAD $0x00020024bceb75c5; BYTE $0x00 // vpor    ymm15, ymm1, yword [rsp + 512]
	QUAD $0x0001e024acebf5c5; BYTE $0x00 // vpor    ymm5, ymm1, yword [rsp + 480]
	QUAD $0x0001802494eb75c5; BYTE $0x00 // vpor    ymm10, ymm1, yword [rsp + 384]
	QUAD $0x000160248ceb75c5; BYTE $0x00 // vpor    ymm9, ymm1, yword [rsp + 352]
	QUAD $0x0001c024a4eb75c5; BYTE $0x00 // vpor    ymm12, ymm1, yword [rsp + 448]
	QUAD $0x0001a0249ceb75c5; BYTE $0x00 // vpor    ymm11, ymm1, yword [rsp + 416]
	QUAD $0x0001402484eb75c5; BYTE $0x00 // vpor    ymm8, ymm1, yword [rsp + 320]
	LONG $0xf9ebddc5                     // vpor    ymm7, ymm4, ymm1
	LONG $0x463de3c4; WORD $0x31cf       // vperm2i128    ymm1, ymm8, ymm7, 49
	LONG $0x383de3c4; WORD $0x01d7       // vinserti128    ymm2, ymm8, xmm7, 1
	LONG $0xc9c6ecc5; BYTE $0x88         // vshufps    ymm1, ymm2, ymm1, 136
	LONG $0x461dc3c4; WORD $0x31d3       // vperm2i128    ymm2, ymm12, ymm11, 49
	LONG $0x381dc3c4; WORD $0x01db       // vinserti128    ymm3, ymm12, xmm11, 1
	LONG $0xd2c6e4c5; BYTE $0x88         // vshufps    ymm2, ymm3, ymm2, 136
	LONG $0x462dc3c4; WORD $0x31d9       // vperm2i128    ymm3, ymm10, ymm9, 49
	LONG $0x382d43c4; WORD $0x01e9       // vinserti128    ymm13, ymm10, xmm9, 1
	LONG $0xdbc694c5; BYTE $0x88         // vshufps    ymm3, ymm13, ymm3, 136
	LONG $0x460563c4; WORD $0x31ed       // vperm2i128    ymm13, ymm15, ymm5, 49
	LONG $0x380563c4; WORD $0x01f5       // vinserti128    ymm14, ymm15, xmm5, 1
	LONG $0xc60c41c4; WORD $0x88ed       // vshufps    ymm13, ymm14, ymm13, 136
	LONG $0x667d41c4; BYTE $0xed         // vpcmpgtd    ymm13, ymm0, ymm13
	LONG $0xdb66fdc5                     // vpcmpgtd    ymm3, ymm0, ymm3
	LONG $0xdb6b95c5                     // vpackssdw    ymm3, ymm13, ymm3
	LONG $0xd266fdc5                     // vpcmpgtd    ymm2, ymm0, ymm2
	LONG $0xc966fdc5                     // vpcmpgtd    ymm1, ymm0, ymm1
	LONG $0xc96bedc5                     // vpackssdw    ymm1, ymm2, ymm1
	LONG $0x00fde3c4; WORD $0xd8d3       // vpermq    ymm2, ymm3, 216
	LONG $0x00fde3c4; WORD $0xd8c9       // vpermq    ymm1, ymm1, 216
	LONG $0xc963edc5                     // vpacksswb    ymm1, ymm2, ymm1
	LONG $0xf6dbf5c5                     // vpand    ymm6, ymm1, ymm6
	LONG $0xf17ef9c5                     // vmovd    ecx, xmm6
	WORD $0xc1f6; BYTE $0x01             // test    cl, 1
	JE   LBB0_443
	LONG $0x787d62c4; WORD $0x1734       // vpbroadcastb    ymm14, byte [rdi + rdx]
	LONG $0x1479e3c4; WORD $0x01f1       // vpextrb    ecx, xmm6, 1
	WORD $0xc1f6; BYTE $0x01             // test    cl, 1
	JNE  LBB0_885

LBB0_444:
	LONG $0x24548b48; BYTE $0x68   // mov    rdx, qword [rsp + 104]
	LONG $0x1479e3c4; WORD $0x02f1 // vpextrb    ecx, xmm6, 2
	WORD $0xc1f6; BYTE $0x01       // test    cl, 1
	JE   LBB0_446

LBB0_445:
	LONG $0x2009e3c4; WORD $0x1f0c; BYTE $0x02 // vpinsrb    xmm1, xmm14, byte [rdi + rbx], 2
	LONG $0x020d63c4; WORD $0x0ff1             // vpblendd    ymm14, ymm14, ymm1, 15

LBB0_446:
	LONG $0x24748b48; BYTE $0x60               // mov    rsi, qword [rsp + 96]
	LONG $0x24548b4c; BYTE $0x48               // mov    r10, qword [rsp + 72]
	LONG $0x1479e3c4; WORD $0x03f1             // vpextrb    ecx, xmm6, 3
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JE   LBB0_447
	QUAD $0x00000110248c8b48                   // mov    rcx, qword [rsp + 272]
	LONG $0x2009e3c4; WORD $0x0f0c; BYTE $0x03 // vpinsrb    xmm1, xmm14, byte [rdi + rcx], 3
	LONG $0x020d63c4; WORD $0x0ff1             // vpblendd    ymm14, ymm14, ymm1, 15
	LONG $0x1479e3c4; WORD $0x04f1             // vpextrb    ecx, xmm6, 4
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JNE  LBB0_887

LBB0_448:
	LONG $0x1479e3c4; WORD $0x05f1 // vpextrb    ecx, xmm6, 5
	WORD $0xc1f6; BYTE $0x01       // test    cl, 1
	JE   LBB0_449

LBB0_888:
	LONG $0x2009e3c4; WORD $0x170c; BYTE $0x05 // vpinsrb    xmm1, xmm14, byte [rdi + rdx], 5
	LONG $0x020d63c4; WORD $0x0ff1             // vpblendd    ymm14, ymm14, ymm1, 15
	LONG $0x1479e3c4; WORD $0x06f1             // vpextrb    ecx, xmm6, 6
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JNE  LBB0_889

LBB0_450:
	LONG $0x1479e3c4; WORD $0x07f1 // vpextrb    ecx, xmm6, 7
	WORD $0xc1f6; BYTE $0x01       // test    cl, 1
	JE   LBB0_451

LBB0_890:
	LONG $0x2009a3c4; WORD $0x0f0c; BYTE $0x07 // vpinsrb    xmm1, xmm14, byte [rdi + r9], 7
	LONG $0x020d63c4; WORD $0x0ff1             // vpblendd    ymm14, ymm14, ymm1, 15
	LONG $0x1479e3c4; WORD $0x08f1             // vpextrb    ecx, xmm6, 8
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JNE  LBB0_891

LBB0_452:
	LONG $0x24548b48; BYTE $0x58   // mov    rdx, qword [rsp + 88]
	LONG $0x1479e3c4; WORD $0x09f1 // vpextrb    ecx, xmm6, 9
	WORD $0xc1f6; BYTE $0x01       // test    cl, 1
	JE   LBB0_454

LBB0_453:
	LONG $0x2009a3c4; WORD $0x3f0c; BYTE $0x09 // vpinsrb    xmm1, xmm14, byte [rdi + r15], 9
	LONG $0x020d63c4; WORD $0x0ff1             // vpblendd    ymm14, ymm14, ymm1, 15

LBB0_454:
	QUAD $0x0000009024848b48                   // mov    rax, qword [rsp + 144]
	QUAD $0x0000008824b48b48                   // mov    rsi, qword [rsp + 136]
	QUAD $0x00000080249c8b48                   // mov    rbx, qword [rsp + 128]
	LONG $0x244c8b4c; BYTE $0x78               // mov    r9, qword [rsp + 120]
	LONG $0x1479e3c4; WORD $0x0af1             // vpextrb    ecx, xmm6, 10
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JE   LBB0_455
	LONG $0x2009e3c4; WORD $0x070c; BYTE $0x0a // vpinsrb    xmm1, xmm14, byte [rdi + rax], 10
	LONG $0x020d63c4; WORD $0x0ff1             // vpblendd    ymm14, ymm14, ymm1, 15
	LONG $0x1479e3c4; WORD $0x0bf1             // vpextrb    ecx, xmm6, 11
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JNE  LBB0_893

LBB0_456:
	LONG $0x1479e3c4; WORD $0x0cf1 // vpextrb    ecx, xmm6, 12
	WORD $0xc1f6; BYTE $0x01       // test    cl, 1
	JE   LBB0_457

LBB0_894:
	QUAD $0x000000f824848b48                   // mov    rax, qword [rsp + 248]
	LONG $0x2009e3c4; WORD $0x070c; BYTE $0x0c // vpinsrb    xmm1, xmm14, byte [rdi + rax], 12
	LONG $0x020d63c4; WORD $0x0ff1             // vpblendd    ymm14, ymm14, ymm1, 15
	LONG $0x1479e3c4; WORD $0x0df1             // vpextrb    ecx, xmm6, 13
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JNE  LBB0_458
	JMP  LBB0_459

LBB0_443:
	LONG $0x1479e3c4; WORD $0x01f1 // vpextrb    ecx, xmm6, 1
	WORD $0xc1f6; BYTE $0x01       // test    cl, 1
	JE   LBB0_444

LBB0_885:
	LONG $0x2009e3c4; WORD $0x370c; BYTE $0x01 // vpinsrb    xmm1, xmm14, byte [rdi + rsi], 1
	LONG $0x020d63c4; WORD $0x0ff1             // vpblendd    ymm14, ymm14, ymm1, 15
	LONG $0x24548b48; BYTE $0x68               // mov    rdx, qword [rsp + 104]
	LONG $0x1479e3c4; WORD $0x02f1             // vpextrb    ecx, xmm6, 2
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JNE  LBB0_445
	JMP  LBB0_446

LBB0_447:
	LONG $0x1479e3c4; WORD $0x04f1 // vpextrb    ecx, xmm6, 4
	WORD $0xc1f6; BYTE $0x01       // test    cl, 1
	JE   LBB0_448

LBB0_887:
	QUAD $0x00000108248c8b48                   // mov    rcx, qword [rsp + 264]
	LONG $0x2009e3c4; WORD $0x0f0c; BYTE $0x04 // vpinsrb    xmm1, xmm14, byte [rdi + rcx], 4
	LONG $0x020d63c4; WORD $0x0ff1             // vpblendd    ymm14, ymm14, ymm1, 15
	LONG $0x1479e3c4; WORD $0x05f1             // vpextrb    ecx, xmm6, 5
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JNE  LBB0_888

LBB0_449:
	LONG $0x1479e3c4; WORD $0x06f1 // vpextrb    ecx, xmm6, 6
	WORD $0xc1f6; BYTE $0x01       // test    cl, 1
	JE   LBB0_450

LBB0_889:
	LONG $0x2009e3c4; WORD $0x070c; BYTE $0x06 // vpinsrb    xmm1, xmm14, byte [rdi + rax], 6
	LONG $0x020d63c4; WORD $0x0ff1             // vpblendd    ymm14, ymm14, ymm1, 15
	LONG $0x1479e3c4; WORD $0x07f1             // vpextrb    ecx, xmm6, 7
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JNE  LBB0_890

LBB0_451:
	LONG $0x1479e3c4; WORD $0x08f1 // vpextrb    ecx, xmm6, 8
	WORD $0xc1f6; BYTE $0x01       // test    cl, 1
	JE   LBB0_452

LBB0_891:
	LONG $0x2009e3c4; WORD $0x370c; BYTE $0x08 // vpinsrb    xmm1, xmm14, byte [rdi + rsi], 8
	LONG $0x020d63c4; WORD $0x0ff1             // vpblendd    ymm14, ymm14, ymm1, 15
	LONG $0x24548b48; BYTE $0x58               // mov    rdx, qword [rsp + 88]
	LONG $0x1479e3c4; WORD $0x09f1             // vpextrb    ecx, xmm6, 9
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JNE  LBB0_453
	JMP  LBB0_454

LBB0_455:
	LONG $0x1479e3c4; WORD $0x0bf1 // vpextrb    ecx, xmm6, 11
	WORD $0xc1f6; BYTE $0x01       // test    cl, 1
	JE   LBB0_456

LBB0_893:
	QUAD $0x0000010024848b48                   // mov    rax, qword [rsp + 256]
	LONG $0x2009e3c4; WORD $0x070c; BYTE $0x0b // vpinsrb    xmm1, xmm14, byte [rdi + rax], 11
	LONG $0x020d63c4; WORD $0x0ff1             // vpblendd    ymm14, ymm14, ymm1, 15
	LONG $0x1479e3c4; WORD $0x0cf1             // vpextrb    ecx, xmm6, 12
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JNE  LBB0_894

LBB0_457:
	LONG $0x1479e3c4; WORD $0x0df1 // vpextrb    ecx, xmm6, 13
	WORD $0xc1f6; BYTE $0x01       // test    cl, 1
	JE   LBB0_459

LBB0_458:
	LONG $0x2009e3c4; WORD $0x170c; BYTE $0x0d // vpinsrb    xmm1, xmm14, byte [rdi + rdx], 13
	LONG $0x020d63c4; WORD $0x0ff1             // vpblendd    ymm14, ymm14, ymm1, 15

LBB0_459:
	LONG $0x24448b48; BYTE $0x50               // mov    rax, qword [rsp + 80]
	LONG $0x24548b48; BYTE $0x40               // mov    rdx, qword [rsp + 64]
	LONG $0x1479e3c4; WORD $0x0ef1             // vpextrb    ecx, xmm6, 14
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JE   LBB0_461
	LONG $0x2009e3c4; WORD $0x070c; BYTE $0x0e // vpinsrb    xmm1, xmm14, byte [rdi + rax], 14
	LONG $0x020d63c4; WORD $0x0ff1             // vpblendd    ymm14, ymm14, ymm1, 15

LBB0_461:
	LONG $0x1479e3c4; WORD $0x0ff1             // vpextrb    ecx, xmm6, 15
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JE   LBB0_463
	LONG $0x2009a3c4; WORD $0x170c; BYTE $0x0f // vpinsrb    xmm1, xmm14, byte [rdi + r10], 15
	LONG $0x020d63c4; WORD $0x0ff1             // vpblendd    ymm14, ymm14, ymm1, 15

LBB0_463:
	LONG $0x397de3c4; WORD $0x01f1             // vextracti128    xmm1, ymm6, 1
	LONG $0xc87ef9c5                           // vmovd    eax, xmm1
	LONG $0x2c244489                           // mov    dword [rsp + 44], eax
	WORD $0x01a8                               // test    al, 1
	JE   LBB0_465
	LONG $0x397d63c4; WORD $0x01f2             // vextracti128    xmm2, ymm14, 1
	LONG $0x2069e3c4; WORD $0x1714; BYTE $0x00 // vpinsrb    xmm2, xmm2, byte [rdi + rdx], 0
	LONG $0x380d63c4; WORD $0x01f2             // vinserti128    ymm14, ymm14, xmm2, 1

LBB0_465:
	LONG $0x24448b48; BYTE $0x38               // mov    rax, qword [rsp + 56]
	LONG $0x1479e3c4; WORD $0x01c9             // vpextrb    ecx, xmm1, 1
	LONG $0x28244c89                           // mov    dword [rsp + 40], ecx
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JE   LBB0_466
	LONG $0x397d63c4; WORD $0x01f2             // vextracti128    xmm2, ymm14, 1
	LONG $0x2069e3c4; WORD $0x3714; BYTE $0x01 // vpinsrb    xmm2, xmm2, byte [rdi + rsi], 1
	LONG $0x380d63c4; WORD $0x01f2             // vinserti128    ymm14, ymm14, xmm2, 1
	LONG $0x1479e3c4; WORD $0x02c9             // vpextrb    ecx, xmm1, 2
	LONG $0x24244c89                           // mov    dword [rsp + 36], ecx
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JNE  LBB0_896

LBB0_467:
	LONG $0x1479e3c4; WORD $0x03c9 // vpextrb    ecx, xmm1, 3
	LONG $0x20244c89               // mov    dword [rsp + 32], ecx
	WORD $0xc1f6; BYTE $0x01       // test    cl, 1
	JE   LBB0_468

LBB0_897:
	LONG $0x397d63c4; WORD $0x01f2             // vextracti128    xmm2, ymm14, 1
	LONG $0x2069a3c4; WORD $0x0f14; BYTE $0x03 // vpinsrb    xmm2, xmm2, byte [rdi + r9], 3
	LONG $0x380d63c4; WORD $0x01f2             // vinserti128    ymm14, ymm14, xmm2, 1
	LONG $0x1479e3c4; WORD $0x04c9             // vpextrb    ecx, xmm1, 4
	LONG $0x1c244c89                           // mov    dword [rsp + 28], ecx
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JNE  LBB0_898

LBB0_469:
	LONG $0x1479e3c4; WORD $0x05c8 // vpextrb    eax, xmm1, 5
	LONG $0x18244489               // mov    dword [rsp + 24], eax
	WORD $0x01a8                   // test    al, 1
	JE   LBB0_471

LBB0_470:
	LONG $0x397d63c4; WORD $0x01f2             // vextracti128    xmm2, ymm14, 1
	LONG $0x2069a3c4; WORD $0x2f14; BYTE $0x05 // vpinsrb    xmm2, xmm2, byte [rdi + r13], 5
	LONG $0x380d63c4; WORD $0x01f2             // vinserti128    ymm14, ymm14, xmm2, 1

LBB0_471:
	LONG $0x24448b48; BYTE $0x70               // mov    rax, qword [rsp + 112]
	LONG $0x1479e3c4; WORD $0x06c9             // vpextrb    ecx, xmm1, 6
	LONG $0x14244c89                           // mov    dword [rsp + 20], ecx
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JE   LBB0_472
	LONG $0x397d63c4; WORD $0x01f2             // vextracti128    xmm2, ymm14, 1
	LONG $0x2069e3c4; WORD $0x0714; BYTE $0x06 // vpinsrb    xmm2, xmm2, byte [rdi + rax], 6
	LONG $0x380d63c4; WORD $0x01f2             // vinserti128    ymm14, ymm14, xmm2, 1
	LONG $0x1479c3c4; WORD $0x07c9             // vpextrb    r9d, xmm1, 7
	LONG $0x01c1f641                           // test    r9b, 1
	JNE  LBB0_900

LBB0_473:
	LONG $0x1479e3c4; WORD $0x08ca // vpextrb    edx, xmm1, 8
	WORD $0xc2f6; BYTE $0x01       // test    dl, 1
	JE   LBB0_474

LBB0_901:
	LONG $0x397d63c4; WORD $0x01f2             // vextracti128    xmm2, ymm14, 1
	QUAD $0x000000d824848b48                   // mov    rax, qword [rsp + 216]
	LONG $0x2069e3c4; WORD $0x0714; BYTE $0x08 // vpinsrb    xmm2, xmm2, byte [rdi + rax], 8
	LONG $0x380d63c4; WORD $0x01f2             // vinserti128    ymm14, ymm14, xmm2, 1
	LONG $0x1479e3c4; WORD $0x09c9             // vpextrb    ecx, xmm1, 9
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JNE  LBB0_902

LBB0_475:
	LONG $0x1479e3c4; WORD $0x0ace // vpextrb    esi, xmm1, 10
	LONG $0x01c6f640               // test    sil, 1
	JE   LBB0_476

LBB0_903:
	LONG $0x397d63c4; WORD $0x01f2             // vextracti128    xmm2, ymm14, 1
	QUAD $0x000000c824848b48                   // mov    rax, qword [rsp + 200]
	LONG $0x2069e3c4; WORD $0x0714; BYTE $0x0a // vpinsrb    xmm2, xmm2, byte [rdi + rax], 10
	LONG $0x380d63c4; WORD $0x01f2             // vinserti128    ymm14, ymm14, xmm2, 1
	LONG $0x1479e3c4; WORD $0x0bc8             // vpextrb    eax, xmm1, 11
	WORD $0x01a8                               // test    al, 1
	JNE  LBB0_904

LBB0_477:
	LONG $0x1479c3c4; WORD $0x0ccd // vpextrb    r13d, xmm1, 12
	LONG $0x01c5f641               // test    r13b, 1
	JE   LBB0_478

LBB0_905:
	LONG $0x397d63c4; WORD $0x01f2             // vextracti128    xmm2, ymm14, 1
	QUAD $0x000000b8249c8b48                   // mov    rbx, qword [rsp + 184]
	LONG $0x2069e3c4; WORD $0x1f14; BYTE $0x0c // vpinsrb    xmm2, xmm2, byte [rdi + rbx], 12
	LONG $0x380d63c4; WORD $0x01f2             // vinserti128    ymm14, ymm14, xmm2, 1
	LONG $0x1479c3c4; WORD $0x0dca             // vpextrb    r10d, xmm1, 13
	LONG $0x01c2f641                           // test    r10b, 1
	JNE  LBB0_906

LBB0_479:
	LONG $0x1479c3c4; WORD $0x0ecb // vpextrb    r11d, xmm1, 14
	LONG $0x01c3f641               // test    r11b, 1
	JE   LBB0_480

LBB0_907:
	LONG $0x397d63c4; WORD $0x01f2             // vextracti128    xmm2, ymm14, 1
	QUAD $0x000000a8249c8b48                   // mov    rbx, qword [rsp + 168]
	LONG $0x2069e3c4; WORD $0x1f14; BYTE $0x0e // vpinsrb    xmm2, xmm2, byte [rdi + rbx], 14
	LONG $0x380d63c4; WORD $0x01f2             // vinserti128    ymm14, ymm14, xmm2, 1
	LONG $0x1479c3c4; WORD $0x0fce             // vpextrb    r14d, xmm1, 15
	LONG $0x01c6f641                           // test    r14b, 1
	JNE  LBB0_481
	JMP  LBB0_482

LBB0_466:
	LONG $0x1479e3c4; WORD $0x02c9 // vpextrb    ecx, xmm1, 2
	LONG $0x24244c89               // mov    dword [rsp + 36], ecx
	WORD $0xc1f6; BYTE $0x01       // test    cl, 1
	JE   LBB0_467

LBB0_896:
	LONG $0x397d63c4; WORD $0x01f2             // vextracti128    xmm2, ymm14, 1
	LONG $0x2069e3c4; WORD $0x1f14; BYTE $0x02 // vpinsrb    xmm2, xmm2, byte [rdi + rbx], 2
	LONG $0x380d63c4; WORD $0x01f2             // vinserti128    ymm14, ymm14, xmm2, 1
	LONG $0x1479e3c4; WORD $0x03c9             // vpextrb    ecx, xmm1, 3
	LONG $0x20244c89                           // mov    dword [rsp + 32], ecx
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JNE  LBB0_897

LBB0_468:
	LONG $0x1479e3c4; WORD $0x04c9 // vpextrb    ecx, xmm1, 4
	LONG $0x1c244c89               // mov    dword [rsp + 28], ecx
	WORD $0xc1f6; BYTE $0x01       // test    cl, 1
	JE   LBB0_469

LBB0_898:
	LONG $0x397d63c4; WORD $0x01f2             // vextracti128    xmm2, ymm14, 1
	LONG $0x2069e3c4; WORD $0x0714; BYTE $0x04 // vpinsrb    xmm2, xmm2, byte [rdi + rax], 4
	LONG $0x380d63c4; WORD $0x01f2             // vinserti128    ymm14, ymm14, xmm2, 1
	LONG $0x1479e3c4; WORD $0x05c8             // vpextrb    eax, xmm1, 5
	LONG $0x18244489                           // mov    dword [rsp + 24], eax
	WORD $0x01a8                               // test    al, 1
	JNE  LBB0_470
	JMP  LBB0_471

LBB0_472:
	LONG $0x1479c3c4; WORD $0x07c9 // vpextrb    r9d, xmm1, 7
	LONG $0x01c1f641               // test    r9b, 1
	JE   LBB0_473

LBB0_900:
	LONG $0x397d63c4; WORD $0x01f2             // vextracti128    xmm2, ymm14, 1
	QUAD $0x000000f024848b48                   // mov    rax, qword [rsp + 240]
	LONG $0x2069e3c4; WORD $0x0714; BYTE $0x07 // vpinsrb    xmm2, xmm2, byte [rdi + rax], 7
	LONG $0x380d63c4; WORD $0x01f2             // vinserti128    ymm14, ymm14, xmm2, 1
	LONG $0x1479e3c4; WORD $0x08ca             // vpextrb    edx, xmm1, 8
	WORD $0xc2f6; BYTE $0x01                   // test    dl, 1
	JNE  LBB0_901

LBB0_474:
	LONG $0x1479e3c4; WORD $0x09c9 // vpextrb    ecx, xmm1, 9
	WORD $0xc1f6; BYTE $0x01       // test    cl, 1
	JE   LBB0_475

LBB0_902:
	LONG $0x397d63c4; WORD $0x01f2             // vextracti128    xmm2, ymm14, 1
	QUAD $0x000000d024848b48                   // mov    rax, qword [rsp + 208]
	LONG $0x2069e3c4; WORD $0x0714; BYTE $0x09 // vpinsrb    xmm2, xmm2, byte [rdi + rax], 9
	LONG $0x380d63c4; WORD $0x01f2             // vinserti128    ymm14, ymm14, xmm2, 1
	LONG $0x1479e3c4; WORD $0x0ace             // vpextrb    esi, xmm1, 10
	LONG $0x01c6f640                           // test    sil, 1
	JNE  LBB0_903

LBB0_476:
	LONG $0x1479e3c4; WORD $0x0bc8 // vpextrb    eax, xmm1, 11
	WORD $0x01a8                   // test    al, 1
	JE   LBB0_477

LBB0_904:
	LONG $0x397d63c4; WORD $0x01f2             // vextracti128    xmm2, ymm14, 1
	QUAD $0x000000c0249c8b48                   // mov    rbx, qword [rsp + 192]
	LONG $0x2069e3c4; WORD $0x1f14; BYTE $0x0b // vpinsrb    xmm2, xmm2, byte [rdi + rbx], 11
	LONG $0x380d63c4; WORD $0x01f2             // vinserti128    ymm14, ymm14, xmm2, 1
	LONG $0x1479c3c4; WORD $0x0ccd             // vpextrb    r13d, xmm1, 12
	LONG $0x01c5f641                           // test    r13b, 1
	JNE  LBB0_905

LBB0_478:
	LONG $0x1479c3c4; WORD $0x0dca // vpextrb    r10d, xmm1, 13
	LONG $0x01c2f641               // test    r10b, 1
	JE   LBB0_479

LBB0_906:
	LONG $0x397d63c4; WORD $0x01f2             // vextracti128    xmm2, ymm14, 1
	QUAD $0x000000b0249c8b48                   // mov    rbx, qword [rsp + 176]
	LONG $0x2069e3c4; WORD $0x1f14; BYTE $0x0d // vpinsrb    xmm2, xmm2, byte [rdi + rbx], 13
	LONG $0x380d63c4; WORD $0x01f2             // vinserti128    ymm14, ymm14, xmm2, 1
	LONG $0x1479c3c4; WORD $0x0ecb             // vpextrb    r11d, xmm1, 14
	LONG $0x01c3f641                           // test    r11b, 1
	JNE  LBB0_907

LBB0_480:
	LONG $0x1479c3c4; WORD $0x0fce // vpextrb    r14d, xmm1, 15
	LONG $0x01c6f641               // test    r14b, 1
	JE   LBB0_482

LBB0_481:
	LONG $0x397d63c4; WORD $0x01f1             // vextracti128    xmm1, ymm14, 1
	QUAD $0x000000a0249c8b48                   // mov    rbx, qword [rsp + 160]
	LONG $0x2071e3c4; WORD $0x1f0c; BYTE $0x0f // vpinsrb    xmm1, xmm1, byte [rdi + rbx], 15
	LONG $0x380d63c4; WORD $0x01f1             // vinserti128    ymm14, ymm14, xmm1, 1

LBB0_482:
	LONG $0x7175c1c4; WORD $0x05d6             // vpsrlw    ymm1, ymm14, 5
	QUAD $0x00000080b5db75c5                   // vpand    ymm14, ymm1, yword 128[rbp] /* [rip + .LCPI0_4] */
	LONG $0x7e79c1c4; BYTE $0xf7               // vmovd    r15d, xmm6
	LONG $0x01c7f641                           // test    r15b, 1
	JE   LBB0_483
	LONG $0x7ef961c4; BYTE $0xfb               // vmovq    rbx, xmm15
	LONG $0x147943c4; WORD $0x1834; BYTE $0x00 // vpextrb    byte [r8 + rbx], xmm14, 0
	LONG $0x1479e3c4; WORD $0x01f3             // vpextrb    ebx, xmm6, 1
	WORD $0xc3f6; BYTE $0x01                   // test    bl, 1
	JNE  LBB0_909

LBB0_484:
	LONG $0x1479e3c4; WORD $0x02f3 // vpextrb    ebx, xmm6, 2
	WORD $0xc3f6; BYTE $0x01       // test    bl, 1
	QUAD $0x000000e024bc8b4c       // mov    r15, qword [rsp + 224]
	JE   LBB0_485

LBB0_910:
	LONG $0x397d63c4; WORD $0x01f9             // vextracti128    xmm1, ymm15, 1
	LONG $0x7ef9e1c4; BYTE $0xcb               // vmovq    rbx, xmm1
	LONG $0x147943c4; WORD $0x1834; BYTE $0x02 // vpextrb    byte [r8 + rbx], xmm14, 2
	LONG $0x1479e3c4; WORD $0x03f3             // vpextrb    ebx, xmm6, 3
	WORD $0xc3f6; BYTE $0x01                   // test    bl, 1
	JNE  LBB0_911

LBB0_486:
	LONG $0x1479e3c4; WORD $0x04f3 // vpextrb    ebx, xmm6, 4
	WORD $0xc3f6; BYTE $0x01       // test    bl, 1
	JE   LBB0_487

LBB0_912:
	LONG $0x7ef9e1c4; BYTE $0xeb               // vmovq    rbx, xmm5
	LONG $0x147943c4; WORD $0x1834; BYTE $0x04 // vpextrb    byte [r8 + rbx], xmm14, 4
	LONG $0x1479e3c4; WORD $0x05f3             // vpextrb    ebx, xmm6, 5
	WORD $0xc3f6; BYTE $0x01                   // test    bl, 1
	JNE  LBB0_913

LBB0_488:
	LONG $0x1479e3c4; WORD $0x06f3 // vpextrb    ebx, xmm6, 6
	WORD $0xc3f6; BYTE $0x01       // test    bl, 1
	JE   LBB0_489

LBB0_914:
	LONG $0x397de3c4; WORD $0x01e9             // vextracti128    xmm1, ymm5, 1
	LONG $0x7ef9e1c4; BYTE $0xcb               // vmovq    rbx, xmm1
	LONG $0x147943c4; WORD $0x1834; BYTE $0x06 // vpextrb    byte [r8 + rbx], xmm14, 6
	LONG $0x1479e3c4; WORD $0x07f3             // vpextrb    ebx, xmm6, 7
	WORD $0xc3f6; BYTE $0x01                   // test    bl, 1
	JNE  LBB0_915

LBB0_490:
	LONG $0x1479e3c4; WORD $0x08f3 // vpextrb    ebx, xmm6, 8
	WORD $0xc3f6; BYTE $0x01       // test    bl, 1
	JE   LBB0_491

LBB0_916:
	LONG $0x7ef961c4; BYTE $0xe3               // vmovq    rbx, xmm12
	LONG $0x147943c4; WORD $0x1834; BYTE $0x08 // vpextrb    byte [r8 + rbx], xmm14, 8
	LONG $0x1479e3c4; WORD $0x09f3             // vpextrb    ebx, xmm6, 9
	WORD $0xc3f6; BYTE $0x01                   // test    bl, 1
	JNE  LBB0_917

LBB0_492:
	LONG $0x1479e3c4; WORD $0x0af3 // vpextrb    ebx, xmm6, 10
	WORD $0xc3f6; BYTE $0x01       // test    bl, 1
	JE   LBB0_493

LBB0_918:
	LONG $0x397d63c4; WORD $0x01e1             // vextracti128    xmm1, ymm12, 1
	LONG $0x7ef9e1c4; BYTE $0xcb               // vmovq    rbx, xmm1
	LONG $0x147943c4; WORD $0x1834; BYTE $0x0a // vpextrb    byte [r8 + rbx], xmm14, 10
	LONG $0x1479e3c4; WORD $0x0bf3             // vpextrb    ebx, xmm6, 11
	WORD $0xc3f6; BYTE $0x01                   // test    bl, 1
	JNE  LBB0_919

LBB0_494:
	LONG $0x1479e3c4; WORD $0x0cf3 // vpextrb    ebx, xmm6, 12
	WORD $0xc3f6; BYTE $0x01       // test    bl, 1
	JE   LBB0_495

LBB0_920:
	LONG $0x7ef961c4; BYTE $0xdb               // vmovq    rbx, xmm11
	LONG $0x147943c4; WORD $0x1834; BYTE $0x0c // vpextrb    byte [r8 + rbx], xmm14, 12
	LONG $0x1479e3c4; WORD $0x0df3             // vpextrb    ebx, xmm6, 13
	WORD $0xc3f6; BYTE $0x01                   // test    bl, 1
	JNE  LBB0_921

LBB0_496:
	LONG $0x1479e3c4; WORD $0x0ef3 // vpextrb    ebx, xmm6, 14
	WORD $0xc3f6; BYTE $0x01       // test    bl, 1
	JE   LBB0_497

LBB0_922:
	LONG $0x397d63c4; WORD $0x01d9             // vextracti128    xmm1, ymm11, 1
	LONG $0x7ef9e1c4; BYTE $0xcb               // vmovq    rbx, xmm1
	LONG $0x147943c4; WORD $0x1834; BYTE $0x0e // vpextrb    byte [r8 + rbx], xmm14, 14
	LONG $0x1479e3c4; WORD $0x0ff3             // vpextrb    ebx, xmm6, 15
	WORD $0xc3f6; BYTE $0x01                   // test    bl, 1
	JNE  LBB0_923

LBB0_498:
	LONG $0x2c2444f6; BYTE $0x01 // test    byte [rsp + 44], 1
	JE   LBB0_499

LBB0_924:
	LONG $0x7ef961c4; BYTE $0xd3               // vmovq    rbx, xmm10
	LONG $0x397d63c4; WORD $0x01f1             // vextracti128    xmm1, ymm14, 1
	LONG $0x1479c3c4; WORD $0x180c; BYTE $0x00 // vpextrb    byte [r8 + rbx], xmm1, 0
	LONG $0x282444f6; BYTE $0x01               // test    byte [rsp + 40], 1
	JNE  LBB0_925

LBB0_500:
	LONG $0x242444f6; BYTE $0x01 // test    byte [rsp + 36], 1
	JE   LBB0_501

LBB0_926:
	LONG $0x397d63c4; WORD $0x01d1             // vextracti128    xmm1, ymm10, 1
	LONG $0x7ef9e1c4; BYTE $0xcb               // vmovq    rbx, xmm1
	LONG $0x397d63c4; WORD $0x01f1             // vextracti128    xmm1, ymm14, 1
	LONG $0x1479c3c4; WORD $0x180c; BYTE $0x02 // vpextrb    byte [r8 + rbx], xmm1, 2
	LONG $0x202444f6; BYTE $0x01               // test    byte [rsp + 32], 1
	JNE  LBB0_927

LBB0_502:
	LONG $0x1c2444f6; BYTE $0x01 // test    byte [rsp + 28], 1
	JE   LBB0_503

LBB0_928:
	LONG $0x7ef961c4; BYTE $0xcb               // vmovq    rbx, xmm9
	LONG $0x397d63c4; WORD $0x01f1             // vextracti128    xmm1, ymm14, 1
	LONG $0x1479c3c4; WORD $0x180c; BYTE $0x04 // vpextrb    byte [r8 + rbx], xmm1, 4
	LONG $0x182444f6; BYTE $0x01               // test    byte [rsp + 24], 1
	JNE  LBB0_929

LBB0_504:
	LONG $0x142444f6; BYTE $0x01 // test    byte [rsp + 20], 1
	JE   LBB0_505

LBB0_930:
	LONG $0x397d63c4; WORD $0x01c9             // vextracti128    xmm1, ymm9, 1
	LONG $0x7ef9e1c4; BYTE $0xcb               // vmovq    rbx, xmm1
	LONG $0x397d63c4; WORD $0x01f1             // vextracti128    xmm1, ymm14, 1
	LONG $0x1479c3c4; WORD $0x180c; BYTE $0x06 // vpextrb    byte [r8 + rbx], xmm1, 6
	LONG $0x01c1f641                           // test    r9b, 1
	JNE  LBB0_931

LBB0_506:
	WORD $0xc2f6; BYTE $0x01 // test    dl, 1
	QUAD $0x00000128249c8b48 // mov    rbx, qword [rsp + 296]
	JE   LBB0_507

LBB0_932:
	LONG $0x7ef961c4; BYTE $0xc2               // vmovq    rdx, xmm8
	LONG $0x397d63c4; WORD $0x01f1             // vextracti128    xmm1, ymm14, 1
	LONG $0x1479c3c4; WORD $0x100c; BYTE $0x08 // vpextrb    byte [r8 + rdx], xmm1, 8
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JNE  LBB0_933

LBB0_508:
	LONG $0x01c6f640         // test    sil, 1
	QUAD $0x0000013024948b48 // mov    rdx, qword [rsp + 304]
	JE   LBB0_509

LBB0_934:
	LONG $0x397d63c4; WORD $0x01c1             // vextracti128    xmm1, ymm8, 1
	LONG $0x7ef9e1c4; BYTE $0xc9               // vmovq    rcx, xmm1
	LONG $0x397d63c4; WORD $0x01f1             // vextracti128    xmm1, ymm14, 1
	LONG $0x1479c3c4; WORD $0x080c; BYTE $0x0a // vpextrb    byte [r8 + rcx], xmm1, 10
	WORD $0x01a8                               // test    al, 1
	QUAD $0x0000009824b48b48                   // mov    rsi, qword [rsp + 152]
	JNE  LBB0_935

LBB0_510:
	LONG $0x01c5f641 // test    r13b, 1
	JE   LBB0_511

LBB0_936:
	LONG $0x7ef9e1c4; BYTE $0xf9               // vmovq    rcx, xmm7
	LONG $0x397d63c4; WORD $0x01f1             // vextracti128    xmm1, ymm14, 1
	LONG $0x1479c3c4; WORD $0x080c; BYTE $0x0c // vpextrb    byte [r8 + rcx], xmm1, 12
	LONG $0x01c2f641                           // test    r10b, 1
	QUAD $0x0000011824ac8b4c                   // mov    r13, qword [rsp + 280]
	JNE  LBB0_937

LBB0_512:
	LONG $0x01c3f641 // test    r11b, 1
	JE   LBB0_513

LBB0_938:
	LONG $0x397de3c4; WORD $0x01f9             // vextracti128    xmm1, ymm7, 1
	LONG $0x7ef9e1c4; BYTE $0xc9               // vmovq    rcx, xmm1
	LONG $0x397d63c4; WORD $0x01f1             // vextracti128    xmm1, ymm14, 1
	LONG $0x1479c3c4; WORD $0x080c; BYTE $0x0e // vpextrb    byte [r8 + rcx], xmm1, 14
	LONG $0x01c6f641                           // test    r14b, 1
	QUAD $0x0000012024848b48                   // mov    rax, qword [rsp + 288]
	QUAD $0x000000e8248c8b4c                   // mov    r9, qword [rsp + 232]
	JNE  LBB0_514
	JMP  LBB0_515

LBB0_483:
	LONG $0x1479e3c4; WORD $0x01f3 // vpextrb    ebx, xmm6, 1
	WORD $0xc3f6; BYTE $0x01       // test    bl, 1
	JE   LBB0_484

LBB0_909:
	LONG $0x16f963c4; WORD $0x01fb             // vpextrq    rbx, xmm15, 1
	LONG $0x147943c4; WORD $0x1834; BYTE $0x01 // vpextrb    byte [r8 + rbx], xmm14, 1
	LONG $0x1479e3c4; WORD $0x02f3             // vpextrb    ebx, xmm6, 2
	WORD $0xc3f6; BYTE $0x01                   // test    bl, 1
	QUAD $0x000000e024bc8b4c                   // mov    r15, qword [rsp + 224]
	JNE  LBB0_910

LBB0_485:
	LONG $0x1479e3c4; WORD $0x03f3 // vpextrb    ebx, xmm6, 3
	WORD $0xc3f6; BYTE $0x01       // test    bl, 1
	JE   LBB0_486

LBB0_911:
	LONG $0x397d63c4; WORD $0x01f9             // vextracti128    xmm1, ymm15, 1
	LONG $0x16f9e3c4; WORD $0x01cb             // vpextrq    rbx, xmm1, 1
	LONG $0x147943c4; WORD $0x1834; BYTE $0x03 // vpextrb    byte [r8 + rbx], xmm14, 3
	LONG $0x1479e3c4; WORD $0x04f3             // vpextrb    ebx, xmm6, 4
	WORD $0xc3f6; BYTE $0x01                   // test    bl, 1
	JNE  LBB0_912

LBB0_487:
	LONG $0x1479e3c4; WORD $0x05f3 // vpextrb    ebx, xmm6, 5
	WORD $0xc3f6; BYTE $0x01       // test    bl, 1
	JE   LBB0_488

LBB0_913:
	LONG $0x16f9e3c4; WORD $0x01eb             // vpextrq    rbx, xmm5, 1
	LONG $0x147943c4; WORD $0x1834; BYTE $0x05 // vpextrb    byte [r8 + rbx], xmm14, 5
	LONG $0x1479e3c4; WORD $0x06f3             // vpextrb    ebx, xmm6, 6
	WORD $0xc3f6; BYTE $0x01                   // test    bl, 1
	JNE  LBB0_914

LBB0_489:
	LONG $0x1479e3c4; WORD $0x07f3 // vpextrb    ebx, xmm6, 7
	WORD $0xc3f6; BYTE $0x01       // test    bl, 1
	JE   LBB0_490

LBB0_915:
	LONG $0x397de3c4; WORD $0x01e9             // vextracti128    xmm1, ymm5, 1
	LONG $0x16f9e3c4; WORD $0x01cb             // vpextrq    rbx, xmm1, 1
	LONG $0x147943c4; WORD $0x1834; BYTE $0x07 // vpextrb    byte [r8 + rbx], xmm14, 7
	LONG $0x1479e3c4; WORD $0x08f3             // vpextrb    ebx, xmm6, 8
	WORD $0xc3f6; BYTE $0x01                   // test    bl, 1
	JNE  LBB0_916

LBB0_491:
	LONG $0x1479e3c4; WORD $0x09f3 // vpextrb    ebx, xmm6, 9
	WORD $0xc3f6; BYTE $0x01       // test    bl, 1
	JE   LBB0_492

LBB0_917:
	LONG $0x16f963c4; WORD $0x01e3             // vpextrq    rbx, xmm12, 1
	LONG $0x147943c4; WORD $0x1834; BYTE $0x09 // vpextrb    byte [r8 + rbx], xmm14, 9
	LONG $0x1479e3c4; WORD $0x0af3             // vpextrb    ebx, xmm6, 10
	WORD $0xc3f6; BYTE $0x01                   // test    bl, 1
	JNE  LBB0_918

LBB0_493:
	LONG $0x1479e3c4; WORD $0x0bf3 // vpextrb    ebx, xmm6, 11
	WORD $0xc3f6; BYTE $0x01       // test    bl, 1
	JE   LBB0_494

LBB0_919:
	LONG $0x397d63c4; WORD $0x01e1             // vextracti128    xmm1, ymm12, 1
	LONG $0x16f9e3c4; WORD $0x01cb             // vpextrq    rbx, xmm1, 1
	LONG $0x147943c4; WORD $0x1834; BYTE $0x0b // vpextrb    byte [r8 + rbx], xmm14, 11
	LONG $0x1479e3c4; WORD $0x0cf3             // vpextrb    ebx, xmm6, 12
	WORD $0xc3f6; BYTE $0x01                   // test    bl, 1
	JNE  LBB0_920

LBB0_495:
	LONG $0x1479e3c4; WORD $0x0df3 // vpextrb    ebx, xmm6, 13
	WORD $0xc3f6; BYTE $0x01       // test    bl, 1
	JE   LBB0_496

LBB0_921:
	LONG $0x16f963c4; WORD $0x01db             // vpextrq    rbx, xmm11, 1
	LONG $0x147943c4; WORD $0x1834; BYTE $0x0d // vpextrb    byte [r8 + rbx], xmm14, 13
	LONG $0x1479e3c4; WORD $0x0ef3             // vpextrb    ebx, xmm6, 14
	WORD $0xc3f6; BYTE $0x01                   // test    bl, 1
	JNE  LBB0_922

LBB0_497:
	LONG $0x1479e3c4; WORD $0x0ff3 // vpextrb    ebx, xmm6, 15
	WORD $0xc3f6; BYTE $0x01       // test    bl, 1
	JE   LBB0_498

LBB0_923:
	LONG $0x397d63c4; WORD $0x01d9             // vextracti128    xmm1, ymm11, 1
	LONG $0x16f9e3c4; WORD $0x01cb             // vpextrq    rbx, xmm1, 1
	LONG $0x147943c4; WORD $0x1834; BYTE $0x0f // vpextrb    byte [r8 + rbx], xmm14, 15
	LONG $0x2c2444f6; BYTE $0x01               // test    byte [rsp + 44], 1
	JNE  LBB0_924

LBB0_499:
	LONG $0x282444f6; BYTE $0x01 // test    byte [rsp + 40], 1
	JE   LBB0_500

LBB0_925:
	LONG $0x16f963c4; WORD $0x01d3             // vpextrq    rbx, xmm10, 1
	LONG $0x397d63c4; WORD $0x01f1             // vextracti128    xmm1, ymm14, 1
	LONG $0x1479c3c4; WORD $0x180c; BYTE $0x01 // vpextrb    byte [r8 + rbx], xmm1, 1
	LONG $0x242444f6; BYTE $0x01               // test    byte [rsp + 36], 1
	JNE  LBB0_926

LBB0_501:
	LONG $0x202444f6; BYTE $0x01 // test    byte [rsp + 32], 1
	JE   LBB0_502

LBB0_927:
	LONG $0x397d63c4; WORD $0x01d1             // vextracti128    xmm1, ymm10, 1
	LONG $0x16f9e3c4; WORD $0x01cb             // vpextrq    rbx, xmm1, 1
	LONG $0x397d63c4; WORD $0x01f1             // vextracti128    xmm1, ymm14, 1
	LONG $0x1479c3c4; WORD $0x180c; BYTE $0x03 // vpextrb    byte [r8 + rbx], xmm1, 3
	LONG $0x1c2444f6; BYTE $0x01               // test    byte [rsp + 28], 1
	JNE  LBB0_928

LBB0_503:
	LONG $0x182444f6; BYTE $0x01 // test    byte [rsp + 24], 1
	JE   LBB0_504

LBB0_929:
	LONG $0x16f963c4; WORD $0x01cb             // vpextrq    rbx, xmm9, 1
	LONG $0x397d63c4; WORD $0x01f1             // vextracti128    xmm1, ymm14, 1
	LONG $0x1479c3c4; WORD $0x180c; BYTE $0x05 // vpextrb    byte [r8 + rbx], xmm1, 5
	LONG $0x142444f6; BYTE $0x01               // test    byte [rsp + 20], 1
	JNE  LBB0_930

LBB0_505:
	LONG $0x01c1f641 // test    r9b, 1
	JE   LBB0_506

LBB0_931:
	LONG $0x397d63c4; WORD $0x01c9             // vextracti128    xmm1, ymm9, 1
	LONG $0x16f9e3c4; WORD $0x01cb             // vpextrq    rbx, xmm1, 1
	LONG $0x397d63c4; WORD $0x01f1             // vextracti128    xmm1, ymm14, 1
	LONG $0x1479c3c4; WORD $0x180c; BYTE $0x07 // vpextrb    byte [r8 + rbx], xmm1, 7
	WORD $0xc2f6; BYTE $0x01                   // test    dl, 1
	QUAD $0x00000128249c8b48                   // mov    rbx, qword [rsp + 296]
	JNE  LBB0_932

LBB0_507:
	WORD $0xc1f6; BYTE $0x01 // test    cl, 1
	JE   LBB0_508

LBB0_933:
	LONG $0x16f963c4; WORD $0x01c1             // vpextrq    rcx, xmm8, 1
	LONG $0x397d63c4; WORD $0x01f1             // vextracti128    xmm1, ymm14, 1
	LONG $0x1479c3c4; WORD $0x080c; BYTE $0x09 // vpextrb    byte [r8 + rcx], xmm1, 9
	LONG $0x01c6f640                           // test    sil, 1
	QUAD $0x0000013024948b48                   // mov    rdx, qword [rsp + 304]
	JNE  LBB0_934

LBB0_509:
	WORD $0x01a8             // test    al, 1
	QUAD $0x0000009824b48b48 // mov    rsi, qword [rsp + 152]
	JE   LBB0_510

LBB0_935:
	LONG $0x397d63c4; WORD $0x01c1             // vextracti128    xmm1, ymm8, 1
	LONG $0x16f9e3c4; WORD $0x01c9             // vpextrq    rcx, xmm1, 1
	LONG $0x397d63c4; WORD $0x01f1             // vextracti128    xmm1, ymm14, 1
	LONG $0x1479c3c4; WORD $0x080c; BYTE $0x0b // vpextrb    byte [r8 + rcx], xmm1, 11
	LONG $0x01c5f641                           // test    r13b, 1
	JNE  LBB0_936

LBB0_511:
	LONG $0x01c2f641         // test    r10b, 1
	QUAD $0x0000011824ac8b4c // mov    r13, qword [rsp + 280]
	JE   LBB0_512

LBB0_937:
	LONG $0x16f9e3c4; WORD $0x01f9             // vpextrq    rcx, xmm7, 1
	LONG $0x397d63c4; WORD $0x01f1             // vextracti128    xmm1, ymm14, 1
	LONG $0x1479c3c4; WORD $0x080c; BYTE $0x0d // vpextrb    byte [r8 + rcx], xmm1, 13
	LONG $0x01c3f641                           // test    r11b, 1
	JNE  LBB0_938

LBB0_513:
	LONG $0x01c6f641         // test    r14b, 1
	QUAD $0x0000012024848b48 // mov    rax, qword [rsp + 288]
	QUAD $0x000000e8248c8b4c // mov    r9, qword [rsp + 232]
	JE   LBB0_515

LBB0_514:
	LONG $0x397de3c4; WORD $0x01f9             // vextracti128    xmm1, ymm7, 1
	LONG $0x16f9e3c4; WORD $0x01c9             // vpextrq    rcx, xmm1, 1
	LONG $0x397d63c4; WORD $0x01f1             // vextracti128    xmm1, ymm14, 1
	LONG $0x1479c3c4; WORD $0x080c; BYTE $0x0f // vpextrb    byte [r8 + rcx], xmm1, 15

LBB0_515:
	QUAD $0x000260248c6ffdc5; BYTE $0x00 // vmovdqa    ymm1, yword [rsp + 608]
	QUAD $0x00020024bceb75c5; BYTE $0x00 // vpor    ymm15, ymm1, yword [rsp + 512]
	QUAD $0x0001e024acebf5c5; BYTE $0x00 // vpor    ymm5, ymm1, yword [rsp + 480]
	QUAD $0x0001802494eb75c5; BYTE $0x00 // vpor    ymm10, ymm1, yword [rsp + 384]
	QUAD $0x000160248ceb75c5; BYTE $0x00 // vpor    ymm9, ymm1, yword [rsp + 352]
	QUAD $0x0001c024a4eb75c5; BYTE $0x00 // vpor    ymm12, ymm1, yword [rsp + 448]
	QUAD $0x0001a0249ceb75c5; BYTE $0x00 // vpor    ymm11, ymm1, yword [rsp + 416]
	QUAD $0x0001402484eb75c5; BYTE $0x00 // vpor    ymm8, ymm1, yword [rsp + 320]
	LONG $0xf9ebddc5                     // vpor    ymm7, ymm4, ymm1
	LONG $0x463de3c4; WORD $0x31cf       // vperm2i128    ymm1, ymm8, ymm7, 49
	LONG $0x383de3c4; WORD $0x01d7       // vinserti128    ymm2, ymm8, xmm7, 1
	LONG $0xc9c6ecc5; BYTE $0x88         // vshufps    ymm1, ymm2, ymm1, 136
	LONG $0x461dc3c4; WORD $0x31d3       // vperm2i128    ymm2, ymm12, ymm11, 49
	LONG $0x381dc3c4; WORD $0x01db       // vinserti128    ymm3, ymm12, xmm11, 1
	LONG $0xd2c6e4c5; BYTE $0x88         // vshufps    ymm2, ymm3, ymm2, 136
	LONG $0x462dc3c4; WORD $0x31d9       // vperm2i128    ymm3, ymm10, ymm9, 49
	LONG $0x382d43c4; WORD $0x01e9       // vinserti128    ymm13, ymm10, xmm9, 1
	LONG $0xdbc694c5; BYTE $0x88         // vshufps    ymm3, ymm13, ymm3, 136
	LONG $0x460563c4; WORD $0x31ed       // vperm2i128    ymm13, ymm15, ymm5, 49
	LONG $0x380563c4; WORD $0x01f5       // vinserti128    ymm14, ymm15, xmm5, 1
	LONG $0xc60c41c4; WORD $0x88ed       // vshufps    ymm13, ymm14, ymm13, 136
	LONG $0x667d41c4; BYTE $0xed         // vpcmpgtd    ymm13, ymm0, ymm13
	LONG $0xdb66fdc5                     // vpcmpgtd    ymm3, ymm0, ymm3
	LONG $0xdb6b95c5                     // vpackssdw    ymm3, ymm13, ymm3
	LONG $0xd266fdc5                     // vpcmpgtd    ymm2, ymm0, ymm2
	LONG $0xc966fdc5                     // vpcmpgtd    ymm1, ymm0, ymm1
	LONG $0xc96bedc5                     // vpackssdw    ymm1, ymm2, ymm1
	LONG $0x00fde3c4; WORD $0xd8d3       // vpermq    ymm2, ymm3, 216
	LONG $0x00fde3c4; WORD $0xd8c9       // vpermq    ymm1, ymm1, 216
	LONG $0xc963edc5                     // vpacksswb    ymm1, ymm2, ymm1
	LONG $0xf6dbf5c5                     // vpand    ymm6, ymm1, ymm6
	LONG $0xf17ef9c5                     // vmovd    ecx, xmm6
	WORD $0xc1f6; BYTE $0x01             // test    cl, 1
	JE   LBB0_516
	LONG $0x787d62c4; WORD $0x1734       // vpbroadcastb    ymm14, byte [rdi + rdx]
	LONG $0x1479e3c4; WORD $0x01f1       // vpextrb    ecx, xmm6, 1
	WORD $0xc1f6; BYTE $0x01             // test    cl, 1
	JNE  LBB0_940

LBB0_517:
	LONG $0x24548b48; BYTE $0x68   // mov    rdx, qword [rsp + 104]
	LONG $0x1479e3c4; WORD $0x02f1 // vpextrb    ecx, xmm6, 2
	WORD $0xc1f6; BYTE $0x01       // test    cl, 1
	JE   LBB0_519

LBB0_518:
	LONG $0x2009e3c4; WORD $0x1f0c; BYTE $0x02 // vpinsrb    xmm1, xmm14, byte [rdi + rbx], 2
	LONG $0x020d63c4; WORD $0x0ff1             // vpblendd    ymm14, ymm14, ymm1, 15

LBB0_519:
	LONG $0x24748b48; BYTE $0x60               // mov    rsi, qword [rsp + 96]
	LONG $0x24548b4c; BYTE $0x48               // mov    r10, qword [rsp + 72]
	LONG $0x1479e3c4; WORD $0x03f1             // vpextrb    ecx, xmm6, 3
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JE   LBB0_520
	QUAD $0x00000110248c8b48                   // mov    rcx, qword [rsp + 272]
	LONG $0x2009e3c4; WORD $0x0f0c; BYTE $0x03 // vpinsrb    xmm1, xmm14, byte [rdi + rcx], 3
	LONG $0x020d63c4; WORD $0x0ff1             // vpblendd    ymm14, ymm14, ymm1, 15
	LONG $0x1479e3c4; WORD $0x04f1             // vpextrb    ecx, xmm6, 4
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JNE  LBB0_942

LBB0_521:
	LONG $0x1479e3c4; WORD $0x05f1 // vpextrb    ecx, xmm6, 5
	WORD $0xc1f6; BYTE $0x01       // test    cl, 1
	JE   LBB0_522

LBB0_943:
	LONG $0x2009e3c4; WORD $0x170c; BYTE $0x05 // vpinsrb    xmm1, xmm14, byte [rdi + rdx], 5
	LONG $0x020d63c4; WORD $0x0ff1             // vpblendd    ymm14, ymm14, ymm1, 15
	LONG $0x1479e3c4; WORD $0x06f1             // vpextrb    ecx, xmm6, 6
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JNE  LBB0_944

LBB0_523:
	LONG $0x1479e3c4; WORD $0x07f1 // vpextrb    ecx, xmm6, 7
	WORD $0xc1f6; BYTE $0x01       // test    cl, 1
	JE   LBB0_524

LBB0_945:
	LONG $0x2009a3c4; WORD $0x0f0c; BYTE $0x07 // vpinsrb    xmm1, xmm14, byte [rdi + r9], 7
	LONG $0x020d63c4; WORD $0x0ff1             // vpblendd    ymm14, ymm14, ymm1, 15
	LONG $0x1479e3c4; WORD $0x08f1             // vpextrb    ecx, xmm6, 8
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JNE  LBB0_946

LBB0_525:
	LONG $0x24548b48; BYTE $0x58   // mov    rdx, qword [rsp + 88]
	LONG $0x1479e3c4; WORD $0x09f1 // vpextrb    ecx, xmm6, 9
	WORD $0xc1f6; BYTE $0x01       // test    cl, 1
	JE   LBB0_527

LBB0_526:
	LONG $0x2009a3c4; WORD $0x3f0c; BYTE $0x09 // vpinsrb    xmm1, xmm14, byte [rdi + r15], 9
	LONG $0x020d63c4; WORD $0x0ff1             // vpblendd    ymm14, ymm14, ymm1, 15

LBB0_527:
	QUAD $0x0000009024848b48                   // mov    rax, qword [rsp + 144]
	QUAD $0x0000008824b48b48                   // mov    rsi, qword [rsp + 136]
	QUAD $0x00000080249c8b48                   // mov    rbx, qword [rsp + 128]
	LONG $0x244c8b4c; BYTE $0x78               // mov    r9, qword [rsp + 120]
	LONG $0x1479e3c4; WORD $0x0af1             // vpextrb    ecx, xmm6, 10
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JE   LBB0_528
	LONG $0x2009e3c4; WORD $0x070c; BYTE $0x0a // vpinsrb    xmm1, xmm14, byte [rdi + rax], 10
	LONG $0x020d63c4; WORD $0x0ff1             // vpblendd    ymm14, ymm14, ymm1, 15
	LONG $0x1479e3c4; WORD $0x0bf1             // vpextrb    ecx, xmm6, 11
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JNE  LBB0_948

LBB0_529:
	LONG $0x1479e3c4; WORD $0x0cf1 // vpextrb    ecx, xmm6, 12
	WORD $0xc1f6; BYTE $0x01       // test    cl, 1
	JE   LBB0_530

LBB0_949:
	QUAD $0x000000f824848b48                   // mov    rax, qword [rsp + 248]
	LONG $0x2009e3c4; WORD $0x070c; BYTE $0x0c // vpinsrb    xmm1, xmm14, byte [rdi + rax], 12
	LONG $0x020d63c4; WORD $0x0ff1             // vpblendd    ymm14, ymm14, ymm1, 15
	LONG $0x1479e3c4; WORD $0x0df1             // vpextrb    ecx, xmm6, 13
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JNE  LBB0_531
	JMP  LBB0_532

LBB0_516:
	LONG $0x1479e3c4; WORD $0x01f1 // vpextrb    ecx, xmm6, 1
	WORD $0xc1f6; BYTE $0x01       // test    cl, 1
	JE   LBB0_517

LBB0_940:
	LONG $0x2009e3c4; WORD $0x370c; BYTE $0x01 // vpinsrb    xmm1, xmm14, byte [rdi + rsi], 1
	LONG $0x020d63c4; WORD $0x0ff1             // vpblendd    ymm14, ymm14, ymm1, 15
	LONG $0x24548b48; BYTE $0x68               // mov    rdx, qword [rsp + 104]
	LONG $0x1479e3c4; WORD $0x02f1             // vpextrb    ecx, xmm6, 2
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JNE  LBB0_518
	JMP  LBB0_519

LBB0_520:
	LONG $0x1479e3c4; WORD $0x04f1 // vpextrb    ecx, xmm6, 4
	WORD $0xc1f6; BYTE $0x01       // test    cl, 1
	JE   LBB0_521

LBB0_942:
	QUAD $0x00000108248c8b48                   // mov    rcx, qword [rsp + 264]
	LONG $0x2009e3c4; WORD $0x0f0c; BYTE $0x04 // vpinsrb    xmm1, xmm14, byte [rdi + rcx], 4
	LONG $0x020d63c4; WORD $0x0ff1             // vpblendd    ymm14, ymm14, ymm1, 15
	LONG $0x1479e3c4; WORD $0x05f1             // vpextrb    ecx, xmm6, 5
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JNE  LBB0_943

LBB0_522:
	LONG $0x1479e3c4; WORD $0x06f1 // vpextrb    ecx, xmm6, 6
	WORD $0xc1f6; BYTE $0x01       // test    cl, 1
	JE   LBB0_523

LBB0_944:
	LONG $0x2009e3c4; WORD $0x070c; BYTE $0x06 // vpinsrb    xmm1, xmm14, byte [rdi + rax], 6
	LONG $0x020d63c4; WORD $0x0ff1             // vpblendd    ymm14, ymm14, ymm1, 15
	LONG $0x1479e3c4; WORD $0x07f1             // vpextrb    ecx, xmm6, 7
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JNE  LBB0_945

LBB0_524:
	LONG $0x1479e3c4; WORD $0x08f1 // vpextrb    ecx, xmm6, 8
	WORD $0xc1f6; BYTE $0x01       // test    cl, 1
	JE   LBB0_525

LBB0_946:
	LONG $0x2009e3c4; WORD $0x370c; BYTE $0x08 // vpinsrb    xmm1, xmm14, byte [rdi + rsi], 8
	LONG $0x020d63c4; WORD $0x0ff1             // vpblendd    ymm14, ymm14, ymm1, 15
	LONG $0x24548b48; BYTE $0x58               // mov    rdx, qword [rsp + 88]
	LONG $0x1479e3c4; WORD $0x09f1             // vpextrb    ecx, xmm6, 9
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JNE  LBB0_526
	JMP  LBB0_527

LBB0_528:
	LONG $0x1479e3c4; WORD $0x0bf1 // vpextrb    ecx, xmm6, 11
	WORD $0xc1f6; BYTE $0x01       // test    cl, 1
	JE   LBB0_529

LBB0_948:
	QUAD $0x0000010024848b48                   // mov    rax, qword [rsp + 256]
	LONG $0x2009e3c4; WORD $0x070c; BYTE $0x0b // vpinsrb    xmm1, xmm14, byte [rdi + rax], 11
	LONG $0x020d63c4; WORD $0x0ff1             // vpblendd    ymm14, ymm14, ymm1, 15
	LONG $0x1479e3c4; WORD $0x0cf1             // vpextrb    ecx, xmm6, 12
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JNE  LBB0_949

LBB0_530:
	LONG $0x1479e3c4; WORD $0x0df1 // vpextrb    ecx, xmm6, 13
	WORD $0xc1f6; BYTE $0x01       // test    cl, 1
	JE   LBB0_532

LBB0_531:
	LONG $0x2009e3c4; WORD $0x170c; BYTE $0x0d // vpinsrb    xmm1, xmm14, byte [rdi + rdx], 13
	LONG $0x020d63c4; WORD $0x0ff1             // vpblendd    ymm14, ymm14, ymm1, 15

LBB0_532:
	LONG $0x24448b48; BYTE $0x50               // mov    rax, qword [rsp + 80]
	LONG $0x24548b48; BYTE $0x40               // mov    rdx, qword [rsp + 64]
	LONG $0x1479e3c4; WORD $0x0ef1             // vpextrb    ecx, xmm6, 14
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JE   LBB0_534
	LONG $0x2009e3c4; WORD $0x070c; BYTE $0x0e // vpinsrb    xmm1, xmm14, byte [rdi + rax], 14
	LONG $0x020d63c4; WORD $0x0ff1             // vpblendd    ymm14, ymm14, ymm1, 15

LBB0_534:
	LONG $0x1479e3c4; WORD $0x0ff1             // vpextrb    ecx, xmm6, 15
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JE   LBB0_536
	LONG $0x2009a3c4; WORD $0x170c; BYTE $0x0f // vpinsrb    xmm1, xmm14, byte [rdi + r10], 15
	LONG $0x020d63c4; WORD $0x0ff1             // vpblendd    ymm14, ymm14, ymm1, 15

LBB0_536:
	LONG $0x397de3c4; WORD $0x01f1             // vextracti128    xmm1, ymm6, 1
	LONG $0xc87ef9c5                           // vmovd    eax, xmm1
	LONG $0x2c244489                           // mov    dword [rsp + 44], eax
	WORD $0x01a8                               // test    al, 1
	JE   LBB0_538
	LONG $0x397d63c4; WORD $0x01f2             // vextracti128    xmm2, ymm14, 1
	LONG $0x2069e3c4; WORD $0x1714; BYTE $0x00 // vpinsrb    xmm2, xmm2, byte [rdi + rdx], 0
	LONG $0x380d63c4; WORD $0x01f2             // vinserti128    ymm14, ymm14, xmm2, 1

LBB0_538:
	LONG $0x24448b48; BYTE $0x38               // mov    rax, qword [rsp + 56]
	LONG $0x1479e3c4; WORD $0x01c9             // vpextrb    ecx, xmm1, 1
	LONG $0x28244c89                           // mov    dword [rsp + 40], ecx
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JE   LBB0_539
	LONG $0x397d63c4; WORD $0x01f2             // vextracti128    xmm2, ymm14, 1
	LONG $0x2069e3c4; WORD $0x3714; BYTE $0x01 // vpinsrb    xmm2, xmm2, byte [rdi + rsi], 1
	LONG $0x380d63c4; WORD $0x01f2             // vinserti128    ymm14, ymm14, xmm2, 1
	LONG $0x1479e3c4; WORD $0x02c9             // vpextrb    ecx, xmm1, 2
	LONG $0x24244c89                           // mov    dword [rsp + 36], ecx
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JNE  LBB0_951

LBB0_540:
	LONG $0x1479e3c4; WORD $0x03c9 // vpextrb    ecx, xmm1, 3
	LONG $0x20244c89               // mov    dword [rsp + 32], ecx
	WORD $0xc1f6; BYTE $0x01       // test    cl, 1
	JE   LBB0_541

LBB0_952:
	LONG $0x397d63c4; WORD $0x01f2             // vextracti128    xmm2, ymm14, 1
	LONG $0x2069a3c4; WORD $0x0f14; BYTE $0x03 // vpinsrb    xmm2, xmm2, byte [rdi + r9], 3
	LONG $0x380d63c4; WORD $0x01f2             // vinserti128    ymm14, ymm14, xmm2, 1
	LONG $0x1479e3c4; WORD $0x04c9             // vpextrb    ecx, xmm1, 4
	LONG $0x1c244c89                           // mov    dword [rsp + 28], ecx
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JNE  LBB0_953

LBB0_542:
	LONG $0x1479e3c4; WORD $0x05c8 // vpextrb    eax, xmm1, 5
	LONG $0x18244489               // mov    dword [rsp + 24], eax
	WORD $0x01a8                   // test    al, 1
	JE   LBB0_544

LBB0_543:
	LONG $0x397d63c4; WORD $0x01f2             // vextracti128    xmm2, ymm14, 1
	LONG $0x2069a3c4; WORD $0x2f14; BYTE $0x05 // vpinsrb    xmm2, xmm2, byte [rdi + r13], 5
	LONG $0x380d63c4; WORD $0x01f2             // vinserti128    ymm14, ymm14, xmm2, 1

LBB0_544:
	LONG $0x24448b48; BYTE $0x70               // mov    rax, qword [rsp + 112]
	LONG $0x1479e3c4; WORD $0x06c9             // vpextrb    ecx, xmm1, 6
	LONG $0x14244c89                           // mov    dword [rsp + 20], ecx
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JE   LBB0_545
	LONG $0x397d63c4; WORD $0x01f2             // vextracti128    xmm2, ymm14, 1
	LONG $0x2069e3c4; WORD $0x0714; BYTE $0x06 // vpinsrb    xmm2, xmm2, byte [rdi + rax], 6
	LONG $0x380d63c4; WORD $0x01f2             // vinserti128    ymm14, ymm14, xmm2, 1
	LONG $0x1479c3c4; WORD $0x07c9             // vpextrb    r9d, xmm1, 7
	LONG $0x01c1f641                           // test    r9b, 1
	JNE  LBB0_955

LBB0_546:
	LONG $0x1479e3c4; WORD $0x08ca // vpextrb    edx, xmm1, 8
	WORD $0xc2f6; BYTE $0x01       // test    dl, 1
	JE   LBB0_547

LBB0_956:
	LONG $0x397d63c4; WORD $0x01f2             // vextracti128    xmm2, ymm14, 1
	QUAD $0x000000d824848b48                   // mov    rax, qword [rsp + 216]
	LONG $0x2069e3c4; WORD $0x0714; BYTE $0x08 // vpinsrb    xmm2, xmm2, byte [rdi + rax], 8
	LONG $0x380d63c4; WORD $0x01f2             // vinserti128    ymm14, ymm14, xmm2, 1
	LONG $0x1479e3c4; WORD $0x09c9             // vpextrb    ecx, xmm1, 9
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JNE  LBB0_957

LBB0_548:
	LONG $0x1479e3c4; WORD $0x0ace // vpextrb    esi, xmm1, 10
	LONG $0x01c6f640               // test    sil, 1
	JE   LBB0_549

LBB0_958:
	LONG $0x397d63c4; WORD $0x01f2             // vextracti128    xmm2, ymm14, 1
	QUAD $0x000000c824848b48                   // mov    rax, qword [rsp + 200]
	LONG $0x2069e3c4; WORD $0x0714; BYTE $0x0a // vpinsrb    xmm2, xmm2, byte [rdi + rax], 10
	LONG $0x380d63c4; WORD $0x01f2             // vinserti128    ymm14, ymm14, xmm2, 1
	LONG $0x1479e3c4; WORD $0x0bc8             // vpextrb    eax, xmm1, 11
	WORD $0x01a8                               // test    al, 1
	JNE  LBB0_959

LBB0_550:
	LONG $0x1479c3c4; WORD $0x0ccd // vpextrb    r13d, xmm1, 12
	LONG $0x01c5f641               // test    r13b, 1
	JE   LBB0_551

LBB0_960:
	LONG $0x397d63c4; WORD $0x01f2             // vextracti128    xmm2, ymm14, 1
	QUAD $0x000000b8249c8b48                   // mov    rbx, qword [rsp + 184]
	LONG $0x2069e3c4; WORD $0x1f14; BYTE $0x0c // vpinsrb    xmm2, xmm2, byte [rdi + rbx], 12
	LONG $0x380d63c4; WORD $0x01f2             // vinserti128    ymm14, ymm14, xmm2, 1
	LONG $0x1479c3c4; WORD $0x0dca             // vpextrb    r10d, xmm1, 13
	LONG $0x01c2f641                           // test    r10b, 1
	JNE  LBB0_961

LBB0_552:
	LONG $0x1479c3c4; WORD $0x0ecb // vpextrb    r11d, xmm1, 14
	LONG $0x01c3f641               // test    r11b, 1
	JE   LBB0_553

LBB0_962:
	LONG $0x397d63c4; WORD $0x01f2             // vextracti128    xmm2, ymm14, 1
	QUAD $0x000000a8249c8b48                   // mov    rbx, qword [rsp + 168]
	LONG $0x2069e3c4; WORD $0x1f14; BYTE $0x0e // vpinsrb    xmm2, xmm2, byte [rdi + rbx], 14
	LONG $0x380d63c4; WORD $0x01f2             // vinserti128    ymm14, ymm14, xmm2, 1
	LONG $0x1479c3c4; WORD $0x0fce             // vpextrb    r14d, xmm1, 15
	LONG $0x01c6f641                           // test    r14b, 1
	JNE  LBB0_554
	JMP  LBB0_555

LBB0_539:
	LONG $0x1479e3c4; WORD $0x02c9 // vpextrb    ecx, xmm1, 2
	LONG $0x24244c89               // mov    dword [rsp + 36], ecx
	WORD $0xc1f6; BYTE $0x01       // test    cl, 1
	JE   LBB0_540

LBB0_951:
	LONG $0x397d63c4; WORD $0x01f2             // vextracti128    xmm2, ymm14, 1
	LONG $0x2069e3c4; WORD $0x1f14; BYTE $0x02 // vpinsrb    xmm2, xmm2, byte [rdi + rbx], 2
	LONG $0x380d63c4; WORD $0x01f2             // vinserti128    ymm14, ymm14, xmm2, 1
	LONG $0x1479e3c4; WORD $0x03c9             // vpextrb    ecx, xmm1, 3
	LONG $0x20244c89                           // mov    dword [rsp + 32], ecx
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JNE  LBB0_952

LBB0_541:
	LONG $0x1479e3c4; WORD $0x04c9 // vpextrb    ecx, xmm1, 4
	LONG $0x1c244c89               // mov    dword [rsp + 28], ecx
	WORD $0xc1f6; BYTE $0x01       // test    cl, 1
	JE   LBB0_542

LBB0_953:
	LONG $0x397d63c4; WORD $0x01f2             // vextracti128    xmm2, ymm14, 1
	LONG $0x2069e3c4; WORD $0x0714; BYTE $0x04 // vpinsrb    xmm2, xmm2, byte [rdi + rax], 4
	LONG $0x380d63c4; WORD $0x01f2             // vinserti128    ymm14, ymm14, xmm2, 1
	LONG $0x1479e3c4; WORD $0x05c8             // vpextrb    eax, xmm1, 5
	LONG $0x18244489                           // mov    dword [rsp + 24], eax
	WORD $0x01a8                               // test    al, 1
	JNE  LBB0_543
	JMP  LBB0_544

LBB0_545:
	LONG $0x1479c3c4; WORD $0x07c9 // vpextrb    r9d, xmm1, 7
	LONG $0x01c1f641               // test    r9b, 1
	JE   LBB0_546

LBB0_955:
	LONG $0x397d63c4; WORD $0x01f2             // vextracti128    xmm2, ymm14, 1
	QUAD $0x000000f024848b48                   // mov    rax, qword [rsp + 240]
	LONG $0x2069e3c4; WORD $0x0714; BYTE $0x07 // vpinsrb    xmm2, xmm2, byte [rdi + rax], 7
	LONG $0x380d63c4; WORD $0x01f2             // vinserti128    ymm14, ymm14, xmm2, 1
	LONG $0x1479e3c4; WORD $0x08ca             // vpextrb    edx, xmm1, 8
	WORD $0xc2f6; BYTE $0x01                   // test    dl, 1
	JNE  LBB0_956

LBB0_547:
	LONG $0x1479e3c4; WORD $0x09c9 // vpextrb    ecx, xmm1, 9
	WORD $0xc1f6; BYTE $0x01       // test    cl, 1
	JE   LBB0_548

LBB0_957:
	LONG $0x397d63c4; WORD $0x01f2             // vextracti128    xmm2, ymm14, 1
	QUAD $0x000000d024848b48                   // mov    rax, qword [rsp + 208]
	LONG $0x2069e3c4; WORD $0x0714; BYTE $0x09 // vpinsrb    xmm2, xmm2, byte [rdi + rax], 9
	LONG $0x380d63c4; WORD $0x01f2             // vinserti128    ymm14, ymm14, xmm2, 1
	LONG $0x1479e3c4; WORD $0x0ace             // vpextrb    esi, xmm1, 10
	LONG $0x01c6f640                           // test    sil, 1
	JNE  LBB0_958

LBB0_549:
	LONG $0x1479e3c4; WORD $0x0bc8 // vpextrb    eax, xmm1, 11
	WORD $0x01a8                   // test    al, 1
	JE   LBB0_550

LBB0_959:
	LONG $0x397d63c4; WORD $0x01f2             // vextracti128    xmm2, ymm14, 1
	QUAD $0x000000c0249c8b48                   // mov    rbx, qword [rsp + 192]
	LONG $0x2069e3c4; WORD $0x1f14; BYTE $0x0b // vpinsrb    xmm2, xmm2, byte [rdi + rbx], 11
	LONG $0x380d63c4; WORD $0x01f2             // vinserti128    ymm14, ymm14, xmm2, 1
	LONG $0x1479c3c4; WORD $0x0ccd             // vpextrb    r13d, xmm1, 12
	LONG $0x01c5f641                           // test    r13b, 1
	JNE  LBB0_960

LBB0_551:
	LONG $0x1479c3c4; WORD $0x0dca // vpextrb    r10d, xmm1, 13
	LONG $0x01c2f641               // test    r10b, 1
	JE   LBB0_552

LBB0_961:
	LONG $0x397d63c4; WORD $0x01f2             // vextracti128    xmm2, ymm14, 1
	QUAD $0x000000b0249c8b48                   // mov    rbx, qword [rsp + 176]
	LONG $0x2069e3c4; WORD $0x1f14; BYTE $0x0d // vpinsrb    xmm2, xmm2, byte [rdi + rbx], 13
	LONG $0x380d63c4; WORD $0x01f2             // vinserti128    ymm14, ymm14, xmm2, 1
	LONG $0x1479c3c4; WORD $0x0ecb             // vpextrb    r11d, xmm1, 14
	LONG $0x01c3f641                           // test    r11b, 1
	JNE  LBB0_962

LBB0_553:
	LONG $0x1479c3c4; WORD $0x0fce // vpextrb    r14d, xmm1, 15
	LONG $0x01c6f641               // test    r14b, 1
	JE   LBB0_555

LBB0_554:
	LONG $0x397d63c4; WORD $0x01f1             // vextracti128    xmm1, ymm14, 1
	QUAD $0x000000a0249c8b48                   // mov    rbx, qword [rsp + 160]
	LONG $0x2071e3c4; WORD $0x1f0c; BYTE $0x0f // vpinsrb    xmm1, xmm1, byte [rdi + rbx], 15
	LONG $0x380d63c4; WORD $0x01f1             // vinserti128    ymm14, ymm14, xmm1, 1

LBB0_555:
	LONG $0x7175c1c4; WORD $0x06d6             // vpsrlw    ymm1, ymm14, 6
	QUAD $0x00000080b5db75c5                   // vpand    ymm14, ymm1, yword 128[rbp] /* [rip + .LCPI0_4] */
	LONG $0x7e79c1c4; BYTE $0xf7               // vmovd    r15d, xmm6
	LONG $0x01c7f641                           // test    r15b, 1
	JE   LBB0_556
	LONG $0x7ef961c4; BYTE $0xfb               // vmovq    rbx, xmm15
	LONG $0x147943c4; WORD $0x1834; BYTE $0x00 // vpextrb    byte [r8 + rbx], xmm14, 0
	LONG $0x1479e3c4; WORD $0x01f3             // vpextrb    ebx, xmm6, 1
	WORD $0xc3f6; BYTE $0x01                   // test    bl, 1
	JNE  LBB0_964

LBB0_557:
	LONG $0x1479e3c4; WORD $0x02f3 // vpextrb    ebx, xmm6, 2
	WORD $0xc3f6; BYTE $0x01       // test    bl, 1
	QUAD $0x000000e024bc8b4c       // mov    r15, qword [rsp + 224]
	JE   LBB0_558

LBB0_965:
	LONG $0x397d63c4; WORD $0x01f9             // vextracti128    xmm1, ymm15, 1
	LONG $0x7ef9e1c4; BYTE $0xcb               // vmovq    rbx, xmm1
	LONG $0x147943c4; WORD $0x1834; BYTE $0x02 // vpextrb    byte [r8 + rbx], xmm14, 2
	LONG $0x1479e3c4; WORD $0x03f3             // vpextrb    ebx, xmm6, 3
	WORD $0xc3f6; BYTE $0x01                   // test    bl, 1
	JNE  LBB0_966

LBB0_559:
	LONG $0x1479e3c4; WORD $0x04f3 // vpextrb    ebx, xmm6, 4
	WORD $0xc3f6; BYTE $0x01       // test    bl, 1
	JE   LBB0_560

LBB0_967:
	LONG $0x7ef9e1c4; BYTE $0xeb               // vmovq    rbx, xmm5
	LONG $0x147943c4; WORD $0x1834; BYTE $0x04 // vpextrb    byte [r8 + rbx], xmm14, 4
	LONG $0x1479e3c4; WORD $0x05f3             // vpextrb    ebx, xmm6, 5
	WORD $0xc3f6; BYTE $0x01                   // test    bl, 1
	JNE  LBB0_968

LBB0_561:
	LONG $0x1479e3c4; WORD $0x06f3 // vpextrb    ebx, xmm6, 6
	WORD $0xc3f6; BYTE $0x01       // test    bl, 1
	JE   LBB0_562

LBB0_969:
	LONG $0x397de3c4; WORD $0x01e9             // vextracti128    xmm1, ymm5, 1
	LONG $0x7ef9e1c4; BYTE $0xcb               // vmovq    rbx, xmm1
	LONG $0x147943c4; WORD $0x1834; BYTE $0x06 // vpextrb    byte [r8 + rbx], xmm14, 6
	LONG $0x1479e3c4; WORD $0x07f3             // vpextrb    ebx, xmm6, 7
	WORD $0xc3f6; BYTE $0x01                   // test    bl, 1
	JNE  LBB0_970

LBB0_563:
	LONG $0x1479e3c4; WORD $0x08f3 // vpextrb    ebx, xmm6, 8
	WORD $0xc3f6; BYTE $0x01       // test    bl, 1
	JE   LBB0_564

LBB0_971:
	LONG $0x7ef961c4; BYTE $0xe3               // vmovq    rbx, xmm12
	LONG $0x147943c4; WORD $0x1834; BYTE $0x08 // vpextrb    byte [r8 + rbx], xmm14, 8
	LONG $0x1479e3c4; WORD $0x09f3             // vpextrb    ebx, xmm6, 9
	WORD $0xc3f6; BYTE $0x01                   // test    bl, 1
	JNE  LBB0_972

LBB0_565:
	LONG $0x1479e3c4; WORD $0x0af3 // vpextrb    ebx, xmm6, 10
	WORD $0xc3f6; BYTE $0x01       // test    bl, 1
	JE   LBB0_566

LBB0_973:
	LONG $0x397d63c4; WORD $0x01e1             // vextracti128    xmm1, ymm12, 1
	LONG $0x7ef9e1c4; BYTE $0xcb               // vmovq    rbx, xmm1
	LONG $0x147943c4; WORD $0x1834; BYTE $0x0a // vpextrb    byte [r8 + rbx], xmm14, 10
	LONG $0x1479e3c4; WORD $0x0bf3             // vpextrb    ebx, xmm6, 11
	WORD $0xc3f6; BYTE $0x01                   // test    bl, 1
	JNE  LBB0_974

LBB0_567:
	LONG $0x1479e3c4; WORD $0x0cf3 // vpextrb    ebx, xmm6, 12
	WORD $0xc3f6; BYTE $0x01       // test    bl, 1
	JE   LBB0_568

LBB0_975:
	LONG $0x7ef961c4; BYTE $0xdb               // vmovq    rbx, xmm11
	LONG $0x147943c4; WORD $0x1834; BYTE $0x0c // vpextrb    byte [r8 + rbx], xmm14, 12
	LONG $0x1479e3c4; WORD $0x0df3             // vpextrb    ebx, xmm6, 13
	WORD $0xc3f6; BYTE $0x01                   // test    bl, 1
	JNE  LBB0_976

LBB0_569:
	LONG $0x1479e3c4; WORD $0x0ef3 // vpextrb    ebx, xmm6, 14
	WORD $0xc3f6; BYTE $0x01       // test    bl, 1
	JE   LBB0_570

LBB0_977:
	LONG $0x397d63c4; WORD $0x01d9             // vextracti128    xmm1, ymm11, 1
	LONG $0x7ef9e1c4; BYTE $0xcb               // vmovq    rbx, xmm1
	LONG $0x147943c4; WORD $0x1834; BYTE $0x0e // vpextrb    byte [r8 + rbx], xmm14, 14
	LONG $0x1479e3c4; WORD $0x0ff3             // vpextrb    ebx, xmm6, 15
	WORD $0xc3f6; BYTE $0x01                   // test    bl, 1
	JNE  LBB0_978

LBB0_571:
	LONG $0x2c2444f6; BYTE $0x01 // test    byte [rsp + 44], 1
	JE   LBB0_572

LBB0_979:
	LONG $0x7ef961c4; BYTE $0xd3               // vmovq    rbx, xmm10
	LONG $0x397d63c4; WORD $0x01f1             // vextracti128    xmm1, ymm14, 1
	LONG $0x1479c3c4; WORD $0x180c; BYTE $0x00 // vpextrb    byte [r8 + rbx], xmm1, 0
	LONG $0x282444f6; BYTE $0x01               // test    byte [rsp + 40], 1
	JNE  LBB0_980

LBB0_573:
	LONG $0x242444f6; BYTE $0x01 // test    byte [rsp + 36], 1
	JE   LBB0_574

LBB0_981:
	LONG $0x397d63c4; WORD $0x01d1             // vextracti128    xmm1, ymm10, 1
	LONG $0x7ef9e1c4; BYTE $0xcb               // vmovq    rbx, xmm1
	LONG $0x397d63c4; WORD $0x01f1             // vextracti128    xmm1, ymm14, 1
	LONG $0x1479c3c4; WORD $0x180c; BYTE $0x02 // vpextrb    byte [r8 + rbx], xmm1, 2
	LONG $0x202444f6; BYTE $0x01               // test    byte [rsp + 32], 1
	JNE  LBB0_982

LBB0_575:
	LONG $0x1c2444f6; BYTE $0x01 // test    byte [rsp + 28], 1
	JE   LBB0_576

LBB0_983:
	LONG $0x7ef961c4; BYTE $0xcb               // vmovq    rbx, xmm9
	LONG $0x397d63c4; WORD $0x01f1             // vextracti128    xmm1, ymm14, 1
	LONG $0x1479c3c4; WORD $0x180c; BYTE $0x04 // vpextrb    byte [r8 + rbx], xmm1, 4
	LONG $0x182444f6; BYTE $0x01               // test    byte [rsp + 24], 1
	JNE  LBB0_984

LBB0_577:
	LONG $0x142444f6; BYTE $0x01 // test    byte [rsp + 20], 1
	JE   LBB0_578

LBB0_985:
	LONG $0x397d63c4; WORD $0x01c9             // vextracti128    xmm1, ymm9, 1
	LONG $0x7ef9e1c4; BYTE $0xcb               // vmovq    rbx, xmm1
	LONG $0x397d63c4; WORD $0x01f1             // vextracti128    xmm1, ymm14, 1
	LONG $0x1479c3c4; WORD $0x180c; BYTE $0x06 // vpextrb    byte [r8 + rbx], xmm1, 6
	LONG $0x01c1f641                           // test    r9b, 1
	JNE  LBB0_986

LBB0_579:
	WORD $0xc2f6; BYTE $0x01 // test    dl, 1
	QUAD $0x00000128249c8b48 // mov    rbx, qword [rsp + 296]
	JE   LBB0_580

LBB0_987:
	LONG $0x7ef961c4; BYTE $0xc2               // vmovq    rdx, xmm8
	LONG $0x397d63c4; WORD $0x01f1             // vextracti128    xmm1, ymm14, 1
	LONG $0x1479c3c4; WORD $0x100c; BYTE $0x08 // vpextrb    byte [r8 + rdx], xmm1, 8
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JNE  LBB0_988

LBB0_581:
	LONG $0x01c6f640         // test    sil, 1
	QUAD $0x0000013024948b48 // mov    rdx, qword [rsp + 304]
	JE   LBB0_582

LBB0_989:
	LONG $0x397d63c4; WORD $0x01c1             // vextracti128    xmm1, ymm8, 1
	LONG $0x7ef9e1c4; BYTE $0xc9               // vmovq    rcx, xmm1
	LONG $0x397d63c4; WORD $0x01f1             // vextracti128    xmm1, ymm14, 1
	LONG $0x1479c3c4; WORD $0x080c; BYTE $0x0a // vpextrb    byte [r8 + rcx], xmm1, 10
	WORD $0x01a8                               // test    al, 1
	QUAD $0x0000009824b48b48                   // mov    rsi, qword [rsp + 152]
	JNE  LBB0_990

LBB0_583:
	LONG $0x01c5f641 // test    r13b, 1
	JE   LBB0_584

LBB0_991:
	LONG $0x7ef9e1c4; BYTE $0xf9               // vmovq    rcx, xmm7
	LONG $0x397d63c4; WORD $0x01f1             // vextracti128    xmm1, ymm14, 1
	LONG $0x1479c3c4; WORD $0x080c; BYTE $0x0c // vpextrb    byte [r8 + rcx], xmm1, 12
	LONG $0x01c2f641                           // test    r10b, 1
	QUAD $0x0000011824ac8b4c                   // mov    r13, qword [rsp + 280]
	JNE  LBB0_992

LBB0_585:
	LONG $0x01c3f641 // test    r11b, 1
	JE   LBB0_586

LBB0_993:
	LONG $0x397de3c4; WORD $0x01f9             // vextracti128    xmm1, ymm7, 1
	LONG $0x7ef9e1c4; BYTE $0xc9               // vmovq    rcx, xmm1
	LONG $0x397d63c4; WORD $0x01f1             // vextracti128    xmm1, ymm14, 1
	LONG $0x1479c3c4; WORD $0x080c; BYTE $0x0e // vpextrb    byte [r8 + rcx], xmm1, 14
	LONG $0x01c6f641                           // test    r14b, 1
	QUAD $0x0000012024848b48                   // mov    rax, qword [rsp + 288]
	QUAD $0x000000e8248c8b4c                   // mov    r9, qword [rsp + 232]
	JNE  LBB0_587
	JMP  LBB0_588

LBB0_556:
	LONG $0x1479e3c4; WORD $0x01f3 // vpextrb    ebx, xmm6, 1
	WORD $0xc3f6; BYTE $0x01       // test    bl, 1
	JE   LBB0_557

LBB0_964:
	LONG $0x16f963c4; WORD $0x01fb             // vpextrq    rbx, xmm15, 1
	LONG $0x147943c4; WORD $0x1834; BYTE $0x01 // vpextrb    byte [r8 + rbx], xmm14, 1
	LONG $0x1479e3c4; WORD $0x02f3             // vpextrb    ebx, xmm6, 2
	WORD $0xc3f6; BYTE $0x01                   // test    bl, 1
	QUAD $0x000000e024bc8b4c                   // mov    r15, qword [rsp + 224]
	JNE  LBB0_965

LBB0_558:
	LONG $0x1479e3c4; WORD $0x03f3 // vpextrb    ebx, xmm6, 3
	WORD $0xc3f6; BYTE $0x01       // test    bl, 1
	JE   LBB0_559

LBB0_966:
	LONG $0x397d63c4; WORD $0x01f9             // vextracti128    xmm1, ymm15, 1
	LONG $0x16f9e3c4; WORD $0x01cb             // vpextrq    rbx, xmm1, 1
	LONG $0x147943c4; WORD $0x1834; BYTE $0x03 // vpextrb    byte [r8 + rbx], xmm14, 3
	LONG $0x1479e3c4; WORD $0x04f3             // vpextrb    ebx, xmm6, 4
	WORD $0xc3f6; BYTE $0x01                   // test    bl, 1
	JNE  LBB0_967

LBB0_560:
	LONG $0x1479e3c4; WORD $0x05f3 // vpextrb    ebx, xmm6, 5
	WORD $0xc3f6; BYTE $0x01       // test    bl, 1
	JE   LBB0_561

LBB0_968:
	LONG $0x16f9e3c4; WORD $0x01eb             // vpextrq    rbx, xmm5, 1
	LONG $0x147943c4; WORD $0x1834; BYTE $0x05 // vpextrb    byte [r8 + rbx], xmm14, 5
	LONG $0x1479e3c4; WORD $0x06f3             // vpextrb    ebx, xmm6, 6
	WORD $0xc3f6; BYTE $0x01                   // test    bl, 1
	JNE  LBB0_969

LBB0_562:
	LONG $0x1479e3c4; WORD $0x07f3 // vpextrb    ebx, xmm6, 7
	WORD $0xc3f6; BYTE $0x01       // test    bl, 1
	JE   LBB0_563

LBB0_970:
	LONG $0x397de3c4; WORD $0x01e9             // vextracti128    xmm1, ymm5, 1
	LONG $0x16f9e3c4; WORD $0x01cb             // vpextrq    rbx, xmm1, 1
	LONG $0x147943c4; WORD $0x1834; BYTE $0x07 // vpextrb    byte [r8 + rbx], xmm14, 7
	LONG $0x1479e3c4; WORD $0x08f3             // vpextrb    ebx, xmm6, 8
	WORD $0xc3f6; BYTE $0x01                   // test    bl, 1
	JNE  LBB0_971

LBB0_564:
	LONG $0x1479e3c4; WORD $0x09f3 // vpextrb    ebx, xmm6, 9
	WORD $0xc3f6; BYTE $0x01       // test    bl, 1
	JE   LBB0_565

LBB0_972:
	LONG $0x16f963c4; WORD $0x01e3             // vpextrq    rbx, xmm12, 1
	LONG $0x147943c4; WORD $0x1834; BYTE $0x09 // vpextrb    byte [r8 + rbx], xmm14, 9
	LONG $0x1479e3c4; WORD $0x0af3             // vpextrb    ebx, xmm6, 10
	WORD $0xc3f6; BYTE $0x01                   // test    bl, 1
	JNE  LBB0_973

LBB0_566:
	LONG $0x1479e3c4; WORD $0x0bf3 // vpextrb    ebx, xmm6, 11
	WORD $0xc3f6; BYTE $0x01       // test    bl, 1
	JE   LBB0_567

LBB0_974:
	LONG $0x397d63c4; WORD $0x01e1             // vextracti128    xmm1, ymm12, 1
	LONG $0x16f9e3c4; WORD $0x01cb             // vpextrq    rbx, xmm1, 1
	LONG $0x147943c4; WORD $0x1834; BYTE $0x0b // vpextrb    byte [r8 + rbx], xmm14, 11
	LONG $0x1479e3c4; WORD $0x0cf3             // vpextrb    ebx, xmm6, 12
	WORD $0xc3f6; BYTE $0x01                   // test    bl, 1
	JNE  LBB0_975

LBB0_568:
	LONG $0x1479e3c4; WORD $0x0df3 // vpextrb    ebx, xmm6, 13
	WORD $0xc3f6; BYTE $0x01       // test    bl, 1
	JE   LBB0_569

LBB0_976:
	LONG $0x16f963c4; WORD $0x01db             // vpextrq    rbx, xmm11, 1
	LONG $0x147943c4; WORD $0x1834; BYTE $0x0d // vpextrb    byte [r8 + rbx], xmm14, 13
	LONG $0x1479e3c4; WORD $0x0ef3             // vpextrb    ebx, xmm6, 14
	WORD $0xc3f6; BYTE $0x01                   // test    bl, 1
	JNE  LBB0_977

LBB0_570:
	LONG $0x1479e3c4; WORD $0x0ff3 // vpextrb    ebx, xmm6, 15
	WORD $0xc3f6; BYTE $0x01       // test    bl, 1
	JE   LBB0_571

LBB0_978:
	LONG $0x397d63c4; WORD $0x01d9             // vextracti128    xmm1, ymm11, 1
	LONG $0x16f9e3c4; WORD $0x01cb             // vpextrq    rbx, xmm1, 1
	LONG $0x147943c4; WORD $0x1834; BYTE $0x0f // vpextrb    byte [r8 + rbx], xmm14, 15
	LONG $0x2c2444f6; BYTE $0x01               // test    byte [rsp + 44], 1
	JNE  LBB0_979

LBB0_572:
	LONG $0x282444f6; BYTE $0x01 // test    byte [rsp + 40], 1
	JE   LBB0_573

LBB0_980:
	LONG $0x16f963c4; WORD $0x01d3             // vpextrq    rbx, xmm10, 1
	LONG $0x397d63c4; WORD $0x01f1             // vextracti128    xmm1, ymm14, 1
	LONG $0x1479c3c4; WORD $0x180c; BYTE $0x01 // vpextrb    byte [r8 + rbx], xmm1, 1
	LONG $0x242444f6; BYTE $0x01               // test    byte [rsp + 36], 1
	JNE  LBB0_981

LBB0_574:
	LONG $0x202444f6; BYTE $0x01 // test    byte [rsp + 32], 1
	JE   LBB0_575

LBB0_982:
	LONG $0x397d63c4; WORD $0x01d1             // vextracti128    xmm1, ymm10, 1
	LONG $0x16f9e3c4; WORD $0x01cb             // vpextrq    rbx, xmm1, 1
	LONG $0x397d63c4; WORD $0x01f1             // vextracti128    xmm1, ymm14, 1
	LONG $0x1479c3c4; WORD $0x180c; BYTE $0x03 // vpextrb    byte [r8 + rbx], xmm1, 3
	LONG $0x1c2444f6; BYTE $0x01               // test    byte [rsp + 28], 1
	JNE  LBB0_983

LBB0_576:
	LONG $0x182444f6; BYTE $0x01 // test    byte [rsp + 24], 1
	JE   LBB0_577

LBB0_984:
	LONG $0x16f963c4; WORD $0x01cb             // vpextrq    rbx, xmm9, 1
	LONG $0x397d63c4; WORD $0x01f1             // vextracti128    xmm1, ymm14, 1
	LONG $0x1479c3c4; WORD $0x180c; BYTE $0x05 // vpextrb    byte [r8 + rbx], xmm1, 5
	LONG $0x142444f6; BYTE $0x01               // test    byte [rsp + 20], 1
	JNE  LBB0_985

LBB0_578:
	LONG $0x01c1f641 // test    r9b, 1
	JE   LBB0_579

LBB0_986:
	LONG $0x397d63c4; WORD $0x01c9             // vextracti128    xmm1, ymm9, 1
	LONG $0x16f9e3c4; WORD $0x01cb             // vpextrq    rbx, xmm1, 1
	LONG $0x397d63c4; WORD $0x01f1             // vextracti128    xmm1, ymm14, 1
	LONG $0x1479c3c4; WORD $0x180c; BYTE $0x07 // vpextrb    byte [r8 + rbx], xmm1, 7
	WORD $0xc2f6; BYTE $0x01                   // test    dl, 1
	QUAD $0x00000128249c8b48                   // mov    rbx, qword [rsp + 296]
	JNE  LBB0_987

LBB0_580:
	WORD $0xc1f6; BYTE $0x01 // test    cl, 1
	JE   LBB0_581

LBB0_988:
	LONG $0x16f963c4; WORD $0x01c1             // vpextrq    rcx, xmm8, 1
	LONG $0x397d63c4; WORD $0x01f1             // vextracti128    xmm1, ymm14, 1
	LONG $0x1479c3c4; WORD $0x080c; BYTE $0x09 // vpextrb    byte [r8 + rcx], xmm1, 9
	LONG $0x01c6f640                           // test    sil, 1
	QUAD $0x0000013024948b48                   // mov    rdx, qword [rsp + 304]
	JNE  LBB0_989

LBB0_582:
	WORD $0x01a8             // test    al, 1
	QUAD $0x0000009824b48b48 // mov    rsi, qword [rsp + 152]
	JE   LBB0_583

LBB0_990:
	LONG $0x397d63c4; WORD $0x01c1             // vextracti128    xmm1, ymm8, 1
	LONG $0x16f9e3c4; WORD $0x01c9             // vpextrq    rcx, xmm1, 1
	LONG $0x397d63c4; WORD $0x01f1             // vextracti128    xmm1, ymm14, 1
	LONG $0x1479c3c4; WORD $0x080c; BYTE $0x0b // vpextrb    byte [r8 + rcx], xmm1, 11
	LONG $0x01c5f641                           // test    r13b, 1
	JNE  LBB0_991

LBB0_584:
	LONG $0x01c2f641         // test    r10b, 1
	QUAD $0x0000011824ac8b4c // mov    r13, qword [rsp + 280]
	JE   LBB0_585

LBB0_992:
	LONG $0x16f9e3c4; WORD $0x01f9             // vpextrq    rcx, xmm7, 1
	LONG $0x397d63c4; WORD $0x01f1             // vextracti128    xmm1, ymm14, 1
	LONG $0x1479c3c4; WORD $0x080c; BYTE $0x0d // vpextrb    byte [r8 + rcx], xmm1, 13
	LONG $0x01c3f641                           // test    r11b, 1
	JNE  LBB0_993

LBB0_586:
	LONG $0x01c6f641         // test    r14b, 1
	QUAD $0x0000012024848b48 // mov    rax, qword [rsp + 288]
	QUAD $0x000000e8248c8b4c // mov    r9, qword [rsp + 232]
	JE   LBB0_588

LBB0_587:
	LONG $0x397de3c4; WORD $0x01f9             // vextracti128    xmm1, ymm7, 1
	LONG $0x16f9e3c4; WORD $0x01c9             // vpextrq    rcx, xmm1, 1
	LONG $0x397d63c4; WORD $0x01f1             // vextracti128    xmm1, ymm14, 1
	LONG $0x1479c3c4; WORD $0x080c; BYTE $0x0f // vpextrb    byte [r8 + rcx], xmm1, 15

LBB0_588:
	QUAD $0x000240248c6ffdc5; BYTE $0x00 // vmovdqa    ymm1, yword [rsp + 576]
	QUAD $0x000200249ceb75c5; BYTE $0x00 // vpor    ymm11, ymm1, yword [rsp + 512]
	QUAD $0x0001e02494eb75c5; BYTE $0x00 // vpor    ymm10, ymm1, yword [rsp + 480]
	QUAD $0x0001802484eb75c5; BYTE $0x00 // vpor    ymm8, ymm1, yword [rsp + 384]
	QUAD $0x00016024bcebf5c5; BYTE $0x00 // vpor    ymm7, ymm1, yword [rsp + 352]
	QUAD $0x0001c0248ceb75c5; BYTE $0x00 // vpor    ymm9, ymm1, yword [rsp + 448]
	QUAD $0x0001a024acebf5c5; BYTE $0x00 // vpor    ymm5, ymm1, yword [rsp + 416]
	QUAD $0x0001402494ebf5c5; BYTE $0x00 // vpor    ymm2, ymm1, yword [rsp + 320]
	LONG $0xf9eb5dc5                     // vpor    ymm15, ymm4, ymm1
	LONG $0x466dc3c4; WORD $0x31df       // vperm2i128    ymm3, ymm2, ymm15, 49
	LONG $0x386dc3c4; WORD $0x01e7       // vinserti128    ymm4, ymm2, xmm15, 1
	LONG $0xdbc6dcc5; BYTE $0x88         // vshufps    ymm3, ymm4, ymm3, 136
	LONG $0x4635e3c4; WORD $0x31e5       // vperm2i128    ymm4, ymm9, ymm5, 49
	LONG $0x383563c4; WORD $0x01e5       // vinserti128    ymm12, ymm9, xmm5, 1
	LONG $0xe4c69cc5; BYTE $0x88         // vshufps    ymm4, ymm12, ymm4, 136
	LONG $0x463d63c4; WORD $0x31e7       // vperm2i128    ymm12, ymm8, ymm7, 49
	LONG $0x383d63c4; WORD $0x01ef       // vinserti128    ymm13, ymm8, xmm7, 1
	LONG $0xc61441c4; WORD $0x88e4       // vshufps    ymm12, ymm13, ymm12, 136
	LONG $0x462543c4; WORD $0x31ea       // vperm2i128    ymm13, ymm11, ymm10, 49
	LONG $0x382543c4; WORD $0x01f2       // vinserti128    ymm14, ymm11, xmm10, 1
	LONG $0xc60c41c4; WORD $0x88ed       // vshufps    ymm13, ymm14, ymm13, 136
	LONG $0x667d41c4; BYTE $0xed         // vpcmpgtd    ymm13, ymm0, ymm13
	LONG $0x667d41c4; BYTE $0xe4         // vpcmpgtd    ymm12, ymm0, ymm12
	LONG $0x6b1541c4; BYTE $0xe4         // vpackssdw    ymm12, ymm13, ymm12
	LONG $0x00fd43c4; WORD $0xd8e4       // vpermq    ymm12, ymm12, 216
	LONG $0xe466fdc5                     // vpcmpgtd    ymm4, ymm0, ymm4
	LONG $0xdb66fdc5                     // vpcmpgtd    ymm3, ymm0, ymm3
	LONG $0xdb6bddc5                     // vpackssdw    ymm3, ymm4, ymm3
	LONG $0x00fde3c4; WORD $0xd8db       // vpermq    ymm3, ymm3, 216
	LONG $0xdb639dc5                     // vpacksswb    ymm3, ymm12, ymm3
	LONG $0xdedbe5c5                     // vpand    ymm3, ymm3, ymm6
	LONG $0xd97ef9c5                     // vmovd    ecx, xmm3
	WORD $0xc1f6; BYTE $0x01             // test    cl, 1
	JE   LBB0_589
	LONG $0x787de2c4; WORD $0x1724       // vpbroadcastb    ymm4, byte [rdi + rdx]
	LONG $0x1479e3c4; WORD $0x01d9       // vpextrb    ecx, xmm3, 1
	WORD $0xc1f6; BYTE $0x01             // test    cl, 1
	JNE  LBB0_995

LBB0_590:
	LONG $0x24548b48; BYTE $0x68   // mov    rdx, qword [rsp + 104]
	LONG $0x1479e3c4; WORD $0x02d9 // vpextrb    ecx, xmm3, 2
	WORD $0xc1f6; BYTE $0x01       // test    cl, 1
	JE   LBB0_592

LBB0_591:
	LONG $0x2059e3c4; WORD $0x1f34; BYTE $0x02 // vpinsrb    xmm6, xmm4, byte [rdi + rbx], 2
	LONG $0x025de3c4; WORD $0x0fe6             // vpblendd    ymm4, ymm4, ymm6, 15

LBB0_592:
	LONG $0x24748b48; BYTE $0x60               // mov    rsi, qword [rsp + 96]
	LONG $0x24548b4c; BYTE $0x48               // mov    r10, qword [rsp + 72]
	LONG $0x1479e3c4; WORD $0x03d9             // vpextrb    ecx, xmm3, 3
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JE   LBB0_593
	QUAD $0x00000110248c8b48                   // mov    rcx, qword [rsp + 272]
	LONG $0x2059e3c4; WORD $0x0f34; BYTE $0x03 // vpinsrb    xmm6, xmm4, byte [rdi + rcx], 3
	LONG $0x025de3c4; WORD $0x0fe6             // vpblendd    ymm4, ymm4, ymm6, 15
	LONG $0x1479e3c4; WORD $0x04d9             // vpextrb    ecx, xmm3, 4
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JNE  LBB0_997

LBB0_594:
	LONG $0x1479e3c4; WORD $0x05d9 // vpextrb    ecx, xmm3, 5
	WORD $0xc1f6; BYTE $0x01       // test    cl, 1
	JE   LBB0_595

LBB0_998:
	LONG $0x2059e3c4; WORD $0x1734; BYTE $0x05 // vpinsrb    xmm6, xmm4, byte [rdi + rdx], 5
	LONG $0x025de3c4; WORD $0x0fe6             // vpblendd    ymm4, ymm4, ymm6, 15
	LONG $0x1479e3c4; WORD $0x06d9             // vpextrb    ecx, xmm3, 6
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JNE  LBB0_999

LBB0_596:
	LONG $0x1479e3c4; WORD $0x07d9 // vpextrb    ecx, xmm3, 7
	WORD $0xc1f6; BYTE $0x01       // test    cl, 1
	JE   LBB0_597

LBB0_1000:
	LONG $0x2059a3c4; WORD $0x0f34; BYTE $0x07 // vpinsrb    xmm6, xmm4, byte [rdi + r9], 7
	LONG $0x025de3c4; WORD $0x0fe6             // vpblendd    ymm4, ymm4, ymm6, 15
	LONG $0x1479e3c4; WORD $0x08d9             // vpextrb    ecx, xmm3, 8
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JNE  LBB0_1001

LBB0_598:
	LONG $0x24548b48; BYTE $0x58   // mov    rdx, qword [rsp + 88]
	LONG $0x1479e3c4; WORD $0x09d9 // vpextrb    ecx, xmm3, 9
	WORD $0xc1f6; BYTE $0x01       // test    cl, 1
	JE   LBB0_600

LBB0_599:
	LONG $0x2059a3c4; WORD $0x3f34; BYTE $0x09 // vpinsrb    xmm6, xmm4, byte [rdi + r15], 9
	LONG $0x025de3c4; WORD $0x0fe6             // vpblendd    ymm4, ymm4, ymm6, 15

LBB0_600:
	QUAD $0x0000009024848b48                   // mov    rax, qword [rsp + 144]
	QUAD $0x0000008824b48b48                   // mov    rsi, qword [rsp + 136]
	QUAD $0x00000080249c8b48                   // mov    rbx, qword [rsp + 128]
	LONG $0x244c8b4c; BYTE $0x78               // mov    r9, qword [rsp + 120]
	LONG $0x1479e3c4; WORD $0x0ad9             // vpextrb    ecx, xmm3, 10
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JE   LBB0_601
	LONG $0x2059e3c4; WORD $0x0734; BYTE $0x0a // vpinsrb    xmm6, xmm4, byte [rdi + rax], 10
	LONG $0x025de3c4; WORD $0x0fe6             // vpblendd    ymm4, ymm4, ymm6, 15
	LONG $0x1479e3c4; WORD $0x0bd9             // vpextrb    ecx, xmm3, 11
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JNE  LBB0_1003

LBB0_602:
	LONG $0x1479e3c4; WORD $0x0cd9 // vpextrb    ecx, xmm3, 12
	WORD $0xc1f6; BYTE $0x01       // test    cl, 1
	JE   LBB0_603

LBB0_1004:
	QUAD $0x000000f824848b48                   // mov    rax, qword [rsp + 248]
	LONG $0x2059e3c4; WORD $0x0734; BYTE $0x0c // vpinsrb    xmm6, xmm4, byte [rdi + rax], 12
	LONG $0x025de3c4; WORD $0x0fe6             // vpblendd    ymm4, ymm4, ymm6, 15
	LONG $0x1479e3c4; WORD $0x0dd9             // vpextrb    ecx, xmm3, 13
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JNE  LBB0_604
	JMP  LBB0_605

LBB0_589:
	LONG $0x1479e3c4; WORD $0x01d9 // vpextrb    ecx, xmm3, 1
	WORD $0xc1f6; BYTE $0x01       // test    cl, 1
	JE   LBB0_590

LBB0_995:
	LONG $0x2059e3c4; WORD $0x3734; BYTE $0x01 // vpinsrb    xmm6, xmm4, byte [rdi + rsi], 1
	LONG $0x025de3c4; WORD $0x0fe6             // vpblendd    ymm4, ymm4, ymm6, 15
	LONG $0x24548b48; BYTE $0x68               // mov    rdx, qword [rsp + 104]
	LONG $0x1479e3c4; WORD $0x02d9             // vpextrb    ecx, xmm3, 2
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JNE  LBB0_591
	JMP  LBB0_592

LBB0_593:
	LONG $0x1479e3c4; WORD $0x04d9 // vpextrb    ecx, xmm3, 4
	WORD $0xc1f6; BYTE $0x01       // test    cl, 1
	JE   LBB0_594

LBB0_997:
	QUAD $0x00000108248c8b48                   // mov    rcx, qword [rsp + 264]
	LONG $0x2059e3c4; WORD $0x0f34; BYTE $0x04 // vpinsrb    xmm6, xmm4, byte [rdi + rcx], 4
	LONG $0x025de3c4; WORD $0x0fe6             // vpblendd    ymm4, ymm4, ymm6, 15
	LONG $0x1479e3c4; WORD $0x05d9             // vpextrb    ecx, xmm3, 5
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JNE  LBB0_998

LBB0_595:
	LONG $0x1479e3c4; WORD $0x06d9 // vpextrb    ecx, xmm3, 6
	WORD $0xc1f6; BYTE $0x01       // test    cl, 1
	JE   LBB0_596

LBB0_999:
	LONG $0x2059e3c4; WORD $0x0734; BYTE $0x06 // vpinsrb    xmm6, xmm4, byte [rdi + rax], 6
	LONG $0x025de3c4; WORD $0x0fe6             // vpblendd    ymm4, ymm4, ymm6, 15
	LONG $0x1479e3c4; WORD $0x07d9             // vpextrb    ecx, xmm3, 7
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JNE  LBB0_1000

LBB0_597:
	LONG $0x1479e3c4; WORD $0x08d9 // vpextrb    ecx, xmm3, 8
	WORD $0xc1f6; BYTE $0x01       // test    cl, 1
	JE   LBB0_598

LBB0_1001:
	LONG $0x2059e3c4; WORD $0x3734; BYTE $0x08 // vpinsrb    xmm6, xmm4, byte [rdi + rsi], 8
	LONG $0x025de3c4; WORD $0x0fe6             // vpblendd    ymm4, ymm4, ymm6, 15
	LONG $0x24548b48; BYTE $0x58               // mov    rdx, qword [rsp + 88]
	LONG $0x1479e3c4; WORD $0x09d9             // vpextrb    ecx, xmm3, 9
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JNE  LBB0_599
	JMP  LBB0_600

LBB0_601:
	LONG $0x1479e3c4; WORD $0x0bd9 // vpextrb    ecx, xmm3, 11
	WORD $0xc1f6; BYTE $0x01       // test    cl, 1
	JE   LBB0_602

LBB0_1003:
	QUAD $0x0000010024848b48                   // mov    rax, qword [rsp + 256]
	LONG $0x2059e3c4; WORD $0x0734; BYTE $0x0b // vpinsrb    xmm6, xmm4, byte [rdi + rax], 11
	LONG $0x025de3c4; WORD $0x0fe6             // vpblendd    ymm4, ymm4, ymm6, 15
	LONG $0x1479e3c4; WORD $0x0cd9             // vpextrb    ecx, xmm3, 12
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JNE  LBB0_1004

LBB0_603:
	LONG $0x1479e3c4; WORD $0x0dd9 // vpextrb    ecx, xmm3, 13
	WORD $0xc1f6; BYTE $0x01       // test    cl, 1
	JE   LBB0_605

LBB0_604:
	LONG $0x2059e3c4; WORD $0x1734; BYTE $0x0d // vpinsrb    xmm6, xmm4, byte [rdi + rdx], 13
	LONG $0x025de3c4; WORD $0x0fe6             // vpblendd    ymm4, ymm4, ymm6, 15

LBB0_605:
	LONG $0x24448b48; BYTE $0x50               // mov    rax, qword [rsp + 80]
	LONG $0x24548b48; BYTE $0x40               // mov    rdx, qword [rsp + 64]
	LONG $0x1479e3c4; WORD $0x0ed9             // vpextrb    ecx, xmm3, 14
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JE   LBB0_607
	LONG $0x2059e3c4; WORD $0x0734; BYTE $0x0e // vpinsrb    xmm6, xmm4, byte [rdi + rax], 14
	LONG $0x025de3c4; WORD $0x0fe6             // vpblendd    ymm4, ymm4, ymm6, 15

LBB0_607:
	LONG $0x1479e3c4; WORD $0x0fd9             // vpextrb    ecx, xmm3, 15
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JE   LBB0_609
	LONG $0x2059a3c4; WORD $0x1734; BYTE $0x0f // vpinsrb    xmm6, xmm4, byte [rdi + r10], 15
	LONG $0x025de3c4; WORD $0x0fe6             // vpblendd    ymm4, ymm4, ymm6, 15

LBB0_609:
	LONG $0x397de3c4; WORD $0x01de             // vextracti128    xmm6, ymm3, 1
	LONG $0xf07ef9c5                           // vmovd    eax, xmm6
	LONG $0x00248489; WORD $0x0002; BYTE $0x00 // mov    dword [rsp + 512], eax
	WORD $0x01a8                               // test    al, 1
	JE   LBB0_611
	LONG $0x397de3c4; WORD $0x01e1             // vextracti128    xmm1, ymm4, 1
	LONG $0x2071e3c4; WORD $0x170c; BYTE $0x00 // vpinsrb    xmm1, xmm1, byte [rdi + rdx], 0
	LONG $0x385de3c4; WORD $0x01e1             // vinserti128    ymm4, ymm4, xmm1, 1

LBB0_611:
	LONG $0x24448b48; BYTE $0x38               // mov    rax, qword [rsp + 56]
	LONG $0x1479e3c4; WORD $0x01f1             // vpextrb    ecx, xmm6, 1
	LONG $0xe0248c89; WORD $0x0001; BYTE $0x00 // mov    dword [rsp + 480], ecx
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JE   LBB0_612
	LONG $0x397de3c4; WORD $0x01e1             // vextracti128    xmm1, ymm4, 1
	LONG $0x2071e3c4; WORD $0x370c; BYTE $0x01 // vpinsrb    xmm1, xmm1, byte [rdi + rsi], 1
	LONG $0x385de3c4; WORD $0x01e1             // vinserti128    ymm4, ymm4, xmm1, 1
	LONG $0x1479e3c4; WORD $0x02f1             // vpextrb    ecx, xmm6, 2
	LONG $0xc0248c89; WORD $0x0001; BYTE $0x00 // mov    dword [rsp + 448], ecx
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JNE  LBB0_1006

LBB0_613:
	LONG $0x1479e3c4; WORD $0x03f1             // vpextrb    ecx, xmm6, 3
	LONG $0xa0248c89; WORD $0x0001; BYTE $0x00 // mov    dword [rsp + 416], ecx
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JE   LBB0_614

LBB0_1007:
	LONG $0x397de3c4; WORD $0x01e1             // vextracti128    xmm1, ymm4, 1
	LONG $0x2071a3c4; WORD $0x0f0c; BYTE $0x03 // vpinsrb    xmm1, xmm1, byte [rdi + r9], 3
	LONG $0x385de3c4; WORD $0x01e1             // vinserti128    ymm4, ymm4, xmm1, 1
	LONG $0x1479e3c4; WORD $0x04f1             // vpextrb    ecx, xmm6, 4
	LONG $0x80248c89; WORD $0x0001; BYTE $0x00 // mov    dword [rsp + 384], ecx
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JNE  LBB0_1008

LBB0_615:
	LONG $0x1479e3c4; WORD $0x05f0             // vpextrb    eax, xmm6, 5
	LONG $0x60248489; WORD $0x0001; BYTE $0x00 // mov    dword [rsp + 352], eax
	WORD $0x01a8                               // test    al, 1
	JE   LBB0_617

LBB0_616:
	LONG $0x397de3c4; WORD $0x01e1             // vextracti128    xmm1, ymm4, 1
	LONG $0x2071a3c4; WORD $0x2f0c; BYTE $0x05 // vpinsrb    xmm1, xmm1, byte [rdi + r13], 5
	LONG $0x385de3c4; WORD $0x01e1             // vinserti128    ymm4, ymm4, xmm1, 1

LBB0_617:
	LONG $0x24448b48; BYTE $0x70               // mov    rax, qword [rsp + 112]
	QUAD $0x000000b8249c8b48                   // mov    rbx, qword [rsp + 184]
	QUAD $0x000000b024948b48                   // mov    rdx, qword [rsp + 176]
	LONG $0x1479e3c4; WORD $0x06f1             // vpextrb    ecx, xmm6, 6
	LONG $0x40248c89; WORD $0x0001; BYTE $0x00 // mov    dword [rsp + 320], ecx
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JE   LBB0_618
	LONG $0x397de3c4; WORD $0x01e1             // vextracti128    xmm1, ymm4, 1
	LONG $0x2071e3c4; WORD $0x070c; BYTE $0x06 // vpinsrb    xmm1, xmm1, byte [rdi + rax], 6
	LONG $0x385de3c4; WORD $0x01e1             // vinserti128    ymm4, ymm4, xmm1, 1
	LONG $0x1479e3c4; WORD $0x07f0             // vpextrb    eax, xmm6, 7
	LONG $0x98248489; WORD $0x0000; BYTE $0x00 // mov    dword [rsp + 152], eax
	WORD $0x01a8                               // test    al, 1
	JNE  LBB0_1010

LBB0_619:
	LONG $0x1479c3c4; WORD $0x08f1 // vpextrb    r9d, xmm6, 8
	LONG $0x01c1f641               // test    r9b, 1
	JE   LBB0_620

LBB0_1011:
	LONG $0x397de3c4; WORD $0x01e1             // vextracti128    xmm1, ymm4, 1
	QUAD $0x000000d824848b48                   // mov    rax, qword [rsp + 216]
	LONG $0x2071e3c4; WORD $0x070c; BYTE $0x08 // vpinsrb    xmm1, xmm1, byte [rdi + rax], 8
	LONG $0x385de3c4; WORD $0x01e1             // vinserti128    ymm4, ymm4, xmm1, 1
	LONG $0x1479e3c4; WORD $0x09f1             // vpextrb    ecx, xmm6, 9
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JNE  LBB0_1012

LBB0_621:
	LONG $0x1479c3c4; WORD $0x0af3 // vpextrb    r11d, xmm6, 10
	LONG $0x01c3f641               // test    r11b, 1
	JE   LBB0_622

LBB0_1013:
	LONG $0x397de3c4; WORD $0x01e1             // vextracti128    xmm1, ymm4, 1
	QUAD $0x000000c824848b48                   // mov    rax, qword [rsp + 200]
	LONG $0x2071e3c4; WORD $0x070c; BYTE $0x0a // vpinsrb    xmm1, xmm1, byte [rdi + rax], 10
	LONG $0x385de3c4; WORD $0x01e1             // vinserti128    ymm4, ymm4, xmm1, 1
	LONG $0x1479e3c4; WORD $0x0bf0             // vpextrb    eax, xmm6, 11
	WORD $0x01a8                               // test    al, 1
	JNE  LBB0_1014

LBB0_623:
	LONG $0x1479e3c4; WORD $0x0cf6 // vpextrb    esi, xmm6, 12
	LONG $0x01c6f640               // test    sil, 1
	JE   LBB0_624

LBB0_1015:
	LONG $0x397de3c4; WORD $0x01e1             // vextracti128    xmm1, ymm4, 1
	LONG $0x2071e3c4; WORD $0x1f0c; BYTE $0x0c // vpinsrb    xmm1, xmm1, byte [rdi + rbx], 12
	LONG $0x385de3c4; WORD $0x01e1             // vinserti128    ymm4, ymm4, xmm1, 1
	LONG $0x1479c3c4; WORD $0x0df2             // vpextrb    r10d, xmm6, 13
	LONG $0x01c2f641                           // test    r10b, 1
	JNE  LBB0_1016

LBB0_625:
	QUAD $0x000000a824948b48       // mov    rdx, qword [rsp + 168]
	LONG $0x1479c3c4; WORD $0x0ef5 // vpextrb    r13d, xmm6, 14
	LONG $0x01c5f641               // test    r13b, 1
	JE   LBB0_626

LBB0_1017:
	LONG $0x397de3c4; WORD $0x01e1             // vextracti128    xmm1, ymm4, 1
	LONG $0x2071e3c4; WORD $0x170c; BYTE $0x0e // vpinsrb    xmm1, xmm1, byte [rdi + rdx], 14
	LONG $0x385de3c4; WORD $0x01e1             // vinserti128    ymm4, ymm4, xmm1, 1
	QUAD $0x000000a024948b48                   // mov    rdx, qword [rsp + 160]
	LONG $0x1479c3c4; WORD $0x0ff6             // vpextrb    r14d, xmm6, 15
	LONG $0x01c6f641                           // test    r14b, 1
	JNE  LBB0_627
	JMP  LBB0_628

LBB0_612:
	LONG $0x1479e3c4; WORD $0x02f1             // vpextrb    ecx, xmm6, 2
	LONG $0xc0248c89; WORD $0x0001; BYTE $0x00 // mov    dword [rsp + 448], ecx
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JE   LBB0_613

LBB0_1006:
	LONG $0x397de3c4; WORD $0x01e1             // vextracti128    xmm1, ymm4, 1
	LONG $0x2071e3c4; WORD $0x1f0c; BYTE $0x02 // vpinsrb    xmm1, xmm1, byte [rdi + rbx], 2
	LONG $0x385de3c4; WORD $0x01e1             // vinserti128    ymm4, ymm4, xmm1, 1
	LONG $0x1479e3c4; WORD $0x03f1             // vpextrb    ecx, xmm6, 3
	LONG $0xa0248c89; WORD $0x0001; BYTE $0x00 // mov    dword [rsp + 416], ecx
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JNE  LBB0_1007

LBB0_614:
	LONG $0x1479e3c4; WORD $0x04f1             // vpextrb    ecx, xmm6, 4
	LONG $0x80248c89; WORD $0x0001; BYTE $0x00 // mov    dword [rsp + 384], ecx
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JE   LBB0_615

LBB0_1008:
	LONG $0x397de3c4; WORD $0x01e1             // vextracti128    xmm1, ymm4, 1
	LONG $0x2071e3c4; WORD $0x070c; BYTE $0x04 // vpinsrb    xmm1, xmm1, byte [rdi + rax], 4
	LONG $0x385de3c4; WORD $0x01e1             // vinserti128    ymm4, ymm4, xmm1, 1
	LONG $0x1479e3c4; WORD $0x05f0             // vpextrb    eax, xmm6, 5
	LONG $0x60248489; WORD $0x0001; BYTE $0x00 // mov    dword [rsp + 352], eax
	WORD $0x01a8                               // test    al, 1
	JNE  LBB0_616
	JMP  LBB0_617

LBB0_618:
	LONG $0x1479e3c4; WORD $0x07f0             // vpextrb    eax, xmm6, 7
	LONG $0x98248489; WORD $0x0000; BYTE $0x00 // mov    dword [rsp + 152], eax
	WORD $0x01a8                               // test    al, 1
	JE   LBB0_619

LBB0_1010:
	LONG $0x397de3c4; WORD $0x01e1             // vextracti128    xmm1, ymm4, 1
	QUAD $0x000000f024848b48                   // mov    rax, qword [rsp + 240]
	LONG $0x2071e3c4; WORD $0x070c; BYTE $0x07 // vpinsrb    xmm1, xmm1, byte [rdi + rax], 7
	LONG $0x385de3c4; WORD $0x01e1             // vinserti128    ymm4, ymm4, xmm1, 1
	LONG $0x1479c3c4; WORD $0x08f1             // vpextrb    r9d, xmm6, 8
	LONG $0x01c1f641                           // test    r9b, 1
	JNE  LBB0_1011

LBB0_620:
	LONG $0x1479e3c4; WORD $0x09f1 // vpextrb    ecx, xmm6, 9
	WORD $0xc1f6; BYTE $0x01       // test    cl, 1
	JE   LBB0_621

LBB0_1012:
	LONG $0x397de3c4; WORD $0x01e1             // vextracti128    xmm1, ymm4, 1
	QUAD $0x000000d024848b48                   // mov    rax, qword [rsp + 208]
	LONG $0x2071e3c4; WORD $0x070c; BYTE $0x09 // vpinsrb    xmm1, xmm1, byte [rdi + rax], 9
	LONG $0x385de3c4; WORD $0x01e1             // vinserti128    ymm4, ymm4, xmm1, 1
	LONG $0x1479c3c4; WORD $0x0af3             // vpextrb    r11d, xmm6, 10
	LONG $0x01c3f641                           // test    r11b, 1
	JNE  LBB0_1013

LBB0_622:
	LONG $0x1479e3c4; WORD $0x0bf0 // vpextrb    eax, xmm6, 11
	WORD $0x01a8                   // test    al, 1
	JE   LBB0_623

LBB0_1014:
	LONG $0x397de3c4; WORD $0x01e1             // vextracti128    xmm1, ymm4, 1
	QUAD $0x000000c024b48b48                   // mov    rsi, qword [rsp + 192]
	LONG $0x2071e3c4; WORD $0x370c; BYTE $0x0b // vpinsrb    xmm1, xmm1, byte [rdi + rsi], 11
	LONG $0x385de3c4; WORD $0x01e1             // vinserti128    ymm4, ymm4, xmm1, 1
	LONG $0x1479e3c4; WORD $0x0cf6             // vpextrb    esi, xmm6, 12
	LONG $0x01c6f640                           // test    sil, 1
	JNE  LBB0_1015

LBB0_624:
	LONG $0x1479c3c4; WORD $0x0df2 // vpextrb    r10d, xmm6, 13
	LONG $0x01c2f641               // test    r10b, 1
	JE   LBB0_625

LBB0_1016:
	LONG $0x397de3c4; WORD $0x01e1             // vextracti128    xmm1, ymm4, 1
	LONG $0x2071e3c4; WORD $0x170c; BYTE $0x0d // vpinsrb    xmm1, xmm1, byte [rdi + rdx], 13
	LONG $0x385de3c4; WORD $0x01e1             // vinserti128    ymm4, ymm4, xmm1, 1
	QUAD $0x000000a824948b48                   // mov    rdx, qword [rsp + 168]
	LONG $0x1479c3c4; WORD $0x0ef5             // vpextrb    r13d, xmm6, 14
	LONG $0x01c5f641                           // test    r13b, 1
	JNE  LBB0_1017

LBB0_626:
	QUAD $0x000000a024948b48       // mov    rdx, qword [rsp + 160]
	LONG $0x1479c3c4; WORD $0x0ff6 // vpextrb    r14d, xmm6, 15
	LONG $0x01c6f641               // test    r14b, 1
	JE   LBB0_628

LBB0_627:
	LONG $0x397de3c4; WORD $0x01e1             // vextracti128    xmm1, ymm4, 1
	LONG $0x2071e3c4; WORD $0x170c; BYTE $0x0f // vpinsrb    xmm1, xmm1, byte [rdi + rdx], 15
	LONG $0x385de3c4; WORD $0x01e1             // vinserti128    ymm4, ymm4, xmm1, 1

LBB0_628:
	LONG $0xd471f5c5; BYTE $0x07               // vpsrlw    ymm1, ymm4, 7
	QUAD $0x00000080a5dbf5c5                   // vpand    ymm4, ymm1, yword 128[rbp] /* [rip + .LCPI0_4] */
	LONG $0x7e79c1c4; BYTE $0xdf               // vmovd    r15d, xmm3
	LONG $0x01c7f641                           // test    r15b, 1
	JE   LBB0_629
	LONG $0x7ef961c4; BYTE $0xdb               // vmovq    rbx, xmm11
	LONG $0x1479c3c4; WORD $0x1824; BYTE $0x00 // vpextrb    byte [r8 + rbx], xmm4, 0
	LONG $0x1479e3c4; WORD $0x01db             // vpextrb    ebx, xmm3, 1
	WORD $0xc3f6; BYTE $0x01                   // test    bl, 1
	JNE  LBB0_1019

LBB0_630:
	LONG $0x1479e3c4; WORD $0x02db // vpextrb    ebx, xmm3, 2
	WORD $0xc3f6; BYTE $0x01       // test    bl, 1
	JE   LBB0_631

LBB0_1020:
	LONG $0x397d63c4; WORD $0x01d9             // vextracti128    xmm1, ymm11, 1
	LONG $0x7ef9e1c4; BYTE $0xcb               // vmovq    rbx, xmm1
	LONG $0x1479c3c4; WORD $0x1824; BYTE $0x02 // vpextrb    byte [r8 + rbx], xmm4, 2
	LONG $0x1479e3c4; WORD $0x03db             // vpextrb    ebx, xmm3, 3
	WORD $0xc3f6; BYTE $0x01                   // test    bl, 1
	JNE  LBB0_1021

LBB0_632:
	LONG $0x1479e3c4; WORD $0x04db // vpextrb    ebx, xmm3, 4
	WORD $0xc3f6; BYTE $0x01       // test    bl, 1
	JE   LBB0_633

LBB0_1022:
	LONG $0x7ef961c4; BYTE $0xd3               // vmovq    rbx, xmm10
	LONG $0x1479c3c4; WORD $0x1824; BYTE $0x04 // vpextrb    byte [r8 + rbx], xmm4, 4
	LONG $0x1479e3c4; WORD $0x05db             // vpextrb    ebx, xmm3, 5
	WORD $0xc3f6; BYTE $0x01                   // test    bl, 1
	JNE  LBB0_1023

LBB0_634:
	LONG $0x1479e3c4; WORD $0x06db // vpextrb    ebx, xmm3, 6
	WORD $0xc3f6; BYTE $0x01       // test    bl, 1
	JE   LBB0_635

LBB0_1024:
	LONG $0x397d63c4; WORD $0x01d1             // vextracti128    xmm1, ymm10, 1
	LONG $0x7ef9e1c4; BYTE $0xcb               // vmovq    rbx, xmm1
	LONG $0x1479c3c4; WORD $0x1824; BYTE $0x06 // vpextrb    byte [r8 + rbx], xmm4, 6
	LONG $0x1479e3c4; WORD $0x07db             // vpextrb    ebx, xmm3, 7
	WORD $0xc3f6; BYTE $0x01                   // test    bl, 1
	JNE  LBB0_1025

LBB0_636:
	LONG $0x1479e3c4; WORD $0x08db // vpextrb    ebx, xmm3, 8
	WORD $0xc3f6; BYTE $0x01       // test    bl, 1
	JE   LBB0_637

LBB0_1026:
	LONG $0x7ef961c4; BYTE $0xcb               // vmovq    rbx, xmm9
	LONG $0x1479c3c4; WORD $0x1824; BYTE $0x08 // vpextrb    byte [r8 + rbx], xmm4, 8
	LONG $0x1479e3c4; WORD $0x09db             // vpextrb    ebx, xmm3, 9
	WORD $0xc3f6; BYTE $0x01                   // test    bl, 1
	JNE  LBB0_1027

LBB0_638:
	LONG $0x1479e3c4; WORD $0x0adb // vpextrb    ebx, xmm3, 10
	WORD $0xc3f6; BYTE $0x01       // test    bl, 1
	JE   LBB0_639

LBB0_1028:
	LONG $0x397d63c4; WORD $0x01c9             // vextracti128    xmm1, ymm9, 1
	LONG $0x7ef9e1c4; BYTE $0xcb               // vmovq    rbx, xmm1
	LONG $0x1479c3c4; WORD $0x1824; BYTE $0x0a // vpextrb    byte [r8 + rbx], xmm4, 10
	LONG $0x1479e3c4; WORD $0x0bdb             // vpextrb    ebx, xmm3, 11
	WORD $0xc3f6; BYTE $0x01                   // test    bl, 1
	JNE  LBB0_1029

LBB0_640:
	LONG $0x1479e3c4; WORD $0x0cdb // vpextrb    ebx, xmm3, 12
	WORD $0xc3f6; BYTE $0x01       // test    bl, 1
	JE   LBB0_641

LBB0_1030:
	LONG $0x7ef9e1c4; BYTE $0xeb               // vmovq    rbx, xmm5
	LONG $0x1479c3c4; WORD $0x1824; BYTE $0x0c // vpextrb    byte [r8 + rbx], xmm4, 12
	LONG $0x1479e3c4; WORD $0x0ddb             // vpextrb    ebx, xmm3, 13
	WORD $0xc3f6; BYTE $0x01                   // test    bl, 1
	QUAD $0x000380248c6f7dc5; BYTE $0x00       // vmovdqa    ymm9, yword [rsp + 896]
	JNE  LBB0_1031

LBB0_642:
	LONG $0x1479e3c4; WORD $0x0edb // vpextrb    ebx, xmm3, 14
	WORD $0xc3f6; BYTE $0x01       // test    bl, 1
	JE   LBB0_643

LBB0_1032:
	LONG $0x397de3c4; WORD $0x01e9             // vextracti128    xmm1, ymm5, 1
	LONG $0x7ef9e1c4; BYTE $0xcb               // vmovq    rbx, xmm1
	LONG $0x1479c3c4; WORD $0x1824; BYTE $0x0e // vpextrb    byte [r8 + rbx], xmm4, 14
	LONG $0x1479e3c4; WORD $0x0fdb             // vpextrb    ebx, xmm3, 15
	WORD $0xc3f6; BYTE $0x01                   // test    bl, 1
	JNE  LBB0_1033

LBB0_644:
	QUAD $0x01000002002484f6             // test    byte [rsp + 512], 1
	QUAD $0x000340249c6ffdc5; BYTE $0x00 // vmovdqa    ymm3, yword [rsp + 832]
	JE   LBB0_645

LBB0_1034:
	LONG $0x7ef961c4; BYTE $0xc3               // vmovq    rbx, xmm8
	LONG $0x397de3c4; WORD $0x01e1             // vextracti128    xmm1, ymm4, 1
	LONG $0x1479c3c4; WORD $0x180c; BYTE $0x00 // vpextrb    byte [r8 + rbx], xmm1, 0
	QUAD $0x01000001e02484f6                   // test    byte [rsp + 480], 1
	JNE  LBB0_1035

LBB0_646:
	QUAD $0x01000001c02484f6 // test    byte [rsp + 448], 1
	JE   LBB0_647

LBB0_1036:
	LONG $0x397d63c4; WORD $0x01c1             // vextracti128    xmm1, ymm8, 1
	LONG $0x7ef9e1c4; BYTE $0xcb               // vmovq    rbx, xmm1
	LONG $0x397de3c4; WORD $0x01e1             // vextracti128    xmm1, ymm4, 1
	LONG $0x1479c3c4; WORD $0x180c; BYTE $0x02 // vpextrb    byte [r8 + rbx], xmm1, 2
	QUAD $0x01000001a02484f6                   // test    byte [rsp + 416], 1
	JNE  LBB0_1037

LBB0_648:
	QUAD $0x01000001802484f6 // test    byte [rsp + 384], 1
	JE   LBB0_649

LBB0_1038:
	LONG $0x7ef9e1c4; BYTE $0xfb               // vmovq    rbx, xmm7
	LONG $0x397de3c4; WORD $0x01e1             // vextracti128    xmm1, ymm4, 1
	LONG $0x1479c3c4; WORD $0x180c; BYTE $0x04 // vpextrb    byte [r8 + rbx], xmm1, 4
	QUAD $0x01000001602484f6                   // test    byte [rsp + 352], 1
	QUAD $0x00036024846f7dc5; BYTE $0x00       // vmovdqa    ymm8, yword [rsp + 864]
	JNE  LBB0_1039

LBB0_650:
	QUAD $0x01000001402484f6 // test    byte [rsp + 320], 1
	JE   LBB0_651

LBB0_1040:
	LONG $0x397de3c4; WORD $0x01f9             // vextracti128    xmm1, ymm7, 1
	LONG $0x7ef9e1c4; BYTE $0xcb               // vmovq    rbx, xmm1
	LONG $0x397de3c4; WORD $0x01e1             // vextracti128    xmm1, ymm4, 1
	LONG $0x1479c3c4; WORD $0x180c; BYTE $0x06 // vpextrb    byte [r8 + rbx], xmm1, 6
	QUAD $0x01000000982484f6                   // test    byte [rsp + 152], 1
	JNE  LBB0_1041

LBB0_652:
	LONG $0x01c1f641             // test    r9b, 1
	LONG $0x244c8b44; BYTE $0x10 // mov    r9d, dword [rsp + 16]
	JE   LBB0_653

LBB0_1042:
	LONG $0x7ef9e1c4; BYTE $0xd2               // vmovq    rdx, xmm2
	LONG $0x397de3c4; WORD $0x01e1             // vextracti128    xmm1, ymm4, 1
	LONG $0x1479c3c4; WORD $0x100c; BYTE $0x08 // vpextrb    byte [r8 + rdx], xmm1, 8
	WORD $0xc1f6; BYTE $0x01                   // test    cl, 1
	JNE  LBB0_1043

LBB0_654:
	LONG $0x01c3f641         // test    r11b, 1
	QUAD $0x00000130249c8b4c // mov    r11, qword [rsp + 304]
	JE   LBB0_655

LBB0_1044:
	LONG $0x397de3c4; WORD $0x01d1             // vextracti128    xmm1, ymm2, 1
	LONG $0x7ef9e1c4; BYTE $0xc9               // vmovq    rcx, xmm1
	LONG $0x397de3c4; WORD $0x01e1             // vextracti128    xmm1, ymm4, 1
	LONG $0x1479c3c4; WORD $0x080c; BYTE $0x0a // vpextrb    byte [r8 + rcx], xmm1, 10
	WORD $0x01a8                               // test    al, 1
	JNE  LBB0_1045

LBB0_656:
	LONG $0x01c6f640 // test    sil, 1
	JE   LBB0_657

LBB0_1046:
	LONG $0x7ef961c4; BYTE $0xf9               // vmovq    rcx, xmm15
	LONG $0x397de3c4; WORD $0x01e1             // vextracti128    xmm1, ymm4, 1
	LONG $0x1479c3c4; WORD $0x080c; BYTE $0x0c // vpextrb    byte [r8 + rcx], xmm1, 12
	LONG $0x01c2f641                           // test    r10b, 1
	QUAD $0x00032024946ffdc5; BYTE $0x00       // vmovdqa    ymm2, yword [rsp + 800]
	JNE  LBB0_1047

LBB0_658:
	LONG $0x01c5f641             // test    r13b, 1
	LONG $0x24548b4c; BYTE $0x30 // mov    r10, qword [rsp + 48]
	JE   LBB0_659

LBB0_1048:
	LONG $0x397d63c4; WORD $0x01f9             // vextracti128    xmm1, ymm15, 1
	LONG $0x7ef9e1c4; BYTE $0xc9               // vmovq    rcx, xmm1
	LONG $0x397de3c4; WORD $0x01e1             // vextracti128    xmm1, ymm4, 1
	LONG $0x1479c3c4; WORD $0x080c; BYTE $0x0e // vpextrb    byte [r8 + rcx], xmm1, 14
	LONG $0x01c6f641                           // test    r14b, 1
	JE   LBB0_25
	JMP  LBB0_1049

LBB0_629:
	LONG $0x1479e3c4; WORD $0x01db // vpextrb    ebx, xmm3, 1
	WORD $0xc3f6; BYTE $0x01       // test    bl, 1
	JE   LBB0_630

LBB0_1019:
	LONG $0x16f963c4; WORD $0x01db             // vpextrq    rbx, xmm11, 1
	LONG $0x1479c3c4; WORD $0x1824; BYTE $0x01 // vpextrb    byte [r8 + rbx], xmm4, 1
	LONG $0x1479e3c4; WORD $0x02db             // vpextrb    ebx, xmm3, 2
	WORD $0xc3f6; BYTE $0x01                   // test    bl, 1
	JNE  LBB0_1020

LBB0_631:
	LONG $0x1479e3c4; WORD $0x03db // vpextrb    ebx, xmm3, 3
	WORD $0xc3f6; BYTE $0x01       // test    bl, 1
	JE   LBB0_632

LBB0_1021:
	LONG $0x397d63c4; WORD $0x01d9             // vextracti128    xmm1, ymm11, 1
	LONG $0x16f9e3c4; WORD $0x01cb             // vpextrq    rbx, xmm1, 1
	LONG $0x1479c3c4; WORD $0x1824; BYTE $0x03 // vpextrb    byte [r8 + rbx], xmm4, 3
	LONG $0x1479e3c4; WORD $0x04db             // vpextrb    ebx, xmm3, 4
	WORD $0xc3f6; BYTE $0x01                   // test    bl, 1
	JNE  LBB0_1022

LBB0_633:
	LONG $0x1479e3c4; WORD $0x05db // vpextrb    ebx, xmm3, 5
	WORD $0xc3f6; BYTE $0x01       // test    bl, 1
	JE   LBB0_634

LBB0_1023:
	LONG $0x16f963c4; WORD $0x01d3             // vpextrq    rbx, xmm10, 1
	LONG $0x1479c3c4; WORD $0x1824; BYTE $0x05 // vpextrb    byte [r8 + rbx], xmm4, 5
	LONG $0x1479e3c4; WORD $0x06db             // vpextrb    ebx, xmm3, 6
	WORD $0xc3f6; BYTE $0x01                   // test    bl, 1
	JNE  LBB0_1024

LBB0_635:
	LONG $0x1479e3c4; WORD $0x07db // vpextrb    ebx, xmm3, 7
	WORD $0xc3f6; BYTE $0x01       // test    bl, 1
	JE   LBB0_636

LBB0_1025:
	LONG $0x397d63c4; WORD $0x01d1             // vextracti128    xmm1, ymm10, 1
	LONG $0x16f9e3c4; WORD $0x01cb             // vpextrq    rbx, xmm1, 1
	LONG $0x1479c3c4; WORD $0x1824; BYTE $0x07 // vpextrb    byte [r8 + rbx], xmm4, 7
	LONG $0x1479e3c4; WORD $0x08db             // vpextrb    ebx, xmm3, 8
	WORD $0xc3f6; BYTE $0x01                   // test    bl, 1
	JNE  LBB0_1026

LBB0_637:
	LONG $0x1479e3c4; WORD $0x09db // vpextrb    ebx, xmm3, 9
	WORD $0xc3f6; BYTE $0x01       // test    bl, 1
	JE   LBB0_638

LBB0_1027:
	LONG $0x16f963c4; WORD $0x01cb             // vpextrq    rbx, xmm9, 1
	LONG $0x1479c3c4; WORD $0x1824; BYTE $0x09 // vpextrb    byte [r8 + rbx], xmm4, 9
	LONG $0x1479e3c4; WORD $0x0adb             // vpextrb    ebx, xmm3, 10
	WORD $0xc3f6; BYTE $0x01                   // test    bl, 1
	JNE  LBB0_1028

LBB0_639:
	LONG $0x1479e3c4; WORD $0x0bdb // vpextrb    ebx, xmm3, 11
	WORD $0xc3f6; BYTE $0x01       // test    bl, 1
	JE   LBB0_640

LBB0_1029:
	LONG $0x397d63c4; WORD $0x01c9             // vextracti128    xmm1, ymm9, 1
	LONG $0x16f9e3c4; WORD $0x01cb             // vpextrq    rbx, xmm1, 1
	LONG $0x1479c3c4; WORD $0x1824; BYTE $0x0b // vpextrb    byte [r8 + rbx], xmm4, 11
	LONG $0x1479e3c4; WORD $0x0cdb             // vpextrb    ebx, xmm3, 12
	WORD $0xc3f6; BYTE $0x01                   // test    bl, 1
	JNE  LBB0_1030

LBB0_641:
	LONG $0x1479e3c4; WORD $0x0ddb       // vpextrb    ebx, xmm3, 13
	WORD $0xc3f6; BYTE $0x01             // test    bl, 1
	QUAD $0x000380248c6f7dc5; BYTE $0x00 // vmovdqa    ymm9, yword [rsp + 896]
	JE   LBB0_642

LBB0_1031:
	LONG $0x16f9e3c4; WORD $0x01eb             // vpextrq    rbx, xmm5, 1
	LONG $0x1479c3c4; WORD $0x1824; BYTE $0x0d // vpextrb    byte [r8 + rbx], xmm4, 13
	LONG $0x1479e3c4; WORD $0x0edb             // vpextrb    ebx, xmm3, 14
	WORD $0xc3f6; BYTE $0x01                   // test    bl, 1
	JNE  LBB0_1032

LBB0_643:
	LONG $0x1479e3c4; WORD $0x0fdb // vpextrb    ebx, xmm3, 15
	WORD $0xc3f6; BYTE $0x01       // test    bl, 1
	JE   LBB0_644

LBB0_1033:
	LONG $0x397de3c4; WORD $0x01e9             // vextracti128    xmm1, ymm5, 1
	LONG $0x16f9e3c4; WORD $0x01cb             // vpextrq    rbx, xmm1, 1
	LONG $0x1479c3c4; WORD $0x1824; BYTE $0x0f // vpextrb    byte [r8 + rbx], xmm4, 15
	QUAD $0x01000002002484f6                   // test    byte [rsp + 512], 1
	QUAD $0x000340249c6ffdc5; BYTE $0x00       // vmovdqa    ymm3, yword [rsp + 832]
	JNE  LBB0_1034

LBB0_645:
	QUAD $0x01000001e02484f6 // test    byte [rsp + 480], 1
	JE   LBB0_646

LBB0_1035:
	LONG $0x16f963c4; WORD $0x01c3             // vpextrq    rbx, xmm8, 1
	LONG $0x397de3c4; WORD $0x01e1             // vextracti128    xmm1, ymm4, 1
	LONG $0x1479c3c4; WORD $0x180c; BYTE $0x01 // vpextrb    byte [r8 + rbx], xmm1, 1
	QUAD $0x01000001c02484f6                   // test    byte [rsp + 448], 1
	JNE  LBB0_1036

LBB0_647:
	QUAD $0x01000001a02484f6 // test    byte [rsp + 416], 1
	JE   LBB0_648

LBB0_1037:
	LONG $0x397d63c4; WORD $0x01c1             // vextracti128    xmm1, ymm8, 1
	LONG $0x16f9e3c4; WORD $0x01cb             // vpextrq    rbx, xmm1, 1
	LONG $0x397de3c4; WORD $0x01e1             // vextracti128    xmm1, ymm4, 1
	LONG $0x1479c3c4; WORD $0x180c; BYTE $0x03 // vpextrb    byte [r8 + rbx], xmm1, 3
	QUAD $0x01000001802484f6                   // test    byte [rsp + 384], 1
	JNE  LBB0_1038

LBB0_649:
	QUAD $0x01000001602484f6             // test    byte [rsp + 352], 1
	QUAD $0x00036024846f7dc5; BYTE $0x00 // vmovdqa    ymm8, yword [rsp + 864]
	JE   LBB0_650

LBB0_1039:
	LONG $0x16f9e3c4; WORD $0x01fb             // vpextrq    rbx, xmm7, 1
	LONG $0x397de3c4; WORD $0x01e1             // vextracti128    xmm1, ymm4, 1
	LONG $0x1479c3c4; WORD $0x180c; BYTE $0x05 // vpextrb    byte [r8 + rbx], xmm1, 5
	QUAD $0x01000001402484f6                   // test    byte [rsp + 320], 1
	JNE  LBB0_1040

LBB0_651:
	QUAD $0x01000000982484f6 // test    byte [rsp + 152], 1
	JE   LBB0_652

LBB0_1041:
	LONG $0x397de3c4; WORD $0x01f9             // vextracti128    xmm1, ymm7, 1
	LONG $0x16f9e3c4; WORD $0x01cb             // vpextrq    rbx, xmm1, 1
	LONG $0x397de3c4; WORD $0x01e1             // vextracti128    xmm1, ymm4, 1
	LONG $0x1479c3c4; WORD $0x180c; BYTE $0x07 // vpextrb    byte [r8 + rbx], xmm1, 7
	LONG $0x01c1f641                           // test    r9b, 1
	LONG $0x244c8b44; BYTE $0x10               // mov    r9d, dword [rsp + 16]
	JNE  LBB0_1042

LBB0_653:
	WORD $0xc1f6; BYTE $0x01 // test    cl, 1
	JE   LBB0_654

LBB0_1043:
	LONG $0x16f9e3c4; WORD $0x01d1             // vpextrq    rcx, xmm2, 1
	LONG $0x397de3c4; WORD $0x01e1             // vextracti128    xmm1, ymm4, 1
	LONG $0x1479c3c4; WORD $0x080c; BYTE $0x09 // vpextrb    byte [r8 + rcx], xmm1, 9
	LONG $0x01c3f641                           // test    r11b, 1
	QUAD $0x00000130249c8b4c                   // mov    r11, qword [rsp + 304]
	JNE  LBB0_1044

LBB0_655:
	WORD $0x01a8  // test    al, 1
	JE   LBB0_656

LBB0_1045:
	LONG $0x397de3c4; WORD $0x01d1             // vextracti128    xmm1, ymm2, 1
	LONG $0x16f9e3c4; WORD $0x01c9             // vpextrq    rcx, xmm1, 1
	LONG $0x397de3c4; WORD $0x01e1             // vextracti128    xmm1, ymm4, 1
	LONG $0x1479c3c4; WORD $0x080c; BYTE $0x0b // vpextrb    byte [r8 + rcx], xmm1, 11
	LONG $0x01c6f640                           // test    sil, 1
	JNE  LBB0_1046

LBB0_657:
	LONG $0x01c2f641                     // test    r10b, 1
	QUAD $0x00032024946ffdc5; BYTE $0x00 // vmovdqa    ymm2, yword [rsp + 800]
	JE   LBB0_658

LBB0_1047:
	LONG $0x16f963c4; WORD $0x01f9             // vpextrq    rcx, xmm15, 1
	LONG $0x397de3c4; WORD $0x01e1             // vextracti128    xmm1, ymm4, 1
	LONG $0x1479c3c4; WORD $0x080c; BYTE $0x0d // vpextrb    byte [r8 + rcx], xmm1, 13
	LONG $0x01c5f641                           // test    r13b, 1
	LONG $0x24548b4c; BYTE $0x30               // mov    r10, qword [rsp + 48]
	JNE  LBB0_1048

LBB0_659:
	LONG $0x01c6f641 // test    r14b, 1
	JE   LBB0_25

LBB0_1049:
	LONG $0x397d63c4; WORD $0x01f9             // vextracti128    xmm1, ymm15, 1
	LONG $0x16f9e3c4; WORD $0x01c9             // vpextrq    rcx, xmm1, 1
	LONG $0x397de3c4; WORD $0x01e1             // vextracti128    xmm1, ymm4, 1
	LONG $0x1479c3c4; WORD $0x080c; BYTE $0x0f // vpextrb    byte [r8 + rcx], xmm1, 15
	JMP  LBB0_25

LBB0_1050:
	WORD $0x394d; BYTE $0xd4 // cmp    r12, r10
	JNE  LBB0_1055

LBB0_1051:
	MOVQ 960(SP), SP
	VZEROUPPER
	RET

LBB0_1052:
	LONG $0x244c8b44; BYTE $0x10 // mov    r9d, dword [rsp + 16]
	LONG $0x24548b4c; BYTE $0x30 // mov    r10, qword [rsp + 48]
	JMP  LBB0_1055

LBB0_1054:
	LONG $0x244c8b44; BYTE $0x10 // mov    r9d, dword [rsp + 16]
	JMP  LBB0_1055
